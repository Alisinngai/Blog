{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"66b5d0c5d1bab0e00e0ccafdfcdc7b722896dd34","modified":1712940740157},{"_id":"source/_posts/2023-08-10-CompletableFuture的使用.md","hash":"d3a84b0dfc9af558763b3a168d09c857208f1969","modified":1712941093134},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1712942298256},{"_id":"themes/butterfly/README.md","hash":"20a91bea7f7ada8b8195d2abff106a7ce21bba20","modified":1712942298259},{"_id":"themes/butterfly/README_CN.md","hash":"9d729ee2ffc5e5f703ccfbfbbb7b286d59071125","modified":1712942298260},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"3b572099a992e30267f5fe4cd3c582ff7ac9f083","modified":1712942298241},{"_id":"themes/butterfly/_config.yml","hash":"c6fab3700a6502b5790ca20d20113020544ea048","modified":1712942298263},{"_id":"themes/butterfly/languages/default.yml","hash":"90e9e2f36dc51aa77eb7804ae048b4876035b12d","modified":1712942298266},{"_id":"themes/butterfly/package.json","hash":"2b6fb6f62b9fa6a829311ffd532ae760fbd0a7db","modified":1712942298479},{"_id":"themes/butterfly/plugins.yml","hash":"7bb2c7350c0c57850aa30213cd0f26553a614702","modified":1712942298481},{"_id":"themes/butterfly/languages/en.yml","hash":"68127be0e6b44cfc5f31353d8b275c02939b3ff9","modified":1712942298268},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"2dcc70a011b37890215ae0fd6d8f8c78aa8af6b0","modified":1712942298270},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"1392e7b8c678cdfb54f55523693e66abc7d80538","modified":1712942298272},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1712942298276},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1712942298277},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1712942298472},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"eed9190301095b35081aa2658204cc3f15b9f5e1","modified":1712942298245},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1712942298249},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1712942298247},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1712942298252},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1712942298474},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1712942298254},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1712942298478},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1712942298476},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"50eea5aa78cdeb6c72dd22f0aeabc407cc0f712e","modified":1712942298281},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1712942298280},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1712942298283},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1712942298485},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ea8d4e8ac6af93cd268ba8f6ffcb80417bc2501e","modified":1712942298285},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1712942298334},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"96df62e34661d8ca4a45267286127479e5178a79","modified":1712942298313},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"f448bf73103b88de4443e52d600e871cf3de3e32","modified":1712942298340},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1712942298491},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9277fead4c29dbe93976f078adaa26e8f9253da3","modified":1712942298342},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1712942298497},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1712942298489},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1712942298487},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"b1dfc3c898b886eab1241b068fc27d7a26a3b7d2","modified":1712942298493},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"0a336dfe5ed08952fa0df1532421df38a74a20d6","modified":1712942298495},{"_id":"themes/butterfly/source/css/var.styl","hash":"950250f66faeb611a67540e0fa6cedbcf5a7a321","modified":1712942298655},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1712942298663},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1712942298660},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1712942298658},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1712942298653},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"0df22d7dbfa766a65cb6032a1f003348f4307cfe","modified":1712942298502},{"_id":"themes/butterfly/source/js/main.js","hash":"59cd756a94ecdf3ec7b18f50691a8a6305f7a65a","modified":1712942298667},{"_id":"themes/butterfly/source/js/utils.js","hash":"7b871fe0c4456660cff4c7b9cc4ed089adac2caf","modified":1712942298677},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5ed2d7ef240c927fe1b7a7fb5bf9e55e2bfd55a5","modified":1712942298500},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"d776c670e4076ad6049dbb64cdee7a734b51d37f","modified":1712942298676},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"b12895e0765d596494e5526d121de0dd5a7c23d3","modified":1712942298511},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"cdd992c8577d583c237b6aac9f5077d8200879b2","modified":1712942298509},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1712942298506},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b55f71347d2ead097c7f98c0ec792b091433345c","modified":1712942298513},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c74d6a9b8f71e69447f7847a5f5e81555d68b140","modified":1712942298515},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"17c0095bc8d612a268cdcab000b1742dc4c6f811","modified":1712942298518},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"164d5f1c2d1b4cb5a813a6fc574016743a53c019","modified":1712942298521},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ec77b3093f5de67e7032f40a5b12f1389f6f6ff","modified":1712942298525},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1712942298517},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1712942298523},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"c863d2732ce4bdc084f2d0db92f50f80328c1007","modified":1712942298528},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"b013dc0a3d57d2caa18b89263f23871da9ec456d","modified":1712942298530},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"5d08c3552f7d3c80a724ca628bff66321abe2e5a","modified":1712942298527},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"289f85847c58f0b2b7d98a68e370a2896edb8949","modified":1712942298531},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"35d54adc92e717cc32e13515122b025fd1a98ea2","modified":1712942298535},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"7c448886f230adb4f4a0208c88fff809abcb5637","modified":1712942298539},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"dc56e5182dd3813dc977c9bf8556dcc7615e467b","modified":1712942298537},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1712942298533},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"e611074a5a7f489a8b04afac0a3f7f882ce26532","modified":1712942298541},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1712942298288},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"39e1ca0a54eb5fd3688a78737417a1aaa50914c9","modified":1712942298291},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a7c929b90ae52b78b39b1728e3ab0e3db1cb7b9a","modified":1712942298297},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1712942298293},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1712942298290},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1712942298298},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"1bef867c799ba158c5417272fb137539951aa120","modified":1712942298304},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"766baca6ddce49d1724a02312387b292ff2d0bdc","modified":1712942298315},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1712942298295},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1712942298300},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1712942298319},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1712942298308},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1712942298317},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1712942298322},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1712942298306},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"cc99b2dc5c6b1f74391b0da609853ebc11de9610","modified":1712942298309},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"7a641b5dd45b970e1dafd1433eb32ea149e55cf2","modified":1712942298311},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1712942298327},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1712942298329},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1712942298332},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"90eb453b14f6b5c25bfd8d28aa67783603a1411d","modified":1712942298324},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"0abad416b1974a17e5be7817931d5fe799180170","modified":1712942298337},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e37681bc9c169d4220f26ecda2b3d5c02b6b9a0f","modified":1712942298331},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"912df10a053db3135968e92b6fd1a707ee94c968","modified":1712942298339},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1712942298399},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1712942298349},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"9b734d99963f3e7f562597dcf60485ccbf6e961c","modified":1712942298428},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1712942298426},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"dfb5e16a7e7106bb20b2ac2d0df1251d0fc79609","modified":1712942298445},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1712942298429},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1712942298448},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1712942298452},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1712942298450},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"ab037bf5794638bd30da4cf7cf106e5d03b5f696","modified":1712942298454},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1712942298458},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"8e22f53886a57a68286970d8af8b4c950fd4a1d7","modified":1712942298460},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1712942298461},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1712942298456},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"d48d77af1670bd568d784794408bf524a448bfcc","modified":1712942298463},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1712942298464},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1712942298466},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8df529f71e25f1c0a00e533de7944ed3d1ba7bd8","modified":1712942298470},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1712942298467},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1712942298468},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e920dae9ce00177922468db49240f5aca0af4f64","modified":1712942298546},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"41054740cfbd1357138785464f6859681ca58493","modified":1712942298550},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"0421da07907b3d98df64239e073b23fbb3f04149","modified":1712942298548},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1712942298566},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"aae70ddd126b2e40158e45036abecbfa33cbfbba","modified":1712942298570},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"964bda8acf4180a15c33e1d8447fc3140baa4c68","modified":1712942298579},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1712942298572},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1712942298575},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1712942298583},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1712942298581},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5e27f7842af82ff7498d4b59787ce9ca90fa9e6f","modified":1712942298577},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"7ae27854a737a02eca89b0b92db94cb298fef59e","modified":1712942298585},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"dbc855795a881f8c805bf5c9c5c4d5d542a648ec","modified":1712942298598},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1712942298587},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c0b11a1a5f52e3a6af4e312a8134c93eda18a7dd","modified":1712942298589},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"80ee9d0bfe5d38aac1f0cdcea5fc88b71d310041","modified":1712942298592},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"15ea7564b2e3bf46bc91fb6e49c94d057b37caaf","modified":1712942298594},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"0322237e762db401d7b4aa33168d0b9334a9ec26","modified":1712942298591},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"a22fd15048d21452f0015d0765d295d730203308","modified":1712942298601},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1712942298609},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1712942298606},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"df7a51fcabbadab5aa31770e3202a47c9599bbb7","modified":1712942298613},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1712942298616},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"a977cd8161ef4d6ddd5293e81403519076657430","modified":1712942298619},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1712942298611},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1712942298621},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"37db99299af380e9111dce2a78a5049b301b13e0","modified":1712942298624},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0b23010154e19f37f0c4af0110f9f834d6d41a13","modified":1712942298627},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"8a53d7ba5ca2f5eb4124b684e7845b648583f658","modified":1712942298628},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1712942298632},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"3e9355b76f87e2ee90f652855282b37ab5ae0b3e","modified":1712942298633},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1712942298635},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1712942298637},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a7c2fe73cc05ad3525909b86ad0ede1a9f2d3b48","modified":1712942298671},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1712942298643},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"ab3904451ae1d78903424b8b2ef815c8571e1749","modified":1712942298673},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1712942298647},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1712942298641},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"353b95f9a6c2c1e777d978118cb61f909ccbf89c","modified":1712942298645},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1712942298639},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1712942298651},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"8f95aca305b56ccd7c8c7367b03d26db816ebd5f","modified":1712942298346},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"58f37823f6cd9a194fb50f7ca7c2233e49939034","modified":1712942298347},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1712942298368},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1712942298364},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1712942298366},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1712942298367},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"799da8f3015e6fe440681b21644bcb3810a5518c","modified":1712942298370},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"6d40b521eec4136f6742c548a4445ed593470b1b","modified":1712942298372},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1712942298351},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1712942298352},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1712942298354},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1712942298355},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5373b822aa72ddb96f2f1f4baf6c058b40d705d6","modified":1712942298375},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1712942298357},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1712942298359},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"364d1fd655baca9132038ef1e312abde2c0bc7de","modified":1712942298377},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1712942298362},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"f78c9c20c86d58c7cf099f6f8d6097103d7d43e5","modified":1712942298378},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1712942298360},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"11f5dca1432e59f22955aaf4ac3e9de6b286d887","modified":1712942298380},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"1eab7ca1cb16c6786f9c3ca0efef8cc15e444ab4","modified":1712942298382},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c86c8fc1a28514a02a1f6a25ca9ec05eb3955b7","modified":1712942298383},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"7f450664e6323a076ae59c393b0f22167cfa82e5","modified":1712942298390},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"09c2ef4bc6d005f96dfa48b1d9af1ec095c5266d","modified":1712942298388},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1712942298387},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1712942298385},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b65a42167df5fb07e2a63f312a58c321d3112a90","modified":1712942298393},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"2e36fac4791e99844cd56676898be0dbf5eb4e99","modified":1712942298411},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"9942a903227350960c1d0716e59516ae79ac24a8","modified":1712942298392},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"4ed7c74087e81c6fcaf4fca7dced58b4e19f4cb1","modified":1712942298395},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"efb72547fc2d470a124f5636391128dc59627498","modified":1712942298397},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"d8898e427acd91ceb97d6a7ee3acb011ca86b9fc","modified":1712942298413},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"ecfff55b2c7f6d87ce4d5028fdf9f8c0bf155c73","modified":1712942298422},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"fc8814bd016d039874ec2fc24dcb78587892e2a6","modified":1712942298415},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"17520a86de12ae585289463c066d3ac91b78a2ff","modified":1712942298421},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1712942298417},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"a4e52188b6effeee1df2a01dcbf4105de76a61a8","modified":1712942298419},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"c682e4d61017fb0dd2e837bfcc242371f1a13364","modified":1712942298408},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1712942298402},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"0544d91c0bc9e26e0fe1b5ff490f4a8540ed1ee1","modified":1712942298425},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1712942298404},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1712942298407},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"420a86e73d0d748ac234fd00d06d9e433ca5e3f2","modified":1712942298436},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1712942298435},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1712942298432},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"52a06a2e039f44383085333cac69f3f4e7d0ad3a","modified":1712942298433},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1712942298554},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1712942298557},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1712942298439},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"c16ee69b5ca8db016db0508d014ae0867c4ce929","modified":1712942298442},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1712942298443},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1712942298560},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1712942298562},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"7c9cc43e1d2577f7151039d58e603c30860fd281","modified":1712942298564},{"_id":"public/archives/index.html","hash":"6b0ece6e3be88a01d7a0e2adf12cba482a7a4a2b","modified":1712942693787},{"_id":"public/archives/2023/index.html","hash":"42c28dbb85aebaa01bc1a79f5375dda2f1ee0a7e","modified":1712942693787},{"_id":"public/archives/2023/08/index.html","hash":"5cc3c2da996846aeeb590b537e686b1e84de04be","modified":1712942693787},{"_id":"public/archives/2024/index.html","hash":"23483ef2fd0476963bffbec0d5989256d966f8ad","modified":1712942693787},{"_id":"public/archives/2024/04/index.html","hash":"42f44e688061ba64289d62900b5dca4a3d4b9ac5","modified":1712942693787},{"_id":"public/categories/Java/index.html","hash":"47deddf62348da2a4793537ce8eec96e5ccd0b9a","modified":1712942693787},{"_id":"public/index.html","hash":"38c4a0fbea4958f9462180c9f405a560642ed4fb","modified":1712942693787},{"_id":"public/tags/并发/index.html","hash":"24e0380d150831ad7e1af4f813add58e392bc67a","modified":1712942693787},{"_id":"public/tags/Java/index.html","hash":"1ad262655d3c4a9750e897313d9d75d317db363c","modified":1712942693787},{"_id":"public/tags/CompletableFuture/index.html","hash":"20d03e677c527ac2e0ae4fc294ea85619c8287d8","modified":1712942693787},{"_id":"public/2024/04/13/hello-world/index.html","hash":"2d8925e2d3083307ad912ad96dc3de3998285cab","modified":1712942693787},{"_id":"public/2023/08/10/2023-08-10-CompletableFuture的使用/index.html","hash":"8c6ed987b8e6ad4bc4924d9ce4799c8b408f9784","modified":1712942693787},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1712942693787},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1712942693787},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1712942693787},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1712942693787},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1712942693787},{"_id":"public/css/index.css","hash":"deae12e17dee0ddfb95c9d2ef11a29baa5d56f3d","modified":1712942693787},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1712942693787},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1712942693787},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1712942693787},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1712942693787}],"Category":[{"name":"Java","_id":"cluwxuqr60002b8vdhaq10vh3"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2024-04-12T16:52:13.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2024-04-13 00:52:13\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2024-04-12T16:52:20.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluwxuqqm0000b8vd3b7p9j3g","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"CompletableFuture的使用","date":"2023-08-10T04:17:39.000Z","cover":"../img/posts/2023-08-14-自定义SpringBoot-Starter/cover.jpg","_content":"\n> CompletableFuture类提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法。\n\n# 总结\n\n<table>\n    <tr>\n        <th>分类</th>\n        <th>方法名</th>\n        <th>描述</th>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">创建异步任务</th>\n        <td><code>runAsync</code></td>\n        <td>不支持返回值</td>\n    </tr>\n    <tr>\n        <td><code>supplyAsync</code></td>\n        <td>支持返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"6\">创建异步任务</th>\n        <td><code>thenRun</code>、<code>thenRunAsync</code></td>\n        <td>不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAccept</code>、<code>thenAcceptAsync</code></td>\n        <td>接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenApply</code>、<code>thenApplyAsync</code></td>\n        <td>接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>exceptionally</code>、<code>exceptionallyAsync</code></td>\n        <td>接异常、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>whenComplete</code>、<code>whenCompleteAsync</code></td>\n        <td>接返回值和异常、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>handle</code>、<code>handleAsync</code></td>\n        <td>接返回值和异常、有返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"7\">两个任务组合</th>\n        <td><code>thenCompose</code>、<code>thenComposeAsync</code></td>\n        <td>任务转化</td>\n    </tr>\n    <tr>\n        <td><code>thenCombine</code>、<code>thenCombineAsync</code></td>\n        <td>“且”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAcceptBoth</code>、<code>thenAcceptBothAsync</code></td>\n        <td>“且”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterBoth</code>、<code>runAfterBothAsync</code></td>\n        <td>“且”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>applyToEither</code>、<code>applyToEitherAsync</code></td>\n        <td>“或”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>acceptEither</code>、<code>acceptEitherAsync</code></td>\n        <td>“或”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterEither</code>、<code>runAfterEitherAsync</code></td>\n        <td>“或”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">多个任务组合</th>\n        <td><code>anyOf</code></td>\n        <td>“任意一个”组合</td>\n    </tr>\n    <tr>\n        <td><code>allOf</code></td>\n        <td>“所有”组合</td>\n    </tr>\n</table>\n\n> 在CompletableFuture中如果使用没有指定线程池的方法，则会使用`ForkJoinPool.commonPool()`作为它的线程池执行异步代码。\n\n# 创建异步任务\n\n### 不支持返回值\n\n- 方法签名\n  ```java\n  // 使用默认线程池中的线程\n  public static CompletableFuture<Void> runAsync(Runnable runnable);\n  // 使用自定义线程池中的线程\n  public static CompletableFuture<Void> runAsync(Runnable runnable, Executor executor); \n  ```\n- 示例代码\n  ```java\n  CompletableFuture.runAsync(() -> {\n      // TODO 执行任务\n  });\n  ```\n\n### 支持返回值\n\n- 方法签名\n  ```java\n  // 使用默认线程池中的线程\n  public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier);\n  // 使用自定义线程池中的线程\n  public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier, Executor executor); \n  ```\n\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 执行任务\n      return null;\n  });\n    ```\n\n# 任务完成时回调方法\n\n当CompletableFuture任务执行完成或者抛出异常的时候，可以执行特定的回调方法。\n\n### 不接参数、无返回值\n\n> 前一个任务执行完成后执行；任务之间**无参数传递**，回调方法**无返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> thenRun(Runnable action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> thenRunAsync(Runnable action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> thenRunAsync(Runnable action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.runAsync(() -> {\n  }).thenRun(() -> {\n      // TODO 执行任务\n  });\n  ```\n\n### 接返回值、无返回值\n\n> 前一个任务执行完成后执行；前一个任务会将执行结果**作为参数**，传递到回调方法中，回调方法**无返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> thenAccept(Consumer<? super T> action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      return \"Result\";\n  }).thenAccept((result) -> {\n      // TODO 执行任务\n  });\n  ```\n\n### 接返回值、有返回值\n\n> 前一个任务执行完成后执行；前一个任务会将执行结果**作为参数**，传递到回调方法中，并且会调方法**有返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> thenApply(Function<? super T,? extends U> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      return \"Result_1\";\n  }).thenApply(() -> {\n      // TODO 执行任务\n      return \"Result_2\";\n  });\n  ```\n\n### 接异常、有返回值\n\n> 某个任务执行异常时执行；异常任务抛出的异常**作为参数**，传递到回调方法中，并且会调方法**有返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<T> exceptionally(Function<Throwable, ? extends T> fn);\n  // 使用默认线程池中的线程\n  public CompletableFuture<T> exceptionallyAsync(Function<Throwable, ? extends T> fn);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<T> exceptionallyAsync(Function<Throwable, ? extends T> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.runAsync(() -> {\n      throw new RuntimeException();\n  }).exceptionally((exception) -> {\n      // TODO 处理异常\n      return \"ERROR!\";\n  });\n  ```\n\n### 接返回值和异常、无返回值\n\n> 前一个任务执行完成或出现异常时执行；前一个任务会将结果或抛出的异常**作为参数**，传递到回调方法中，回调方法**无返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<T> whenComplete(BiConsumer<? super T, ? super Throwable> action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      throw new RuntimeException();\n  }).whenCompleteAsync((result, exception) -> {\n      if (exception != null) {\n          // TODO 处理异常\n      } else {\n          // TODO 执行任务\n      }\n  });\n  ```\n\n### 接返回值和异常、有返回值\n\n> 前一个任务执行完成后执行；前一个任务会将结果或抛出的异常**作为参数**，传递到回调方法中，回调方法**有返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> handle(BiFunction<? super T, Throwable, ? extends U> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      throw new RuntimeException();\n  }).handleAsync((result, exception) -> {\n      if (exception != null) {\n          // TODO 处理异常\n          return \"ERROR!\";\n      } else {\n          // 执行任务\n          return \"SUCCESS!\";\n      }\n  });\n  ```\n\n# 两个任务组合\n\n### 任务转化\n\n> 将前一个任务的执行结果**作为参数**进行处理，处理后**返回一个新的任务**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> thenCompose(Function<? super T, ? extends CompletionStage<U>> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture<String> task = CompletableFuture.supplyAsync(() -> {\n      return \"任务一的结果\";\n  });\n  \n  CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n      return \"任务二的结果\";\n  }).thenComposeAsync((result) -> {\n      // TODO 执行任务\n      return task;\n  });\n  ```\n\n### “且”组合、接返回值、有返回值\n\n> 将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法有返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U,V> CompletableFuture<V> thenCombine(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn);\n  // 使用默认线程池中的线程\n  public <U,V> CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn);\n  // 使用自定义线程池中的线程\n  public <U,V> CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).thenCombineAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result1, result2) -> {\n      // 任务一和任务二都完成时执行的回调方法\n      return null;\n  });\n  ```\n\n### “且”组合、接返回值、无返回值\n\n> 将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<Void> thenAcceptBoth(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).thenAcceptBothAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result1, result2) -> {\n      // TODO 任务一和任务二都完成时执行的回调方法\n  });\n  ```\n\n### “且”组合、不接参数、无返回值\n\n> 将两个任务组合，当两个任务都正常执行完了，执行回调方法，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> runAfterBoth(CompletionStage<?> other, Runnable action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).runAfterBothAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), () -> {\n      // TODO 任务一和任务二都完成时执行的回调方法\n  });\n  ```\n\n### “或”组合、接返回值、有返回值\n\n> 将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法有返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> applyToEither(CompletionStage<? extends T> other, Function<? super T, U> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T, U> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T, U> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).applyToEitherAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result) -> {\n      // TODO 任务一和任务二任意一个执行完成时执行的回调方法\n      return \"SUCCESS\";\n  });\n  ```\n\n### “或”组合、接返回值、无返回值\n\n> 将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> acceptEither(CompletionStage<? extends T> other, Consumer<? super T> action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      try {\n          Thread.sleep(10);\n      } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n      }\n      return \"任务一的结果\";\n  }).acceptEitherAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result) -> {\n      // TODO 任务一和任务二任意一个执行完成时执行的回调方法\n  });\n  ```\n\n### “或”组合、不接参数、无返回值\n\n> 将两个任务组合，其中任意一个任务执行完成，执行回调方法，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> runAfterEither(CompletionStage<?> other, Runnable action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> runAfterEitherAsync(CompletionStage<?> other, Runnable action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> runAfterEitherAsync(CompletionStage<?> other, Runnable action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      try {\n          Thread.sleep(10);\n      } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n      }\n      return \"任务一的结果\";\n  }).runAfterEitherAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), () -> {\n      // TODO 任务一和任务二任意一个执行完成时执行的回调方法\n  });\n  ```\n\n# 多个任务组合\n\n### “任意一个”组合\n\n> 将多个任务组合，其中任意一个任务执行完成即可拿到该任务的执行结果（执行结果为Object类型），或执行接下来的任务\n\n- 方法签名\n  ```java\n  public static CompletableFuture<Object> anyOf(CompletableFuture<?>... cfs);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture<String> task1 = CompletableFuture.supplyAsync(() -> {\n      return \"任务一的结果\";\n  });\n  \n  CompletableFuture<String> task2 = CompletableFuture.supplyAsync(() -> {\n      return \"任务二的结果\";\n  });\n  \n  Object result = CompletableFuture.anyOf(task1, task2).join();\n  ```\n\n### “所有”组合\n\n> 将多个任务组合，当所有任务都执行完成后执行接下来的任务\n\n- 方法签名\n  ```java\n  public static CompletableFuture<Void> allOf(CompletableFuture<?>... cfs);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture<String> task1 = CompletableFuture.supplyAsync(() -> {\n      return \"任务一的结果\";\n  });\n  \n  CompletableFuture<String> task2 = CompletableFuture.supplyAsync(() -> {\n      return \"任务二的结果\";\n  });\n  \n  Object join = CompletableFuture.allOf(task1, task2).join();\n  ```\n","source":"_posts/2023-08-10-CompletableFuture的使用.md","raw":"---\ntitle: CompletableFuture的使用\ndate: 2023-08-10 12:17:39\ncover: ../img/posts/2023-08-14-自定义SpringBoot-Starter/cover.jpg\ntags: [ Java,并发,CompletableFuture ]\ncategories:\n  - Java\n---\n\n> CompletableFuture类提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法。\n\n# 总结\n\n<table>\n    <tr>\n        <th>分类</th>\n        <th>方法名</th>\n        <th>描述</th>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">创建异步任务</th>\n        <td><code>runAsync</code></td>\n        <td>不支持返回值</td>\n    </tr>\n    <tr>\n        <td><code>supplyAsync</code></td>\n        <td>支持返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"6\">创建异步任务</th>\n        <td><code>thenRun</code>、<code>thenRunAsync</code></td>\n        <td>不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAccept</code>、<code>thenAcceptAsync</code></td>\n        <td>接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenApply</code>、<code>thenApplyAsync</code></td>\n        <td>接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>exceptionally</code>、<code>exceptionallyAsync</code></td>\n        <td>接异常、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>whenComplete</code>、<code>whenCompleteAsync</code></td>\n        <td>接返回值和异常、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>handle</code>、<code>handleAsync</code></td>\n        <td>接返回值和异常、有返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"7\">两个任务组合</th>\n        <td><code>thenCompose</code>、<code>thenComposeAsync</code></td>\n        <td>任务转化</td>\n    </tr>\n    <tr>\n        <td><code>thenCombine</code>、<code>thenCombineAsync</code></td>\n        <td>“且”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAcceptBoth</code>、<code>thenAcceptBothAsync</code></td>\n        <td>“且”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterBoth</code>、<code>runAfterBothAsync</code></td>\n        <td>“且”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>applyToEither</code>、<code>applyToEitherAsync</code></td>\n        <td>“或”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>acceptEither</code>、<code>acceptEitherAsync</code></td>\n        <td>“或”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterEither</code>、<code>runAfterEitherAsync</code></td>\n        <td>“或”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">多个任务组合</th>\n        <td><code>anyOf</code></td>\n        <td>“任意一个”组合</td>\n    </tr>\n    <tr>\n        <td><code>allOf</code></td>\n        <td>“所有”组合</td>\n    </tr>\n</table>\n\n> 在CompletableFuture中如果使用没有指定线程池的方法，则会使用`ForkJoinPool.commonPool()`作为它的线程池执行异步代码。\n\n# 创建异步任务\n\n### 不支持返回值\n\n- 方法签名\n  ```java\n  // 使用默认线程池中的线程\n  public static CompletableFuture<Void> runAsync(Runnable runnable);\n  // 使用自定义线程池中的线程\n  public static CompletableFuture<Void> runAsync(Runnable runnable, Executor executor); \n  ```\n- 示例代码\n  ```java\n  CompletableFuture.runAsync(() -> {\n      // TODO 执行任务\n  });\n  ```\n\n### 支持返回值\n\n- 方法签名\n  ```java\n  // 使用默认线程池中的线程\n  public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier);\n  // 使用自定义线程池中的线程\n  public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier, Executor executor); \n  ```\n\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 执行任务\n      return null;\n  });\n    ```\n\n# 任务完成时回调方法\n\n当CompletableFuture任务执行完成或者抛出异常的时候，可以执行特定的回调方法。\n\n### 不接参数、无返回值\n\n> 前一个任务执行完成后执行；任务之间**无参数传递**，回调方法**无返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> thenRun(Runnable action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> thenRunAsync(Runnable action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> thenRunAsync(Runnable action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.runAsync(() -> {\n  }).thenRun(() -> {\n      // TODO 执行任务\n  });\n  ```\n\n### 接返回值、无返回值\n\n> 前一个任务执行完成后执行；前一个任务会将执行结果**作为参数**，传递到回调方法中，回调方法**无返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> thenAccept(Consumer<? super T> action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      return \"Result\";\n  }).thenAccept((result) -> {\n      // TODO 执行任务\n  });\n  ```\n\n### 接返回值、有返回值\n\n> 前一个任务执行完成后执行；前一个任务会将执行结果**作为参数**，传递到回调方法中，并且会调方法**有返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> thenApply(Function<? super T,? extends U> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      return \"Result_1\";\n  }).thenApply(() -> {\n      // TODO 执行任务\n      return \"Result_2\";\n  });\n  ```\n\n### 接异常、有返回值\n\n> 某个任务执行异常时执行；异常任务抛出的异常**作为参数**，传递到回调方法中，并且会调方法**有返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<T> exceptionally(Function<Throwable, ? extends T> fn);\n  // 使用默认线程池中的线程\n  public CompletableFuture<T> exceptionallyAsync(Function<Throwable, ? extends T> fn);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<T> exceptionallyAsync(Function<Throwable, ? extends T> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.runAsync(() -> {\n      throw new RuntimeException();\n  }).exceptionally((exception) -> {\n      // TODO 处理异常\n      return \"ERROR!\";\n  });\n  ```\n\n### 接返回值和异常、无返回值\n\n> 前一个任务执行完成或出现异常时执行；前一个任务会将结果或抛出的异常**作为参数**，传递到回调方法中，回调方法**无返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<T> whenComplete(BiConsumer<? super T, ? super Throwable> action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      throw new RuntimeException();\n  }).whenCompleteAsync((result, exception) -> {\n      if (exception != null) {\n          // TODO 处理异常\n      } else {\n          // TODO 执行任务\n      }\n  });\n  ```\n\n### 接返回值和异常、有返回值\n\n> 前一个任务执行完成后执行；前一个任务会将结果或抛出的异常**作为参数**，传递到回调方法中，回调方法**有返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> handle(BiFunction<? super T, Throwable, ? extends U> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      throw new RuntimeException();\n  }).handleAsync((result, exception) -> {\n      if (exception != null) {\n          // TODO 处理异常\n          return \"ERROR!\";\n      } else {\n          // 执行任务\n          return \"SUCCESS!\";\n      }\n  });\n  ```\n\n# 两个任务组合\n\n### 任务转化\n\n> 将前一个任务的执行结果**作为参数**进行处理，处理后**返回一个新的任务**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> thenCompose(Function<? super T, ? extends CompletionStage<U>> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture<String> task = CompletableFuture.supplyAsync(() -> {\n      return \"任务一的结果\";\n  });\n  \n  CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n      return \"任务二的结果\";\n  }).thenComposeAsync((result) -> {\n      // TODO 执行任务\n      return task;\n  });\n  ```\n\n### “且”组合、接返回值、有返回值\n\n> 将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法有返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U,V> CompletableFuture<V> thenCombine(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn);\n  // 使用默认线程池中的线程\n  public <U,V> CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn);\n  // 使用自定义线程池中的线程\n  public <U,V> CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).thenCombineAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result1, result2) -> {\n      // 任务一和任务二都完成时执行的回调方法\n      return null;\n  });\n  ```\n\n### “且”组合、接返回值、无返回值\n\n> 将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<Void> thenAcceptBoth(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).thenAcceptBothAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result1, result2) -> {\n      // TODO 任务一和任务二都完成时执行的回调方法\n  });\n  ```\n\n### “且”组合、不接参数、无返回值\n\n> 将两个任务组合，当两个任务都正常执行完了，执行回调方法，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> runAfterBoth(CompletionStage<?> other, Runnable action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).runAfterBothAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), () -> {\n      // TODO 任务一和任务二都完成时执行的回调方法\n  });\n  ```\n\n### “或”组合、接返回值、有返回值\n\n> 将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法有返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> applyToEither(CompletionStage<? extends T> other, Function<? super T, U> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T, U> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T, U> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).applyToEitherAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result) -> {\n      // TODO 任务一和任务二任意一个执行完成时执行的回调方法\n      return \"SUCCESS\";\n  });\n  ```\n\n### “或”组合、接返回值、无返回值\n\n> 将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> acceptEither(CompletionStage<? extends T> other, Consumer<? super T> action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      try {\n          Thread.sleep(10);\n      } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n      }\n      return \"任务一的结果\";\n  }).acceptEitherAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result) -> {\n      // TODO 任务一和任务二任意一个执行完成时执行的回调方法\n  });\n  ```\n\n### “或”组合、不接参数、无返回值\n\n> 将两个任务组合，其中任意一个任务执行完成，执行回调方法，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> runAfterEither(CompletionStage<?> other, Runnable action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> runAfterEitherAsync(CompletionStage<?> other, Runnable action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> runAfterEitherAsync(CompletionStage<?> other, Runnable action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      try {\n          Thread.sleep(10);\n      } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n      }\n      return \"任务一的结果\";\n  }).runAfterEitherAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), () -> {\n      // TODO 任务一和任务二任意一个执行完成时执行的回调方法\n  });\n  ```\n\n# 多个任务组合\n\n### “任意一个”组合\n\n> 将多个任务组合，其中任意一个任务执行完成即可拿到该任务的执行结果（执行结果为Object类型），或执行接下来的任务\n\n- 方法签名\n  ```java\n  public static CompletableFuture<Object> anyOf(CompletableFuture<?>... cfs);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture<String> task1 = CompletableFuture.supplyAsync(() -> {\n      return \"任务一的结果\";\n  });\n  \n  CompletableFuture<String> task2 = CompletableFuture.supplyAsync(() -> {\n      return \"任务二的结果\";\n  });\n  \n  Object result = CompletableFuture.anyOf(task1, task2).join();\n  ```\n\n### “所有”组合\n\n> 将多个任务组合，当所有任务都执行完成后执行接下来的任务\n\n- 方法签名\n  ```java\n  public static CompletableFuture<Void> allOf(CompletableFuture<?>... cfs);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture<String> task1 = CompletableFuture.supplyAsync(() -> {\n      return \"任务一的结果\";\n  });\n  \n  CompletableFuture<String> task2 = CompletableFuture.supplyAsync(() -> {\n      return \"任务二的结果\";\n  });\n  \n  Object join = CompletableFuture.allOf(task1, task2).join();\n  ```\n","slug":"2023-08-10-CompletableFuture的使用","published":1,"updated":"2024-04-12T16:58:13.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluwxuqr00001b8vdck0ka4c6","content":"<blockquote>\n<p>CompletableFuture类提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法。</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><table>\n    <tr>\n        <th>分类</th>\n        <th>方法名</th>\n        <th>描述</th>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">创建异步任务</th>\n        <td><code>runAsync</code></td>\n        <td>不支持返回值</td>\n    </tr>\n    <tr>\n        <td><code>supplyAsync</code></td>\n        <td>支持返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"6\">创建异步任务</th>\n        <td><code>thenRun</code>、<code>thenRunAsync</code></td>\n        <td>不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAccept</code>、<code>thenAcceptAsync</code></td>\n        <td>接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenApply</code>、<code>thenApplyAsync</code></td>\n        <td>接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>exceptionally</code>、<code>exceptionallyAsync</code></td>\n        <td>接异常、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>whenComplete</code>、<code>whenCompleteAsync</code></td>\n        <td>接返回值和异常、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>handle</code>、<code>handleAsync</code></td>\n        <td>接返回值和异常、有返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"7\">两个任务组合</th>\n        <td><code>thenCompose</code>、<code>thenComposeAsync</code></td>\n        <td>任务转化</td>\n    </tr>\n    <tr>\n        <td><code>thenCombine</code>、<code>thenCombineAsync</code></td>\n        <td>“且”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAcceptBoth</code>、<code>thenAcceptBothAsync</code></td>\n        <td>“且”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterBoth</code>、<code>runAfterBothAsync</code></td>\n        <td>“且”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>applyToEither</code>、<code>applyToEitherAsync</code></td>\n        <td>“或”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>acceptEither</code>、<code>acceptEitherAsync</code></td>\n        <td>“或”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterEither</code>、<code>runAfterEitherAsync</code></td>\n        <td>“或”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">多个任务组合</th>\n        <td><code>anyOf</code></td>\n        <td>“任意一个”组合</td>\n    </tr>\n    <tr>\n        <td><code>allOf</code></td>\n        <td>“所有”组合</td>\n    </tr>\n</table>\n\n<blockquote>\n<p>在CompletableFuture中如果使用没有指定线程池的方法，则会使用<code>ForkJoinPool.commonPool()</code>作为它的线程池执行异步代码。</p>\n</blockquote>\n<h1 id=\"创建异步任务\"><a href=\"#创建异步任务\" class=\"headerlink\" title=\"创建异步任务\"></a>创建异步任务</h1><h3 id=\"不支持返回值\"><a href=\"#不支持返回值\" class=\"headerlink\" title=\"不支持返回值\"></a>不支持返回值</h3><ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAsync</span><span class=\"params\">(Runnable runnable)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAsync</span><span class=\"params\">(Runnable runnable, Executor executor)</span>; </span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"支持返回值\"><a href=\"#支持返回值\" class=\"headerlink\" title=\"支持返回值\"></a>支持返回值</h3><ul>\n<li><p>方法签名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">supplyAsync</span><span class=\"params\">(Supplier&lt;U&gt; supplier)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">supplyAsync</span><span class=\"params\">(Supplier&lt;U&gt; supplier, Executor executor)</span>; </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"任务完成时回调方法\"><a href=\"#任务完成时回调方法\" class=\"headerlink\" title=\"任务完成时回调方法\"></a>任务完成时回调方法</h1><p>当CompletableFuture任务执行完成或者抛出异常的时候，可以执行特定的回调方法。</p>\n<h3 id=\"不接参数、无返回值\"><a href=\"#不接参数、无返回值\" class=\"headerlink\" title=\"不接参数、无返回值\"></a>不接参数、无返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；任务之间<strong>无参数传递</strong>，回调方法<strong>无返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenRun</span><span class=\"params\">(Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenRunAsync</span><span class=\"params\">(Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenRunAsync</span><span class=\"params\">(Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">&#125;).thenRun(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值、无返回值\"><a href=\"#接返回值、无返回值\" class=\"headerlink\" title=\"接返回值、无返回值\"></a>接返回值、无返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；前一个任务会将执行结果<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>无返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAccept</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptAsync</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptAsync</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Result&quot;</span>;</span><br><span class=\"line\">&#125;).thenAccept((result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值、有返回值\"><a href=\"#接返回值、有返回值\" class=\"headerlink\" title=\"接返回值、有返回值\"></a>接返回值、有返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；前一个任务会将执行结果<strong>作为参数</strong>，传递到回调方法中，并且会调方法<strong>有返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenApply</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T,? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenApplyAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T,? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenApplyAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T,? extends U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Result_1&quot;</span>;</span><br><span class=\"line\">&#125;).thenApply(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Result_2&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接异常、有返回值\"><a href=\"#接异常、有返回值\" class=\"headerlink\" title=\"接异常、有返回值\"></a>接异常、有返回值</h3><blockquote>\n<p>某个任务执行异常时执行；异常任务抛出的异常<strong>作为参数</strong>，传递到回调方法中，并且会调方法<strong>有返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">exceptionally</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">exceptionallyAsync</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">exceptionallyAsync</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;).exceptionally((exception) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;ERROR!&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值和异常、无返回值\"><a href=\"#接返回值和异常、无返回值\" class=\"headerlink\" title=\"接返回值和异常、无返回值\"></a>接返回值和异常、无返回值</h3><blockquote>\n<p>前一个任务执行完成或出现异常时执行；前一个任务会将结果或抛出的异常<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>无返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">whenComplete</span><span class=\"params\">(BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> Throwable&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">whenCompleteAsync</span><span class=\"params\">(BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> Throwable&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">whenCompleteAsync</span><span class=\"params\">(BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> Throwable&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;).whenCompleteAsync((result, exception) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值和异常、有返回值\"><a href=\"#接返回值和异常、有返回值\" class=\"headerlink\" title=\"接返回值和异常、有返回值\"></a>接返回值和异常、有返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；前一个任务会将结果或抛出的异常<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>有返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">handle</span><span class=\"params\">(BiFunction&lt;? <span class=\"built_in\">super</span> T, Throwable, ? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">handleAsync</span><span class=\"params\">(BiFunction&lt;? <span class=\"built_in\">super</span> T, Throwable, ? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">handleAsync</span><span class=\"params\">(BiFunction&lt;? <span class=\"built_in\">super</span> T, Throwable, ? extends U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;).handleAsync((result, exception) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;ERROR!&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行任务</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;SUCCESS!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"两个任务组合\"><a href=\"#两个任务组合\" class=\"headerlink\" title=\"两个任务组合\"></a>两个任务组合</h1><h3 id=\"任务转化\"><a href=\"#任务转化\" class=\"headerlink\" title=\"任务转化\"></a>任务转化</h3><blockquote>\n<p>将前一个任务的执行结果<strong>作为参数</strong>进行处理，处理后<strong>返回一个新的任务</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenCompose</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenComposeAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenComposeAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; task = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;).thenComposeAsync((result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> task;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“且”组合、接返回值、有返回值\"><a href=\"#“且”组合、接返回值、有返回值\" class=\"headerlink\" title=\"“且”组合、接返回值、有返回值\"></a>“且”组合、接返回值、有返回值</h3><blockquote>\n<p>将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法有返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class=\"title function_\">thenCombine</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"built_in\">super</span> T,? <span class=\"built_in\">super</span> U,? extends V&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class=\"title function_\">thenCombineAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"built_in\">super</span> T,? <span class=\"built_in\">super</span> U,? extends V&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class=\"title function_\">thenCombineAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"built_in\">super</span> T,? <span class=\"built_in\">super</span> U,? extends V&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).thenCombineAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result1, result2) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 任务一和任务二都完成时执行的回调方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“且”组合、接返回值、无返回值\"><a href=\"#“且”组合、接返回值、无返回值\" class=\"headerlink\" title=\"“且”组合、接返回值、无返回值\"></a>“且”组合、接返回值、无返回值</h3><blockquote>\n<p>将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptBoth</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> U&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptBothAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> U&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptBothAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> U&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).thenAcceptBothAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result1, result2) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二都完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“且”组合、不接参数、无返回值\"><a href=\"#“且”组合、不接参数、无返回值\" class=\"headerlink\" title=\"“且”组合、不接参数、无返回值\"></a>“且”组合、不接参数、无返回值</h3><blockquote>\n<p>将两个任务组合，当两个任务都正常执行完了，执行回调方法，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterBoth</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterBothAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterBothAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).runAfterBothAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), () -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二都完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“或”组合、接返回值、有返回值\"><a href=\"#“或”组合、接返回值、有返回值\" class=\"headerlink\" title=\"“或”组合、接返回值、有返回值\"></a>“或”组合、接返回值、有返回值</h3><blockquote>\n<p>将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法有返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">applyToEither</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"built_in\">super</span> T, U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">applyToEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"built_in\">super</span> T, U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">applyToEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"built_in\">super</span> T, U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).applyToEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;SUCCESS&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“或”组合、接返回值、无返回值\"><a href=\"#“或”组合、接返回值、无返回值\" class=\"headerlink\" title=\"“或”组合、接返回值、无返回值\"></a>“或”组合、接返回值、无返回值</h3><blockquote>\n<p>将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">acceptEither</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">acceptEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">acceptEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).acceptEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“或”组合、不接参数、无返回值\"><a href=\"#“或”组合、不接参数、无返回值\" class=\"headerlink\" title=\"“或”组合、不接参数、无返回值\"></a>“或”组合、不接参数、无返回值</h3><blockquote>\n<p>将两个任务组合，其中任意一个任务执行完成，执行回调方法，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterEither</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterEitherAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterEitherAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).runAfterEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), () -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"多个任务组合\"><a href=\"#多个任务组合\" class=\"headerlink\" title=\"多个任务组合\"></a>多个任务组合</h1><h3 id=\"“任意一个”组合\"><a href=\"#“任意一个”组合\" class=\"headerlink\" title=\"“任意一个”组合\"></a>“任意一个”组合</h3><blockquote>\n<p>将多个任务组合，其中任意一个任务执行完成即可拿到该任务的执行结果（执行结果为Object类型），或执行接下来的任务</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Object&gt; <span class=\"title function_\">anyOf</span><span class=\"params\">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; task1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture&lt;String&gt; task2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> CompletableFuture.anyOf(task1, task2).join();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“所有”组合\"><a href=\"#“所有”组合\" class=\"headerlink\" title=\"“所有”组合\"></a>“所有”组合</h3><blockquote>\n<p>将多个任务组合，当所有任务都执行完成后执行接下来的任务</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">allOf</span><span class=\"params\">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; task1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture&lt;String&gt; task2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">join</span> <span class=\"operator\">=</span> CompletableFuture.allOf(task1, task2).join();</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>CompletableFuture类提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法。</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><table>\n    <tr>\n        <th>分类</th>\n        <th>方法名</th>\n        <th>描述</th>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">创建异步任务</th>\n        <td><code>runAsync</code></td>\n        <td>不支持返回值</td>\n    </tr>\n    <tr>\n        <td><code>supplyAsync</code></td>\n        <td>支持返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"6\">创建异步任务</th>\n        <td><code>thenRun</code>、<code>thenRunAsync</code></td>\n        <td>不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAccept</code>、<code>thenAcceptAsync</code></td>\n        <td>接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenApply</code>、<code>thenApplyAsync</code></td>\n        <td>接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>exceptionally</code>、<code>exceptionallyAsync</code></td>\n        <td>接异常、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>whenComplete</code>、<code>whenCompleteAsync</code></td>\n        <td>接返回值和异常、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>handle</code>、<code>handleAsync</code></td>\n        <td>接返回值和异常、有返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"7\">两个任务组合</th>\n        <td><code>thenCompose</code>、<code>thenComposeAsync</code></td>\n        <td>任务转化</td>\n    </tr>\n    <tr>\n        <td><code>thenCombine</code>、<code>thenCombineAsync</code></td>\n        <td>“且”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAcceptBoth</code>、<code>thenAcceptBothAsync</code></td>\n        <td>“且”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterBoth</code>、<code>runAfterBothAsync</code></td>\n        <td>“且”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>applyToEither</code>、<code>applyToEitherAsync</code></td>\n        <td>“或”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>acceptEither</code>、<code>acceptEitherAsync</code></td>\n        <td>“或”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterEither</code>、<code>runAfterEitherAsync</code></td>\n        <td>“或”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">多个任务组合</th>\n        <td><code>anyOf</code></td>\n        <td>“任意一个”组合</td>\n    </tr>\n    <tr>\n        <td><code>allOf</code></td>\n        <td>“所有”组合</td>\n    </tr>\n</table>\n\n<blockquote>\n<p>在CompletableFuture中如果使用没有指定线程池的方法，则会使用<code>ForkJoinPool.commonPool()</code>作为它的线程池执行异步代码。</p>\n</blockquote>\n<h1 id=\"创建异步任务\"><a href=\"#创建异步任务\" class=\"headerlink\" title=\"创建异步任务\"></a>创建异步任务</h1><h3 id=\"不支持返回值\"><a href=\"#不支持返回值\" class=\"headerlink\" title=\"不支持返回值\"></a>不支持返回值</h3><ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAsync</span><span class=\"params\">(Runnable runnable)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAsync</span><span class=\"params\">(Runnable runnable, Executor executor)</span>; </span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"支持返回值\"><a href=\"#支持返回值\" class=\"headerlink\" title=\"支持返回值\"></a>支持返回值</h3><ul>\n<li><p>方法签名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">supplyAsync</span><span class=\"params\">(Supplier&lt;U&gt; supplier)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">supplyAsync</span><span class=\"params\">(Supplier&lt;U&gt; supplier, Executor executor)</span>; </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"任务完成时回调方法\"><a href=\"#任务完成时回调方法\" class=\"headerlink\" title=\"任务完成时回调方法\"></a>任务完成时回调方法</h1><p>当CompletableFuture任务执行完成或者抛出异常的时候，可以执行特定的回调方法。</p>\n<h3 id=\"不接参数、无返回值\"><a href=\"#不接参数、无返回值\" class=\"headerlink\" title=\"不接参数、无返回值\"></a>不接参数、无返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；任务之间<strong>无参数传递</strong>，回调方法<strong>无返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenRun</span><span class=\"params\">(Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenRunAsync</span><span class=\"params\">(Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenRunAsync</span><span class=\"params\">(Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">&#125;).thenRun(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值、无返回值\"><a href=\"#接返回值、无返回值\" class=\"headerlink\" title=\"接返回值、无返回值\"></a>接返回值、无返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；前一个任务会将执行结果<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>无返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAccept</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptAsync</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptAsync</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Result&quot;</span>;</span><br><span class=\"line\">&#125;).thenAccept((result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值、有返回值\"><a href=\"#接返回值、有返回值\" class=\"headerlink\" title=\"接返回值、有返回值\"></a>接返回值、有返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；前一个任务会将执行结果<strong>作为参数</strong>，传递到回调方法中，并且会调方法<strong>有返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenApply</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T,? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenApplyAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T,? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenApplyAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T,? extends U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Result_1&quot;</span>;</span><br><span class=\"line\">&#125;).thenApply(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Result_2&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接异常、有返回值\"><a href=\"#接异常、有返回值\" class=\"headerlink\" title=\"接异常、有返回值\"></a>接异常、有返回值</h3><blockquote>\n<p>某个任务执行异常时执行；异常任务抛出的异常<strong>作为参数</strong>，传递到回调方法中，并且会调方法<strong>有返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">exceptionally</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">exceptionallyAsync</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">exceptionallyAsync</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;).exceptionally((exception) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;ERROR!&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值和异常、无返回值\"><a href=\"#接返回值和异常、无返回值\" class=\"headerlink\" title=\"接返回值和异常、无返回值\"></a>接返回值和异常、无返回值</h3><blockquote>\n<p>前一个任务执行完成或出现异常时执行；前一个任务会将结果或抛出的异常<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>无返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">whenComplete</span><span class=\"params\">(BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> Throwable&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">whenCompleteAsync</span><span class=\"params\">(BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> Throwable&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">whenCompleteAsync</span><span class=\"params\">(BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> Throwable&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;).whenCompleteAsync((result, exception) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值和异常、有返回值\"><a href=\"#接返回值和异常、有返回值\" class=\"headerlink\" title=\"接返回值和异常、有返回值\"></a>接返回值和异常、有返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；前一个任务会将结果或抛出的异常<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>有返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">handle</span><span class=\"params\">(BiFunction&lt;? <span class=\"built_in\">super</span> T, Throwable, ? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">handleAsync</span><span class=\"params\">(BiFunction&lt;? <span class=\"built_in\">super</span> T, Throwable, ? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">handleAsync</span><span class=\"params\">(BiFunction&lt;? <span class=\"built_in\">super</span> T, Throwable, ? extends U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;).handleAsync((result, exception) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;ERROR!&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行任务</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;SUCCESS!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"两个任务组合\"><a href=\"#两个任务组合\" class=\"headerlink\" title=\"两个任务组合\"></a>两个任务组合</h1><h3 id=\"任务转化\"><a href=\"#任务转化\" class=\"headerlink\" title=\"任务转化\"></a>任务转化</h3><blockquote>\n<p>将前一个任务的执行结果<strong>作为参数</strong>进行处理，处理后<strong>返回一个新的任务</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenCompose</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenComposeAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenComposeAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; task = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;).thenComposeAsync((result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> task;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“且”组合、接返回值、有返回值\"><a href=\"#“且”组合、接返回值、有返回值\" class=\"headerlink\" title=\"“且”组合、接返回值、有返回值\"></a>“且”组合、接返回值、有返回值</h3><blockquote>\n<p>将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法有返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class=\"title function_\">thenCombine</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"built_in\">super</span> T,? <span class=\"built_in\">super</span> U,? extends V&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class=\"title function_\">thenCombineAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"built_in\">super</span> T,? <span class=\"built_in\">super</span> U,? extends V&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class=\"title function_\">thenCombineAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"built_in\">super</span> T,? <span class=\"built_in\">super</span> U,? extends V&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).thenCombineAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result1, result2) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 任务一和任务二都完成时执行的回调方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“且”组合、接返回值、无返回值\"><a href=\"#“且”组合、接返回值、无返回值\" class=\"headerlink\" title=\"“且”组合、接返回值、无返回值\"></a>“且”组合、接返回值、无返回值</h3><blockquote>\n<p>将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptBoth</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> U&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptBothAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> U&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptBothAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> U&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).thenAcceptBothAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result1, result2) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二都完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“且”组合、不接参数、无返回值\"><a href=\"#“且”组合、不接参数、无返回值\" class=\"headerlink\" title=\"“且”组合、不接参数、无返回值\"></a>“且”组合、不接参数、无返回值</h3><blockquote>\n<p>将两个任务组合，当两个任务都正常执行完了，执行回调方法，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterBoth</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterBothAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterBothAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).runAfterBothAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), () -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二都完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“或”组合、接返回值、有返回值\"><a href=\"#“或”组合、接返回值、有返回值\" class=\"headerlink\" title=\"“或”组合、接返回值、有返回值\"></a>“或”组合、接返回值、有返回值</h3><blockquote>\n<p>将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法有返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">applyToEither</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"built_in\">super</span> T, U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">applyToEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"built_in\">super</span> T, U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">applyToEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"built_in\">super</span> T, U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).applyToEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;SUCCESS&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“或”组合、接返回值、无返回值\"><a href=\"#“或”组合、接返回值、无返回值\" class=\"headerlink\" title=\"“或”组合、接返回值、无返回值\"></a>“或”组合、接返回值、无返回值</h3><blockquote>\n<p>将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">acceptEither</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">acceptEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">acceptEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).acceptEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“或”组合、不接参数、无返回值\"><a href=\"#“或”组合、不接参数、无返回值\" class=\"headerlink\" title=\"“或”组合、不接参数、无返回值\"></a>“或”组合、不接参数、无返回值</h3><blockquote>\n<p>将两个任务组合，其中任意一个任务执行完成，执行回调方法，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterEither</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterEitherAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterEitherAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).runAfterEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), () -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"多个任务组合\"><a href=\"#多个任务组合\" class=\"headerlink\" title=\"多个任务组合\"></a>多个任务组合</h1><h3 id=\"“任意一个”组合\"><a href=\"#“任意一个”组合\" class=\"headerlink\" title=\"“任意一个”组合\"></a>“任意一个”组合</h3><blockquote>\n<p>将多个任务组合，其中任意一个任务执行完成即可拿到该任务的执行结果（执行结果为Object类型），或执行接下来的任务</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Object&gt; <span class=\"title function_\">anyOf</span><span class=\"params\">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; task1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture&lt;String&gt; task2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> CompletableFuture.anyOf(task1, task2).join();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“所有”组合\"><a href=\"#“所有”组合\" class=\"headerlink\" title=\"“所有”组合\"></a>“所有”组合</h3><blockquote>\n<p>将多个任务组合，当所有任务都执行完成后执行接下来的任务</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">allOf</span><span class=\"params\">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; task1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture&lt;String&gt; task2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">join</span> <span class=\"operator\">=</span> CompletableFuture.allOf(task1, task2).join();</span><br></pre></td></tr></table></figure></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cluwxuqr00001b8vdck0ka4c6","category_id":"cluwxuqr60002b8vdhaq10vh3","_id":"cluwxuqrc0005b8vd0oaq0ifg"}],"PostTag":[{"post_id":"cluwxuqr00001b8vdck0ka4c6","tag_id":"cluwxuqr90003b8vd3p3fgz6t","_id":"cluwxuqre0007b8vdabpm4tk2"},{"post_id":"cluwxuqr00001b8vdck0ka4c6","tag_id":"cluwxuqra0004b8vd7knff9x6","_id":"cluwxuqre0008b8vdeufh1ial"},{"post_id":"cluwxuqr00001b8vdck0ka4c6","tag_id":"cluwxuqrc0006b8vd4vmt9bwj","_id":"cluwxuqre0009b8vd99u1efd2"}],"Tag":[{"name":"Java","_id":"cluwxuqr90003b8vd3p3fgz6t"},{"name":"并发","_id":"cluwxuqra0004b8vd7knff9x6"},{"name":"CompletableFuture","_id":"cluwxuqrc0006b8vd4vmt9bwj"}]}}