{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"source/img/minio/minio.svg","path":"img/minio/minio.svg","modified":1,"renderable":0},{"_id":"source/img/home/Alisinngai Lynn Home page image.jpg","path":"img/home/Alisinngai Lynn Home page image.jpg","modified":1,"renderable":0},{"_id":"source/img/home/homePageImage_01.webp","path":"img/home/homePageImage_01.webp","modified":1,"renderable":0},{"_id":"source/img/Java/Thread/Thread.svg","path":"img/Java/Thread/Thread.svg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/2021-04-14-Java8新特性.md","hash":"f279b63a22e592a59a26b17b3158edb1174fa876","modified":1713105183956},{"_id":"source/_posts/2023-08-10-CompletableFuture的使用.md","hash":"e6370ffcdc7d67a62f192529507ddcd38d8981d0","modified":1713018352438},{"_id":"source/_posts/2024-04-13-单节点单硬盘部署MinIO.md","hash":"5da5218b50729ff2a3eb761386921c20af52e873","modified":1713018448772},{"_id":"source/_posts/2024-04-21-设计模式-01.设计思想.md","hash":"c464b9523afc22f49804f64e2a0f9b702615ec72","modified":1713713019298},{"_id":"source/img/minio/minio.svg","hash":"283133390bffe6ded2a4ca732b6b1f259270e7c6","modified":1713018435644},{"_id":"source/img/home/homePageImage_01.webp","hash":"f384889a2089e35f5989d2857a96a1cb7c79decf","modified":1713022157558},{"_id":"source/img/Java/Thread/Thread.svg","hash":"2d6bd166c0c268a795256d212dc0bfce6f93004a","modified":1713018282072},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1712942298256},{"_id":"themes/butterfly/README_CN.md","hash":"9d729ee2ffc5e5f703ccfbfbbb7b286d59071125","modified":1712942298260},{"_id":"themes/butterfly/README.md","hash":"20a91bea7f7ada8b8195d2abff106a7ce21bba20","modified":1712942298259},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"3b572099a992e30267f5fe4cd3c582ff7ac9f083","modified":1712942298241},{"_id":"themes/butterfly/plugins.yml","hash":"7bb2c7350c0c57850aa30213cd0f26553a614702","modified":1712942298481},{"_id":"themes/butterfly/_config.yml","hash":"c6fab3700a6502b5790ca20d20113020544ea048","modified":1712942298263},{"_id":"themes/butterfly/package.json","hash":"2b6fb6f62b9fa6a829311ffd532ae760fbd0a7db","modified":1712942298479},{"_id":"themes/butterfly/languages/default.yml","hash":"90e9e2f36dc51aa77eb7804ae048b4876035b12d","modified":1712942298266},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"2dcc70a011b37890215ae0fd6d8f8c78aa8af6b0","modified":1712942298270},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1712942298276},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1712942298277},{"_id":"themes/butterfly/languages/en.yml","hash":"68127be0e6b44cfc5f31353d8b275c02939b3ff9","modified":1712942298268},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"1392e7b8c678cdfb54f55523693e66abc7d80538","modified":1712942298272},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1712942298474},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1712942298472},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1712942298476},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1712942298478},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1712942298252},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"eed9190301095b35081aa2658204cc3f15b9f5e1","modified":1712942298245},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1712942298254},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1712942298280},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1712942298247},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1712942298249},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1712942298283},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"50eea5aa78cdeb6c72dd22f0aeabc407cc0f712e","modified":1712942298281},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ea8d4e8ac6af93cd268ba8f6ffcb80417bc2501e","modified":1712942298285},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"96df62e34661d8ca4a45267286127479e5178a79","modified":1712942298313},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1712942298334},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1712942298485},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1712942298487},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1712942298489},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"f448bf73103b88de4443e52d600e871cf3de3e32","modified":1712942298340},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1712942298491},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9277fead4c29dbe93976f078adaa26e8f9253da3","modified":1712942298342},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"0a336dfe5ed08952fa0df1532421df38a74a20d6","modified":1712942298495},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"b1dfc3c898b886eab1241b068fc27d7a26a3b7d2","modified":1712942298493},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1712942298497},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"cdd992c8577d583c237b6aac9f5077d8200879b2","modified":1712942298509},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1712942298506},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"b12895e0765d596494e5526d121de0dd5a7c23d3","modified":1712942298511},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"0df22d7dbfa766a65cb6032a1f003348f4307cfe","modified":1712942298502},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b55f71347d2ead097c7f98c0ec792b091433345c","modified":1712942298513},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5ed2d7ef240c927fe1b7a7fb5bf9e55e2bfd55a5","modified":1712942298500},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c74d6a9b8f71e69447f7847a5f5e81555d68b140","modified":1712942298515},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1712942298517},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"164d5f1c2d1b4cb5a813a6fc574016743a53c019","modified":1712942298521},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"17c0095bc8d612a268cdcab000b1742dc4c6f811","modified":1712942298518},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1712942298523},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ec77b3093f5de67e7032f40a5b12f1389f6f6ff","modified":1712942298525},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"b013dc0a3d57d2caa18b89263f23871da9ec456d","modified":1712942298530},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"5d08c3552f7d3c80a724ca628bff66321abe2e5a","modified":1712942298527},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"c863d2732ce4bdc084f2d0db92f50f80328c1007","modified":1712942298528},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"289f85847c58f0b2b7d98a68e370a2896edb8949","modified":1712942298531},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1712942298533},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"dc56e5182dd3813dc977c9bf8556dcc7615e467b","modified":1712942298537},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"35d54adc92e717cc32e13515122b025fd1a98ea2","modified":1712942298535},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"7c448886f230adb4f4a0208c88fff809abcb5637","modified":1712942298539},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"e611074a5a7f489a8b04afac0a3f7f882ce26532","modified":1712942298541},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1712942298658},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1712942298653},{"_id":"themes/butterfly/source/js/main.js","hash":"59cd756a94ecdf3ec7b18f50691a8a6305f7a65a","modified":1712942298667},{"_id":"themes/butterfly/source/css/var.styl","hash":"950250f66faeb611a67540e0fa6cedbcf5a7a321","modified":1712942298655},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1712942298660},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"d776c670e4076ad6049dbb64cdee7a734b51d37f","modified":1712942298676},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1712942298663},{"_id":"themes/butterfly/source/js/utils.js","hash":"7b871fe0c4456660cff4c7b9cc4ed089adac2caf","modified":1712942298677},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1712942298288},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1712942298290},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"39e1ca0a54eb5fd3688a78737417a1aaa50914c9","modified":1712942298291},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"1bef867c799ba158c5417272fb137539951aa120","modified":1712942298304},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1712942298293},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1712942298308},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1712942298306},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"cc99b2dc5c6b1f74391b0da609853ebc11de9610","modified":1712942298309},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1712942298295},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a7c929b90ae52b78b39b1728e3ab0e3db1cb7b9a","modified":1712942298297},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"766baca6ddce49d1724a02312387b292ff2d0bdc","modified":1712942298315},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1712942298317},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1712942298298},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"7a641b5dd45b970e1dafd1433eb32ea149e55cf2","modified":1712942298311},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1712942298300},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1712942298319},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"90eb453b14f6b5c25bfd8d28aa67783603a1411d","modified":1712942298324},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1712942298322},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1712942298329},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1712942298327},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e37681bc9c169d4220f26ecda2b3d5c02b6b9a0f","modified":1712942298331},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"0abad416b1974a17e5be7817931d5fe799180170","modified":1712942298337},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1712942298332},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"912df10a053db3135968e92b6fd1a707ee94c968","modified":1712942298339},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1712942298399},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1712942298349},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1712942298426},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"9b734d99963f3e7f562597dcf60485ccbf6e961c","modified":1712942298428},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1712942298429},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1712942298450},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1712942298448},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"dfb5e16a7e7106bb20b2ac2d0df1251d0fc79609","modified":1712942298445},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"ab037bf5794638bd30da4cf7cf106e5d03b5f696","modified":1712942298454},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1712942298452},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1712942298456},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"8e22f53886a57a68286970d8af8b4c950fd4a1d7","modified":1712942298460},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1712942298458},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1712942298461},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"d48d77af1670bd568d784794408bf524a448bfcc","modified":1712942298463},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1712942298464},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1712942298466},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e920dae9ce00177922468db49240f5aca0af4f64","modified":1712942298546},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1712942298467},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"0421da07907b3d98df64239e073b23fbb3f04149","modified":1712942298548},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"41054740cfbd1357138785464f6859681ca58493","modified":1712942298550},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1712942298566},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1712942298468},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8df529f71e25f1c0a00e533de7944ed3d1ba7bd8","modified":1712942298470},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1712942298572},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"aae70ddd126b2e40158e45036abecbfa33cbfbba","modified":1712942298570},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"964bda8acf4180a15c33e1d8447fc3140baa4c68","modified":1712942298579},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1712942298575},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"7ae27854a737a02eca89b0b92db94cb298fef59e","modified":1712942298585},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5e27f7842af82ff7498d4b59787ce9ca90fa9e6f","modified":1712942298577},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1712942298583},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1712942298581},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1712942298587},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"dbc855795a881f8c805bf5c9c5c4d5d542a648ec","modified":1712942298598},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c0b11a1a5f52e3a6af4e312a8134c93eda18a7dd","modified":1712942298589},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"0322237e762db401d7b4aa33168d0b9334a9ec26","modified":1712942298591},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"a22fd15048d21452f0015d0765d295d730203308","modified":1712942298601},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1712942298606},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"80ee9d0bfe5d38aac1f0cdcea5fc88b71d310041","modified":1712942298592},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"15ea7564b2e3bf46bc91fb6e49c94d057b37caaf","modified":1712942298594},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1712942298609},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1712942298611},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"37db99299af380e9111dce2a78a5049b301b13e0","modified":1712942298624},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"df7a51fcabbadab5aa31770e3202a47c9599bbb7","modified":1712942298613},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"a977cd8161ef4d6ddd5293e81403519076657430","modified":1712942298619},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"8a53d7ba5ca2f5eb4124b684e7845b648583f658","modified":1712942298628},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1712942298616},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0b23010154e19f37f0c4af0110f9f834d6d41a13","modified":1712942298627},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1712942298635},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1712942298632},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1712942298621},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"3e9355b76f87e2ee90f652855282b37ab5ae0b3e","modified":1712942298633},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1712942298637},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1712942298643},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1712942298639},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1712942298651},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a7c2fe73cc05ad3525909b86ad0ede1a9f2d3b48","modified":1712942298671},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1712942298641},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"ab3904451ae1d78903424b8b2ef815c8571e1749","modified":1712942298673},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"8f95aca305b56ccd7c8c7367b03d26db816ebd5f","modified":1712942298346},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"353b95f9a6c2c1e777d978118cb61f909ccbf89c","modified":1712942298645},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"58f37823f6cd9a194fb50f7ca7c2233e49939034","modified":1712942298347},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1712942298354},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1712942298351},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1712942298647},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1712942298364},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1712942298352},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1712942298355},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1712942298366},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1712942298357},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1712942298359},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1712942298367},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1712942298360},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1712942298368},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"6d40b521eec4136f6742c548a4445ed593470b1b","modified":1712942298372},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5373b822aa72ddb96f2f1f4baf6c058b40d705d6","modified":1712942298375},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"364d1fd655baca9132038ef1e312abde2c0bc7de","modified":1712942298377},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"799da8f3015e6fe440681b21644bcb3810a5518c","modified":1712942298370},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1712942298362},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"f78c9c20c86d58c7cf099f6f8d6097103d7d43e5","modified":1712942298378},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c86c8fc1a28514a02a1f6a25ca9ec05eb3955b7","modified":1712942298383},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"1eab7ca1cb16c6786f9c3ca0efef8cc15e444ab4","modified":1712942298382},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"11f5dca1432e59f22955aaf4ac3e9de6b286d887","modified":1712942298380},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1712942298385},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1712942298387},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"7f450664e6323a076ae59c393b0f22167cfa82e5","modified":1712942298390},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"09c2ef4bc6d005f96dfa48b1d9af1ec095c5266d","modified":1712942298388},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b65a42167df5fb07e2a63f312a58c321d3112a90","modified":1712942298393},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1712942298402},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1712942298404},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"9942a903227350960c1d0716e59516ae79ac24a8","modified":1712942298392},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"4ed7c74087e81c6fcaf4fca7dced58b4e19f4cb1","modified":1712942298395},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1712942298407},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"efb72547fc2d470a124f5636391128dc59627498","modified":1712942298397},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"2e36fac4791e99844cd56676898be0dbf5eb4e99","modified":1712942298411},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"c682e4d61017fb0dd2e837bfcc242371f1a13364","modified":1712942298408},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"fc8814bd016d039874ec2fc24dcb78587892e2a6","modified":1712942298415},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"d8898e427acd91ceb97d6a7ee3acb011ca86b9fc","modified":1712942298413},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1712942298417},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1712942298439},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"a4e52188b6effeee1df2a01dcbf4105de76a61a8","modified":1712942298419},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"17520a86de12ae585289463c066d3ac91b78a2ff","modified":1712942298421},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"c16ee69b5ca8db016db0508d014ae0867c4ce929","modified":1712942298442},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"0544d91c0bc9e26e0fe1b5ff490f4a8540ed1ee1","modified":1712942298425},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"ecfff55b2c7f6d87ce4d5028fdf9f8c0bf155c73","modified":1712942298422},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1712942298432},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1712942298443},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1712942298435},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1712942298557},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"420a86e73d0d748ac234fd00d06d9e433ca5e3f2","modified":1712942298436},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1712942298554},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"52a06a2e039f44383085333cac69f3f4e7d0ad3a","modified":1712942298433},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1712942298560},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"7c9cc43e1d2577f7151039d58e603c30860fd281","modified":1712942298564},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1712942298562},{"_id":"source/img/home/Alisinngai Lynn Home page image.jpg","hash":"5fe4ce370bc4b0a479429da5f4e66af9bbd40a88","modified":1604041300796},{"_id":"public/2024/04/21/2024-04-21-设计模式-01.设计思想/index.html","hash":"353253063b043cc6e11d80c745b24b9ccf541e1c","modified":1713713080220},{"_id":"public/2024/04/14/2021-04-14-Java8新特性/index.html","hash":"33f250b7be135f71752b89b8a4a1dbcdbc64ab1e","modified":1713713080220},{"_id":"public/2024/04/13/2024-04-13-单节点单硬盘部署MinIO/index.html","hash":"b63e2ac50d1d5131b810a580b48c8596cba08985","modified":1713713080220},{"_id":"public/2023/08/10/2023-08-10-CompletableFuture的使用/index.html","hash":"2e4ca4b3ae3c9c8956f2d84814eba28d0ab0b82b","modified":1713713080220},{"_id":"public/archives/index.html","hash":"41f86750a39b561da6663dfd324c8d1e8a5dba91","modified":1713713080220},{"_id":"public/archives/2023/index.html","hash":"b5c46e16fd007ffb8be6e6b20826786c93b0d623","modified":1713713080220},{"_id":"public/archives/2023/08/index.html","hash":"b659aa9f7b14a953288da7ffd0cc4ad6d631f846","modified":1713713080220},{"_id":"public/archives/2024/index.html","hash":"022ac409b86d0ae8ed688f7fee174eb77e20dd27","modified":1713713080220},{"_id":"public/archives/2024/04/index.html","hash":"2a8b3fd02e38bd5feeb525a37925665cf4aed999","modified":1713713080220},{"_id":"public/categories/Java/index.html","hash":"f798f23ba35ebb215cc91368327c831002c020c3","modified":1713713080220},{"_id":"public/categories/Java/新特性/index.html","hash":"95ba7baac475aa3a3aaabee4aaa704680e06a087","modified":1713713080220},{"_id":"public/categories/设计模式/index.html","hash":"bfa5c03f637ab92608a2dde64163617c2d17e268","modified":1713713080220},{"_id":"public/categories/Minio/index.html","hash":"e179f6a4508f1de9ae082edb993de627df985118","modified":1713713080220},{"_id":"public/categories/设计模式/01-设计思想/index.html","hash":"ff69515f3af3c76a709ba80ea07326acbd4dd407","modified":1713713080220},{"_id":"public/index.html","hash":"c6a182b23b4e5aa9be1b2acaf5aadaec7dcc18f0","modified":1713713080220},{"_id":"public/tags/Java8/index.html","hash":"2c59c813493eeb91ed658f10b05ea42de9ef453f","modified":1713713080220},{"_id":"public/tags/JDK8/index.html","hash":"26be5b6c1c120ca057edb8c1c8adf2fcb3cf1119","modified":1713713080220},{"_id":"public/tags/新特性/index.html","hash":"e9a0e6f18f17dbf974687c62077294d51646b6c4","modified":1713713080220},{"_id":"public/tags/Java/index.html","hash":"ef8d43e1407370117b77ecb11e676a75ceb08673","modified":1713713080220},{"_id":"public/tags/并发/index.html","hash":"77fde67988a655c724be0980ae337ba736a3e4d0","modified":1713713080220},{"_id":"public/tags/CompletableFuture/index.html","hash":"6149e4f69dee8e0b6bc1c68ae471029931f567fb","modified":1713713080220},{"_id":"public/tags/设计模式/index.html","hash":"2dabac1e8fac0cc9d0cb404ad558f8f47d33260e","modified":1713713080220},{"_id":"public/tags/设计思想/index.html","hash":"7300b120c4f0b0272551cd0ef9e703e7a467a650","modified":1713713080220},{"_id":"public/tags/对象储存/index.html","hash":"6717197643340c32c9c8263a501d8f2fdc376dcc","modified":1713713080220},{"_id":"public/tags/Minio/index.html","hash":"952cc73dd911c47c90c9e34768e01890352ed40a","modified":1713713080220},{"_id":"public/img/minio/minio.svg","hash":"283133390bffe6ded2a4ca732b6b1f259270e7c6","modified":1713713080220},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1713713080220},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1713713080220},{"_id":"public/img/home/homePageImage_01.webp","hash":"f384889a2089e35f5989d2857a96a1cb7c79decf","modified":1713713080220},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1713713080220},{"_id":"public/img/Java/Thread/Thread.svg","hash":"2d6bd166c0c268a795256d212dc0bfce6f93004a","modified":1713713080220},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1713713080220},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1713713080220},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1713713080220},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1713713080220},{"_id":"public/css/index.css","hash":"deae12e17dee0ddfb95c9d2ef11a29baa5d56f3d","modified":1713713080220},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1713713080220},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1713713080220},{"_id":"public/img/home/Alisinngai Lynn Home page image.jpg","hash":"5fe4ce370bc4b0a479429da5f4e66af9bbd40a88","modified":1713713080220}],"Category":[{"name":"Java","_id":"clv9oiygz0002f0vdap2x55ql"},{"name":"新特性","parent":"clv9oiygz0002f0vdap2x55ql","_id":"clv9oiyha0006f0vdbvo3bw1t"},{"name":"设计模式","_id":"clv9oiyhn000mf0vd4l0h2nj0"},{"name":"Minio","_id":"clv9oiyho000of0vd7pmkdf6q"},{"name":"01.设计思想","parent":"clv9oiyhn000mf0vd4l0h2nj0","_id":"clv9oiyhp000qf0vdcnwk3xsv"}],"Data":[],"Page":[],"Post":[{"title":"详解JDK8新特性","date":"2024-04-14T14:32:58.000Z","keywords":"Java8，新特性，JDK8","description":"详解JDK8出现的新特性。","cover":"https://npm.elemecdn.com/lql_static@latest/logo/java.png","_content":"\n\n\n# Java8新特性纵览\n\n> 关于Java8新特性的学习与记录，资料来源于互联网。\n\n\n# Lambda表达式\n\n## 为什么使用Lambda表达式？\n\n- Lambda 是一个**匿名函数**，我们可以把 Lambda 表达式理解为是**一段可以传递的代码**（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。\n- 在Java8之后的很多源码里用到了Lambda表达式，不学的话可能看不懂源码。\n\n\n\n## 简单使用\n\n```java\n @Test\n    public void test1(){\n        //原始写法\n        Runnable r1 = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"我爱北京天安门\");\n            }\n        };\n\n        r1.run();\n\n        System.out.println(\"***********************\");\n\n        //lambda表达式，可以表达一样的意思\n        Runnable r2 = () -> System.out.println(\"我爱北京故宫\");\n\n        r2.run();\n    }\n\n\n    @Test\n    public void test2(){\n\n        Comparator<Integer> com1 = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return Integer.compare(o1,o2);\n            }\n        };\n\n        int compare1 = com1.compare(12,21);\n        System.out.println(compare1);\n\n        System.out.println(\"***********************\");\n        \n        //Lambda表达式的写法\n        Comparator<Integer> com2 = (o1,o2) -> Integer.compare(o1,o2);\n\n        int compare2 = com2.compare(32,21);\n        System.out.println(compare2);\n\n\n        System.out.println(\"***********************\");\n        //方法引用\n        Comparator<Integer> com3 = Integer :: compare;\n\n        int compare3 = com3.compare(32,21);\n        System.out.println(compare3);\n    }\n```\n\n\n\n## Lambda语法规则\n\n```Java\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.function.Consumer;\n\n/**\n * Lambda表达式的使用\n * <p>\n * 1.举例： (o1,o2) -> Integer.compare(o1,o2);\n * 2.格式：\n * -> :lambda操作符 或 箭头操作符\n * ->左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表）\n * ->右边：lambda体 （其实就是重写的抽象方法的方法体）\n * <p>\n * 3. Lambda表达式的使用：（分为6种情况介绍）\n * <p>\n * 总结：\n * ->左边：lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只有一个参数，其一对()也\n * 可以省略\n * ->右边：lambda体应该使用一对{}包裹；如果lambda体只有一条执行语句（可能是return语句），省略这一\n 对{}和return关键字\n * <p>\n * 4.Lambda表达式的本质：作为函数式接口的实例\n * <p>\n * 5. 如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。我们可以在一个接口上\n 使用 @FunctionalInterface 注解，\n * 这样做可以检查它是否是一个函数式接口。\n * <p>\n * 6. 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。\n */\npublic class LambdaTest1 {\n    //语法格式一：无参，无返回值\n    @Test\n    public void test1() {\n        Runnable r1 = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"我爱北京天安门\");\n            }\n        };\n\n        r1.run();\n\n        System.out.println(\"***********************\");\n\n        Runnable r2 = () -> {\n            System.out.println(\"我爱北京故宫\");\n        };\n\n        r2.run();\n    }\n\n    //语法格式二：Lambda 需要一个参数，但是没有返回值。\n    @Test\n    public void test2() {\n\n        Consumer<String> con = new Consumer<String>() {\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n            }\n        };\n        con.accept(\"谎言和誓言的区别是什么？\");\n\n        System.out.println(\"*******************\");\n\n        Consumer<String> con1 = (String s) -> {\n            System.out.println(s);\n        };\n        con1.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n    }\n\n    //语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”\n    @Test\n    public void test3() {\n\n        Consumer<String> con1 = (String s) -> {\n            System.out.println(s);\n        };\n        con1.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n        System.out.println(\"*******************\");\n\n        Consumer<String> con2 = (s) -> {\n            System.out.println(s);\n        };\n        con2.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n    }\n\n    @Test\n    public void test4() {\n\n        ArrayList<String> list = new ArrayList<>();//类型推断\n\n        int[] arr = {1, 2, 3};//类型推断\n\n    }\n\n    //语法格式四：Lambda 若只需要一个参数时，参数的小括号可以省略\n    @Test\n    public void test5() {\n        Consumer<String> con1 = (s) -> {\n            System.out.println(s);\n        };\n        con1.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n        System.out.println(\"*******************\");\n\n        Consumer<String> con2 = s -> {\n            System.out.println(s);\n        };\n        con2.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n\n    }\n\n    //语法格式五：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值\n    @Test\n    public void test6() {\n\n        Comparator<Integer> com1 = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                System.out.println(o1);\n                System.out.println(o2);\n                return o1.compareTo(o2);\n            }\n        };\n\n        System.out.println(com1.compare(12, 21));\n\n        System.out.println(\"*****************************\");\n        Comparator<Integer> com2 = (o1, o2) -> {\n            System.out.println(o1);\n            System.out.println(o2);\n            return o1.compareTo(o2);\n        };\n\n        System.out.println(com2.compare(12, 6));\n\n\n    }\n\n    //语法格式六：当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略\n    @Test\n    public void test7() {\n\n        Comparator<Integer> com1 = (o1, o2) -> {\n            return o1.compareTo(o2);\n        };\n\n        System.out.println(com1.compare(12, 6));\n\n        System.out.println(\"*****************************\");\n\n        Comparator<Integer> com2 = (o1, o2) -> o1.compareTo(o2);\n\n        System.out.println(com2.compare(12, 21));\n\n    }\n\n    @Test\n    public void test8() {\n        Consumer<String> con1 = s -> {\n            System.out.println(s);\n        };\n        con1.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n        System.out.println(\"*****************************\");\n\n        Consumer<String> con2 = s -> System.out.println(s);\n\n        con2.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n    }\n\n}\n```\n\n\n\n# 函数式接口\n\n\n\n## 什么是函数式(Functional)接口\n\n- 只包含一个抽象方法的接口，称为**函数式接口**。 \n\n- 你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。\n\n- 我们可以在一个接口上使用 **@FunctionalInterface** 注解，这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。\n\n- 在java.util.function包下定义了Java 8 的丰富的函数式接口\n\n\n\n## 如何理解函数式接口\n\n- Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP)编程是一切。但是随着python、scala等语言的兴起和新技术的挑战，Java不得不做出调整以便支持更加广泛的技术要求，也即java不但可以支持OOP还可以支持OOF（面向函数编程） \n- 在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型——函数式接口。 \n- 简单的说，在Java8中，Lambda表达式就是一个函数式接口的实例。这就是Lambda表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口的实例，那么该对象就可以用Lambda表达式来表示。\n- 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。\n\n\n\n## Java内置函数式接口\n\n\n\n**核心函数式接口**\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0002.png\">\n\n\n\n**其它函数式接口**\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0003.png\">\n\n\n\n\n\n**Consumer**\n\n```java\n @Test\n    public void test1(){\n\n        happyTime(500, new Consumer<Double>() {\n            @Override\n            public void accept(Double aDouble) {\n                System.out.println(\"学习太累了，去天上人间买了瓶矿泉水，价格为：\" + aDouble);\n            }\n        });\n\n        System.out.println(\"********************\");\n\n        happyTime(400,money -> System.out.println(\"学习太累了，去天上人间喝了口水，价格为：\" + money));\n    }\n\n    public void happyTime(double money, Consumer<Double> con){\n        con.accept(money);\n    }\n```\n\n\n\n**结果：**\n\n```Java\n学习太累了，去天上人间买了瓶矿泉水，价格为：500.0\n********************\n学习太累了，去天上人间喝了口水，价格为：400.0\n\nProcess finished with exit code 0\n```\n\n\n\n**Predicate**\n\n```java\n@Test\n    public void test2(){\n        List<String> list = Arrays.asList(\"北京\",\"南京\",\"天津\",\"东京\",\"西京\",\"普京\");\n\n        List<String> filterStrs = filterString(list, new Predicate<String>() {\n            @Override\n            public boolean test(String s) {//这里是定义一个校验规则\n                return s.contains(\"京\");\n            }\n        });\n\n        System.out.println(filterStrs);\n\n        //用lambda表达式会很简单\n        List<String> filterStrs1 = filterString(list,s -> s.contains(\"京\"));\n        System.out.println(filterStrs1);\n    }\n\n    //根据给定的规则，过滤集合中的字符串。此规则由Predicate的方法决定\n    public List<String> filterString(List<String> list, Predicate<String> pre){\n\n        ArrayList<String> filterList = new ArrayList<>();\n\n        for(String s : list){\n            if(pre.test(s)){\n                filterList.add(s);\n            }\n        }\n\n        return filterList;\n\n    }\n\n```\n\n\n\n**结果：**\n\n```\n[北京, 南京, 东京, 西京, 普京]\n[北京, 南京, 东京, 西京, 普京]\n\nProcess finished with exit code 0\n```\n\n\n\n## 自定义函数式接口\n\n```java\n/**\n * 自定义函数式接口\n * 只是说加上@FunctionalInterface之后可以校验\n */\n@FunctionalInterface\npublic interface MyFunInterface<T> {\n\n    public T getValue(T t);\n\n}\n```\n\n\n\n```java\npublic class Test {\n\n    public static void main(String[] args) {\n        //这个方法的第一个参数是lambda表达式，相当于是实例化了那个函数式接口\n        String s = toUpperString(str -> str.toUpperCase(), \"abcd\");\n        System.out.println(s);\n    }\n\n    public static String toUpperString(MyFunInterface<String> mf,String str){\n        return mf.getValue(str);\n    }\n}\n```\n\n\n\n# 方法引用\n\n- 当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！\n\n- 方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。\n\n- 要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致！\n\n- 格式：使用操作符 “::” 将类(或对象) 与 方法名分隔开来。\n\n- 如下三种主要使用情况： \n\n  - 对象 :: 实例方法名\n\n  - 类 :: 静态方法名\n\n  - 类 :: 实例方法名\n\n\n\n我们直接拿例子来说明情况，先提前准备两个类：\n\n```Java\n\npublic class Employee {\n\n\tprivate int id;\n\tprivate String name;\n\tprivate int age;\n\tprivate double salary;\n\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(int id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\n\tpublic double getSalary() {\n\t\treturn salary;\n\t}\n\n\tpublic void setSalary(double salary) {\n\t\tthis.salary = salary;\n\t}\n\n\tpublic Employee() {\n\t\tSystem.out.println(\"Employee().....\");\n\t}\n\n\tpublic Employee(int id) {\n\t\tthis.id = id;\n\t\tSystem.out.println(\"Employee(int id).....\");\n\t}\n\n\tpublic Employee(int id, String name) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n\n\tpublic Employee(int id, String name, int age, double salary) {\n\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.salary = salary;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Employee{\" + \"id=\" + id + \", name='\" + name + '\\'' + \", age=\" + age + \", salary=\" + salary + '}';\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o)\n\t\t\treturn true;\n\t\tif (o == null || getClass() != o.getClass())\n\t\t\treturn false;\n\n\t\tEmployee employee = (Employee) o;\n\n\t\tif (id != employee.id)\n\t\t\treturn false;\n\t\tif (age != employee.age)\n\t\t\treturn false;\n\t\tif (Double.compare(employee.salary, salary) != 0)\n\t\t\treturn false;\n\t\treturn name != null ? name.equals(employee.name) : employee.name == null;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint result;\n\t\tlong temp;\n\t\tresult = id;\n\t\tresult = 31 * result + (name != null ? name.hashCode() : 0);\n\t\tresult = 31 * result + age;\n\t\ttemp = Double.doubleToLongBits(salary);\n\t\tresult = 31 * result + (int) (temp ^ (temp >>> 32));\n\t\treturn result;\n\t}\n}\n\n```\n\n\n\n```Java\n/**\n * 提供用于测试的数据\n */\npublic class EmployeeData {\n   \n   public static List<Employee> getEmployees(){\n      List<Employee> list = new ArrayList<>();\n      \n      list.add(new Employee(1001, \"马化腾\", 34, 6000.38));\n      list.add(new Employee(1002, \"马云\", 12, 9876.12));\n      list.add(new Employee(1003, \"刘强东\", 33, 3000.82));\n      list.add(new Employee(1004, \"雷军\", 26, 7657.37));\n      list.add(new Employee(1005, \"李彦宏\", 65, 5555.32));\n      list.add(new Employee(1006, \"比尔盖茨\", 42, 9500.43));\n      list.add(new Employee(1007, \"任正非\", 26, 4333.32));\n      list.add(new Employee(1008, \"扎克伯格\", 35, 2500.32));\n      \n      return list;\n   }\n   \n}\n```\n\n\n\n**下面来通过实际例子讲解方法引用：**\n\n```java\n\n\n/**\n * 方法引用的使用\n *\n * 1.使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！\n *\n * 2.方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以\n *   方法引用，也是函数式接口的实例。\n *\n * 3. 使用格式：  类(或对象) :: 方法名\n *\n * 4. 具体分为如下的三种情况：\n *    情况1     对象 :: 非静态方法\n *    情况2     类 :: 静态方法\n *\n *    情况3     类 :: 非静态方法\n *\n * 5. 方法引用使用的要求：\n * \t接口中的抽象方法的形参列表和返回值类型\n * \t与\n * \t方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2）\n *\n */\npublic class MethodRefTest {\n\n\t// 情况一：对象 :: 实例方法\n\t//Consumer中的void accept(T t)\n\t//PrintStream中的void println(T t)\n\t@Test\n\tpublic void test1() {\n\t\tConsumer<String> con1 = str -> System.out.println(str);\n\t\tcon1.accept(\"北京\");\n\n\t\tSystem.out.println(\"*******************\");\n\t\tPrintStream ps = System.out;\n\t\tConsumer<String> con2 = ps::println;\n\t\tcon2.accept(\"beijing\");\n\t}\n\t\n\t//Supplier中的T get()\n\t//Employee中的String getName()\n\t@Test\n\tpublic void test2() {\n\t\tEmployee emp = new Employee(1001,\"Tom\",23,5600);\n\n\t\tSupplier<String> sup1 = () -> emp.getName();\n\t\tSystem.out.println(sup1.get());\n\n\t\tSystem.out.println(\"*******************\");\n\t\tSupplier<String> sup2 = emp::getName;\n\t\tSystem.out.println(sup2.get());\n\n\t}\n\n\t// 情况二：类 :: 静态方法\n\t//Comparator中的int compare(T t1,T t2)\n\t//Integer中的int compare(T t1,T t2)\n\t@Test\n\tpublic void test3() {\n\t\tComparator<Integer> com1 = (t1,t2) -> Integer.compare(t1,t2);\n\t\tSystem.out.println(com1.compare(12,21));\n\n\t\tSystem.out.println(\"*******************\");\n\n\t\tComparator<Integer> com2 = Integer::compare;\n\t\tSystem.out.println(com2.compare(12,3));\n\n\t}\n\t\n\t//Function中的R apply(T t)\n\t//Math中的Long round(Double d)\n\t@Test\n\tpublic void test4() {\n\t\tFunction<Double,Long> func = new Function<Double, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long apply(Double d) {\n\t\t\t\treturn Math.round(d);\n\t\t\t}\n\t\t};\n\n\t\tSystem.out.println(\"*******************\");\n\n\t\tFunction<Double,Long> func1 = d -> Math.round(d);\n\t\tSystem.out.println(func1.apply(12.3));\n\n\t\tSystem.out.println(\"*******************\");\n\n\t\tFunction<Double,Long> func2 = Math::round;\n\t\tSystem.out.println(func2.apply(12.6));\n\t}\n\n\t// 情况三：类 :: 实例方法  (有难度)\n\t// Comparator中的int comapre(T t1,T t2)  第一个参数T t1,也可以变成方法的调用者\n\t// String中的int t1.compareTo(t2)        看上面说的，t1变成了调用者等价于第一个参数T t1\n\t@Test\n\tpublic void test5() {\n\t\tComparator<String> com1 = (s1,s2) -> s1.compareTo(s2);\n\t\tSystem.out.println(com1.compare(\"abc\",\"abd\"));\n\n\t\tSystem.out.println(\"*******************\");\n\n\t\tComparator<String> com2 = String :: compareTo;\n\t\tSystem.out.println(com2.compare(\"abd\",\"abm\"));\n\t}\n\n\t//BiPredicate中的boolean test(T t1, T t2);\n\t//String中的boolean t1.equals(t2)\n\t@Test\n\tpublic void test6() {\n\t\tBiPredicate<String,String> pre1 = (s1,s2) -> s1.equals(s2);\n\t\tSystem.out.println(pre1.test(\"abc\",\"abc\"));\n\n\t\tSystem.out.println(\"*******************\");\n\t\tBiPredicate<String,String> pre2 = String :: equals;\n\t\tSystem.out.println(pre2.test(\"abc\",\"abd\"));\n\t}\n\t\n\t// Function中的R apply(T t)\n\t// Employee中的String getName();   第一个参数T t相当于方法调用者emp，返回值R和String对应\n\t@Test\n\tpublic void test7() {\n\t\tEmployee employee = new Employee(1001, \"Jerry\", 23, 6000);\n\n\n\t\tFunction<Employee,String> func1 = e -> e.getName();\n\t\tSystem.out.println(func1.apply(employee));\n\n\t\tSystem.out.println(\"*******************\");\n\n\n\t\tFunction<Employee,String> func2 = Employee::getName;\n\t\tSystem.out.println(func2.apply(employee));\n\n\n\t}\n\n}\n\n```\n\n\n\n\n\n# 构造器引用\n\n格式：ClassName :: new\n\n与函数式接口相结合，自动与函数式接口中方法兼容。可以把构造器引用赋值给定义的方法，要求构造器参数列表要与接口中抽象方法的参数列表一致！且方法的返回值即为构造器对应类的对象。\n\n\n\n```Java\n\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\n\n/**\n * 一、构造器引用\n *      和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。\n *      抽象方法的返回值类型即为构造器所属的类的类型\n *\n * 二、数组引用\n *     大家可以把数组看做是一个特殊的类，则写法与构造器引用一致。\n *\n */\npublic class ConstructorRefTest {\n\n    /**\n     * 构造器引用\n     * Supplier中的T get()\n     * Employee的空参构造器：Employee()\n     * 1、和方法引用一样的理解方法，你的get()方法没有参数，我的Employee()也没有参数。\n     * 2、你的get()方法有返回值T，我的Employee()方法返回值也是一个对象\n     * 3、所以刚好可以用  \n     */\n    @Test\n    public void test1(){\n\n        Supplier<Employee> sup = new Supplier<Employee>() {\n            @Override\n            public Employee get() {\n                return new Employee();\n            }\n        };\n        System.out.println(\"*******************\");\n\n        Supplier<Employee>  sup1 = () -> new Employee();\n        System.out.println(sup1.get());\n\n        System.out.println(\"*******************\");\n\n        Supplier<Employee>  sup2 = Employee :: new;\n        System.out.println(sup2.get());\n    }\n\n\t//Function中的R apply(T t)\n    @Test\n    public void test2(){\n        Function<Integer,Employee> func1 = id -> new Employee(id);\n        Employee employee = func1.apply(1001);\n        System.out.println(employee);\n\n        System.out.println(\"*******************\");\n\n        Function<Integer,Employee> func2 = Employee :: new;\n        Employee employee1 = func2.apply(1002);\n        System.out.println(employee1);\n\n    }\n\n\t//BiFunction中的R apply(T t,U u)\n    @Test\n    public void test3(){\n        BiFunction<Integer,String,Employee> func1 = (id,name) -> new Employee(id,name);\n        System.out.println(func1.apply(1001,\"Tom\"));\n\n        System.out.println(\"*******************\");\n\n        BiFunction<Integer,String,Employee> func2 = Employee :: new;\n        System.out.println(func2.apply(1002,\"Tom\"));\n\n    }\n\n\t//数组引用\n    //Function中的R apply(T t)\n    @Test\n    public void test4(){\n        Function<Integer,String[]> func1 = length -> new String[length];\n        String[] arr1 = func1.apply(5);\n        System.out.println(Arrays.toString(arr1));\n\n        System.out.println(\"*******************\");\n\n        Function<Integer,String[]> func2 = String[] :: new;\n        String[] arr2 = func2.apply(10);\n        System.out.println(Arrays.toString(arr2));\n\n    }\n}\n\n```\n\n\n\n# 强大的Stream API\n\n## Stream API说明\n\n- Java8中有两大最为重要的改变。第一个是 **Lambda** **表达式**；另外一个则是 **Stream API**。 \n\n- Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。\n\n- Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 **使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。**也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式\n\n\n\n## 为什么要使用Stream API\n\n- 实际开发中，项目中多数数据源都来自于Mysql，Oracle等，很多一些复杂的数据获取可以直接在sql层面去解决。但现在数据源可以更多了，有MongDB，Radis等，而这些NoSQL的数据本身不支持一些复杂的数据计算，这个时候就需要Java层面去处理。 \n\n- Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。\n\n\n\n## 什么是Stream\n\nStream到底是什么呢？\n\n是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。\n\n**“集合讲的是数据，Stream讲的是计算！”**\n\n**注意：**\n\n①Stream 自己不会存储元素。\n\n②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。 \n\n③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行\n\n\n\n\n\n**Stream** **的操作三个步骤**\n\n1、创建Stream\n\n一个数据源（如：集合、数组），获取一个流\n\n2、中间操作\n\n一个中间操作链，对数据源的数据进行处理\n\n3、终止操作(终端操作) \n\n一旦执行终止操作，就执行中间操作链，才产生结果【也就是所谓的延迟执行】。之后，不会再被使用\n\n\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0004.png\">\n\n\n\n\n\n## 创建Stream\n\n\n\n```java\n\npublic class StreamAPITest {\n\n    //创建 Stream方式一：通过集合\n    @Test\n    public void test1(){\n        List<Employee> employees = EmployeeData.getEmployees();\n\n//        default Stream<E> stream() : 返回一个顺序流，顺序流等会中间操作拿数据的时候按顺序拿\n        Stream<Employee> stream = employees.stream();\n\n//        default Stream<E> parallelStream() : 返回一个并行流\n        Stream<Employee> parallelStream = employees.parallelStream();\n\n    }\n\n    //创建 Stream方式二：通过数组\n    @Test\n    public void test2(){\n        int[] arr = new int[]{1,2,3,4,5,6};\n        //调用Arrays类的static <T> Stream<T> stream(T[] array): 返回一个流\n        IntStream stream = Arrays.stream(arr);\n\n        Employee e1 = new Employee(1001,\"Tom\");\n        Employee e2 = new Employee(1002,\"Jerry\");\n        Employee[] arr1 = new Employee[]{e1,e2};\n        Stream<Employee> stream1 = Arrays.stream(arr1);\n\n    }\n    //创建 Stream方式三：通过Stream的of()，通过显示值创建一个流。它可以接收任意数量的参数\n    @Test\n    public void test3(){\n\n        Stream<Integer> stream = Stream.of(1, 2, 3, 4, 5, 6);\n\n    }\n\n    //创建 Stream方式四：创建无限流【用的少，了解下就行】\n    @Test\n    public void test4(){\n\n//      迭代\n//      public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f)\n        //遍历前10个偶数\n        Stream.iterate(0, t -> t + 2).limit(10).forEach(System.out::println);\n\n\n//      生成\n//      public static<T> Stream<T> generate(Supplier<T> s)\n        Stream.generate(Math::random).limit(10).forEach(System.out::println);\n\n    }\n\n}\n\n```\n\n\n\n\n\n## 中间操作\n\n```Java\n\n/**\n * 测试Stream的中间操作\n */\npublic class StreamAPITest1 {\n\n    //1-筛选与切片\n    @Test\n    public void test1(){\n        List<Employee> list = EmployeeData.getEmployees();\n//        filter(Predicate p)——过滤   接收 Lambda ， 从流中排除某些元素。\n        Stream<Employee> stream = list.stream();\n        //练习：查询员工表中薪资大于7000的员工信息\n        /**\n         * List<String> filterStrs1 = filterString(list,s -> s.contains(\"京\"));\n         * 跟之前的这个lambda表达式代码是一个意思\n         */\n        stream.filter(e -> e.getSalary() > 7000).forEach(System.out::println);\n\n        System.out.println();\n//        limit(n)——截断流，使其元素不超过给定数量。\n        list.stream().limit(3).forEach(System.out::println);\n        System.out.println();\n\n        /*\n        skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，\n        则返回一个空流。与 limit(n) 互补\n        */\n        list.stream().skip(3).forEach(System.out::println);\n\n        System.out.println();\n//        distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素\n\n        list.add(new Employee(1010,\"刘强东\",40,8000));\n        list.add(new Employee(1010,\"刘强东\",41,8000));\n        list.add(new Employee(1010,\"刘强东\",40,8000));\n        list.add(new Employee(1010,\"刘强东\",40,8000));\n        list.add(new Employee(1010,\"刘强东\",40,8000));\n\n//        System.out.println(list);\n\n        list.stream().distinct().forEach(System.out::println);\n    }\n\n    //映射\n    @Test\n    public void test2(){\n        /*\n        map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应\n        用到每个元素上，并将其映射成一个新的元素。\n        */\n        List<String> list = Arrays.asList(\"aa\", \"bb\", \"cc\", \"dd\");\n        list.stream().map(str -> str.toUpperCase()).forEach(System.out::println);\n\n//        练习1：获取员工姓名长度大于3的员工的姓名。\n        List<Employee> employees = EmployeeData.getEmployees();\n        Stream<String> namesStream = employees.stream().map(Employee::getName);\n        namesStream.filter(name -> name.length() > 3).forEach(System.out::println);\n        System.out.println();\n        //练习2：\n        Stream<Stream<Character>> streamStream = list.stream().map(StreamAPITest1::fromStringToStream);\n        //这个还需要两层遍历\n        streamStream.forEach(s ->{\n            s.forEach(System.out::println);\n        });\n        System.out.println();\n        /*\n        flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连\n        接成一个流。flatMap一层遍历即可拿到想要的结果\n        */\n        Stream<Character> characterStream = list.stream().flatMap(StreamAPITest1::fromStringToStream);\n        characterStream.forEach(System.out::println);\n\n    }\n\n    //将字符串中的多个字符构成的集合转换为对应的Stream的实例\n    public static Stream<Character> fromStringToStream(String str){//aa\n        ArrayList<Character> list = new ArrayList<>();\n        for(Character c : str.toCharArray()){\n            list.add(c);\n        }\n       return list.stream();\n\n    }\n\n\n    //3-排序\n    @Test\n    public void test4(){\n//        sorted()——自然排序\n        List<Integer> list = Arrays.asList(12, 43, 65, 34, 87, 0, -98, 7);\n        list.stream().sorted().forEach(System.out::println);\n        //抛异常，原因:Employee没有实现Comparable接口\n//        List<Employee> employees = EmployeeData.getEmployees();\n//        employees.stream().sorted().forEach(System.out::println);\n\n\n//        sorted(Comparator com)——定制排序\n\n        List<Employee> employees = EmployeeData.getEmployees();\n        employees.stream().sorted( (e1,e2) -> {\n\n           int ageValue = Integer.compare(e1.getAge(),e2.getAge());\n           if(ageValue != 0){\n               return ageValue;\n           }else{\n               return -Double.compare(e1.getSalary(),e2.getSalary());\n           }\n\n        }).forEach(System.out::println);\n    }\n\n}\n\n```\n\n\n\n## 终止操作\n\n\n\n```Java\n\n/**\n * 测试Stream的终止操作\n *\n */\npublic class StreamAPITest2 {\n\n    //1-匹配与查找\n    @Test\n    public void test1(){\n        List<Employee> employees = EmployeeData.getEmployees();\n\n//        allMatch(Predicate p)——检查是否匹配所有元素。\n//          练习：是否所有的员工的年龄都大于18\n        boolean allMatch = employees.stream().allMatch(e -> e.getAge() > 18);\n        System.out.println(allMatch);\n\n//        anyMatch(Predicate p)——检查是否至少匹配一个元素。\n//         练习：是否存在员工的工资大于 10000\n        boolean anyMatch = employees.stream().anyMatch(e -> e.getSalary() > 10000);\n        System.out.println(anyMatch);\n\n//        noneMatch(Predicate p)——检查是否没有匹配的元素。\n//          练习：是否存在员工姓“雷”\n        boolean noneMatch = employees.stream().noneMatch(e -> e.getName().startsWith(\"雷\"));\n        System.out.println(noneMatch);\n//        findFirst——返回第一个元素\n        Optional<Employee> employee = employees.stream().findFirst();\n        System.out.println(employee);\n//        findAny——返回当前流中的任意元素\n        Optional<Employee> employee1 = employees.parallelStream().findAny();\n        System.out.println(employee1);\n\n    }\n\n    @Test\n    public void test2(){\n        List<Employee> employees = EmployeeData.getEmployees();\n        // count——返回流中元素的总个数\n        long count = employees.stream().filter(e -> e.getSalary() > 5000).count();\n        System.out.println(count);\n//        max(Comparator c)——返回流中最大值\n//        练习：返回最高的工资：\n        Stream<Double> salaryStream = employees.stream().map(e -> e.getSalary());\n        Optional<Double> maxSalary = salaryStream.max(Double::compare);\n        System.out.println(maxSalary);\n//        min(Comparator c)——返回流中最小值\n//        练习：返回最低工资的员工\n        Optional<Employee> employee = employees.stream().min((e1, e2) -> Double.compare(e1.getSalary(), e2.getSalary()));\n        System.out.println(employee);\n        System.out.println();\n//        forEach(Consumer c)——内部迭代\n        employees.stream().forEach(System.out::println);\n\n        //使用集合的遍历操作\n        employees.forEach(System.out::println);\n    }\n\n    //2-归约\n    @Test\n    public void test3(){\n//        reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T\n//        练习1：计算1-10的自然数的和\n        List<Integer> list = Arrays.asList(1,2,3,4,5,6,7,8,9,10);\n        Integer sum = list.stream().reduce(0, Integer::sum);\n        System.out.println(sum);\n\n\n//        reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional<T>\n//        练习2：计算公司所有员工工资的总和\n        List<Employee> employees = EmployeeData.getEmployees();\n        Stream<Double> salaryStream = employees.stream().map(Employee::getSalary);\n//        Optional<Double> sumMoney = salaryStream.reduce(Double::sum);\n        Optional<Double> sumMoney = salaryStream.reduce((d1,d2) -> d1 + d2);\n        System.out.println(sumMoney.get());\n\n    }\n\n    //3-收集\n    @Test\n    public void test4(){\n// collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法\n//        练习1：查找工资大于6000的员工，结果返回为一个List或Set\n\n        List<Employee> employees = EmployeeData.getEmployees();\n        List<Employee> employeeList = employees.stream().filter(e -> e.getSalary() > 6000).collect(Collectors.toList());\n\n        employeeList.forEach(System.out::println);\n        System.out.println();\n        Set<Employee> employeeSet = employees.stream().filter(e -> e.getSalary() > 6000).collect(Collectors.toSet());\n\n        employeeSet.forEach(System.out::println);\n\n\n\n\n    }\n}\n\n```\n\n\n\n# Optional类\n\n## 什么是Optional？\n\n\n\n- 到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分。\n\n- Optional<T> 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。 \n\n- Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。\n\n\n\n## 常用API\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0005.png\">\n\n\n\n\n\n## 举例\n\n首先准备两个类\n\n```java\n\npublic class Boy {\n    private Girl girl;\n\n    @Override\n    public String toString() {\n        return \"Boy{\" +\n                \"girl=\" + girl +\n                '}';\n    }\n\n    public Girl getGirl() {\n        return girl;\n    }\n\n    public void setGirl(Girl girl) {\n        this.girl = girl;\n    }\n\n    public Boy() {\n\n    }\n\n    public Boy(Girl girl) {\n\n        this.girl = girl;\n    }\n}\n```\n\n\n\n```java\npublic class Girl {\n\n    private String name;\n\n    @Override\n    public String toString() {\n        return \"Girl{\" +\n                \"name='\" + name + '\\'' +\n                '}';\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Girl() {\n\n    }\n\n    public Girl(String name) {\n\n        this.name = name;\n    }\n}\n```\n\n\n\n这里只是简单的测试两个API\n\n```Java\n/**\n * Optional类：为了在程序中避免出现空指针异常而创建的。\n *\n * 常用的方法：ofNullable(T t)\n *            orElse(T t)\n *\n */\npublic class OptionalTest {\n\n/*\nOptional.of(T t) : 创建一个 Optional 实例，t必须非空；\nOptional.empty() : 创建一个空的 Optional 实例\nOptional.ofNullable(T t)：t可以为null\n\n */\n    @Test\n    public void test1(){\n        Girl girl = new Girl();\n//        girl = null;\n        //of(T t):保证t是非空的\n        Optional<Girl> optionalGirl = Optional.of(girl);\n\n    }\n\n    @Test\n    public void test2(){\n        Girl girl = new Girl();\n//        girl = null;\n        //ofNullable(T t)：t可以为null\n        Optional<Girl> optionalGirl = Optional.ofNullable(girl);\n        System.out.println(optionalGirl);\n        //orElse(T t1):如果单前的Optional内部封装的t是非空的，则返回内部的t.\n        //如果内部的t是空的，则返回orElse()方法中的参数t1.\n        Girl girl1 = optionalGirl.orElse(new Girl(\"赵丽颖\"));\n        System.out.println(girl1);\n\n    }\n}\n```\n\n\n\n**实际场景使用**\n\n可能出现空指针的例子：\n\n```java\npublic String getGirlName(Boy boy){\n        return boy.getGirl().getName();\n    }\n\n    @Test\n    public void test3(){\n        Boy boy = new Boy();\n        boy = null;\n        String girlName = getGirlName(boy);\n        System.out.println(girlName);\n\n    }\n```\n\n\n\n结果：\n\n```\njava.lang.NullPointerException\n\tat com.atguigu.java4.OptionalTest.getGirlName(OptionalTest.java:47)\n\tat com.atguigu.java4.OptionalTest.test3(OptionalTest.java:54)\n...\n...\n\nProcess finished with exit code -1\n```\n\n\n\n没有Optional的解决办法，但是如果调用层数过多，就得一层一层判断是否为null，写起来很麻烦。\n\n```Java\n//优化以后的getGirlName():\n    public String getGirlName1(Boy boy){\n        if(boy != null){\n            Girl girl = boy.getGirl();\n            if(girl != null){\n                return girl.getName();\n            }\n        }\n\n        return null;\n\n    }\n@Test\n    public void test4(){\n        Boy boy = new Boy();\n        boy = null;\n        String girlName = getGirlName1(boy);\n        System.out.println(girlName);\n\n    }\n```\n\n\n\n使用Optional解决问题：\n\n```Java\n //使用Optional类的getGirlName():\n    public String getGirlName2(Boy boy){\n\n        Optional<Boy> boyOptional = Optional.ofNullable(boy);\n        //此时的boy1一定非空\n        Boy boy1 = boyOptional.orElse(new Boy(new Girl(\"迪丽热巴\")));\n\n        Girl girl = boy1.getGirl();\n\n        Optional<Girl> girlOptional = Optional.ofNullable(girl);\n        //girl1一定非空\n        Girl girl1 = girlOptional.orElse(new Girl(\"古力娜扎\"));\n\n        return girl1.getName();\n    }\n\n    @Test\n    public void test5(){\n        Boy boy = null;\n        boy = new Boy();\n        boy = new Boy(new Girl(\"苍老师\"));\n        String girlName = getGirlName2(boy);\n        System.out.println(girlName);\n\n    }\n```\n\n这种是绝对不会出现空指针的。\n\n\n\n# 接口的增强\n\n```\nJDK7及以前：只能定义全局常量和抽象方法\n  >全局常量：public static final的.但是书写时，可以省略不写\n  >抽象方法：public abstract的\n  \t\t\t\nJDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法\n```\n\n\n\n```java\n/*\n * JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法\n */\npublic interface CompareA {\n\n    //静态方法\n    public static void method1() {\n\n        System.out.println(\"CompareA:北京\");\n    }\n\n    //默认方法\n    public default void method2() {\n        System.out.println(\"CompareA：上海\");\n    }\n    //接口中的public 可以省略，自动就是public\n    default void method3() {\n        System.out.println(\"CompareA：上海\");\n    }\n}\n```\n\n\n\n```java\npublic class SuperClass {\n\t\n\tpublic void method3(){\n\t\tSystem.out.println(\"SuperClass:北京\");\n\t}\n\t\n}\n```\n\n\n\n```java\npublic interface CompareB {\n\t\n\tdefault void method3(){\n\t\tSystem.out.println(\"CompareB：上海\");\n\t}\n\t\n}\n```\n\n\n\n\n\n```java\npublic class SubClassTest {\n\t\n\tpublic static void main(String[] args) {\n\t\tSubClass s = new SubClass();\n\t\t\n//\t\ts.method1();\n//\t\tSubClass.method1();\n\t\t//知识点1：接口中定义的静态方法，只能通过接口来调用。实现类用不了\n\t\tCompareA.method1();\n\t\t//知识点2：通过实现类的对象，可以调用接口中的默认方法。\n\t\t//如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法\n\t\ts.method2();\n\t\t//知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，\n\t\t//那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。-->类优先原则\n\t\t//知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，\n\t\t//那么在实现类没有重写此方法的情况下，报错。-->接口冲突。\n\t\t//这就需要我们必须在实现类中重写此方法\n\t\ts.method3();\n\t\t\n\t}\n\t\n}\n\nclass SubClass extends SuperClass implements CompareA,CompareB{\n\t\n\tpublic void method2(){\n\t\tSystem.out.println(\"SubClass：上海\");\n\t}\n\t\n\tpublic void method3(){\n\t\tSystem.out.println(\"SubClass：深圳\");\n\t}\n\t\n\t//知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法\n\tpublic void myMethod(){\n\t\tmethod3();//调用自己定义的重写的方法\n\t\tsuper.method3();//调用的是父类中声明的\n\t\t//调用接口中的默认方法\n\t\tCompareA.super.method3();\n\t\tCompareB.super.method3();\n\t}\n}\n```\n","source":"_posts/2021-04-14-Java8新特性.md","raw":"---\ntitle: 详解JDK8新特性\ndate: 2024-04-14 22:32:58\ntags:\n  - Java8\n  - JDK8\n  - 新特性\ncategories:\n  - Java\n  - 新特性\nkeywords: Java8，新特性，JDK8\ndescription: 详解JDK8出现的新特性。\ncover: 'https://npm.elemecdn.com/lql_static@latest/logo/java.png'\n---\n\n\n\n# Java8新特性纵览\n\n> 关于Java8新特性的学习与记录，资料来源于互联网。\n\n\n# Lambda表达式\n\n## 为什么使用Lambda表达式？\n\n- Lambda 是一个**匿名函数**，我们可以把 Lambda 表达式理解为是**一段可以传递的代码**（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。\n- 在Java8之后的很多源码里用到了Lambda表达式，不学的话可能看不懂源码。\n\n\n\n## 简单使用\n\n```java\n @Test\n    public void test1(){\n        //原始写法\n        Runnable r1 = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"我爱北京天安门\");\n            }\n        };\n\n        r1.run();\n\n        System.out.println(\"***********************\");\n\n        //lambda表达式，可以表达一样的意思\n        Runnable r2 = () -> System.out.println(\"我爱北京故宫\");\n\n        r2.run();\n    }\n\n\n    @Test\n    public void test2(){\n\n        Comparator<Integer> com1 = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return Integer.compare(o1,o2);\n            }\n        };\n\n        int compare1 = com1.compare(12,21);\n        System.out.println(compare1);\n\n        System.out.println(\"***********************\");\n        \n        //Lambda表达式的写法\n        Comparator<Integer> com2 = (o1,o2) -> Integer.compare(o1,o2);\n\n        int compare2 = com2.compare(32,21);\n        System.out.println(compare2);\n\n\n        System.out.println(\"***********************\");\n        //方法引用\n        Comparator<Integer> com3 = Integer :: compare;\n\n        int compare3 = com3.compare(32,21);\n        System.out.println(compare3);\n    }\n```\n\n\n\n## Lambda语法规则\n\n```Java\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.function.Consumer;\n\n/**\n * Lambda表达式的使用\n * <p>\n * 1.举例： (o1,o2) -> Integer.compare(o1,o2);\n * 2.格式：\n * -> :lambda操作符 或 箭头操作符\n * ->左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表）\n * ->右边：lambda体 （其实就是重写的抽象方法的方法体）\n * <p>\n * 3. Lambda表达式的使用：（分为6种情况介绍）\n * <p>\n * 总结：\n * ->左边：lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只有一个参数，其一对()也\n * 可以省略\n * ->右边：lambda体应该使用一对{}包裹；如果lambda体只有一条执行语句（可能是return语句），省略这一\n 对{}和return关键字\n * <p>\n * 4.Lambda表达式的本质：作为函数式接口的实例\n * <p>\n * 5. 如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。我们可以在一个接口上\n 使用 @FunctionalInterface 注解，\n * 这样做可以检查它是否是一个函数式接口。\n * <p>\n * 6. 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。\n */\npublic class LambdaTest1 {\n    //语法格式一：无参，无返回值\n    @Test\n    public void test1() {\n        Runnable r1 = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"我爱北京天安门\");\n            }\n        };\n\n        r1.run();\n\n        System.out.println(\"***********************\");\n\n        Runnable r2 = () -> {\n            System.out.println(\"我爱北京故宫\");\n        };\n\n        r2.run();\n    }\n\n    //语法格式二：Lambda 需要一个参数，但是没有返回值。\n    @Test\n    public void test2() {\n\n        Consumer<String> con = new Consumer<String>() {\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n            }\n        };\n        con.accept(\"谎言和誓言的区别是什么？\");\n\n        System.out.println(\"*******************\");\n\n        Consumer<String> con1 = (String s) -> {\n            System.out.println(s);\n        };\n        con1.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n    }\n\n    //语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”\n    @Test\n    public void test3() {\n\n        Consumer<String> con1 = (String s) -> {\n            System.out.println(s);\n        };\n        con1.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n        System.out.println(\"*******************\");\n\n        Consumer<String> con2 = (s) -> {\n            System.out.println(s);\n        };\n        con2.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n    }\n\n    @Test\n    public void test4() {\n\n        ArrayList<String> list = new ArrayList<>();//类型推断\n\n        int[] arr = {1, 2, 3};//类型推断\n\n    }\n\n    //语法格式四：Lambda 若只需要一个参数时，参数的小括号可以省略\n    @Test\n    public void test5() {\n        Consumer<String> con1 = (s) -> {\n            System.out.println(s);\n        };\n        con1.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n        System.out.println(\"*******************\");\n\n        Consumer<String> con2 = s -> {\n            System.out.println(s);\n        };\n        con2.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n\n    }\n\n    //语法格式五：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值\n    @Test\n    public void test6() {\n\n        Comparator<Integer> com1 = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                System.out.println(o1);\n                System.out.println(o2);\n                return o1.compareTo(o2);\n            }\n        };\n\n        System.out.println(com1.compare(12, 21));\n\n        System.out.println(\"*****************************\");\n        Comparator<Integer> com2 = (o1, o2) -> {\n            System.out.println(o1);\n            System.out.println(o2);\n            return o1.compareTo(o2);\n        };\n\n        System.out.println(com2.compare(12, 6));\n\n\n    }\n\n    //语法格式六：当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略\n    @Test\n    public void test7() {\n\n        Comparator<Integer> com1 = (o1, o2) -> {\n            return o1.compareTo(o2);\n        };\n\n        System.out.println(com1.compare(12, 6));\n\n        System.out.println(\"*****************************\");\n\n        Comparator<Integer> com2 = (o1, o2) -> o1.compareTo(o2);\n\n        System.out.println(com2.compare(12, 21));\n\n    }\n\n    @Test\n    public void test8() {\n        Consumer<String> con1 = s -> {\n            System.out.println(s);\n        };\n        con1.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n        System.out.println(\"*****************************\");\n\n        Consumer<String> con2 = s -> System.out.println(s);\n\n        con2.accept(\"一个是听得人当真了，一个是说的人当真了\");\n\n    }\n\n}\n```\n\n\n\n# 函数式接口\n\n\n\n## 什么是函数式(Functional)接口\n\n- 只包含一个抽象方法的接口，称为**函数式接口**。 \n\n- 你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。\n\n- 我们可以在一个接口上使用 **@FunctionalInterface** 注解，这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。\n\n- 在java.util.function包下定义了Java 8 的丰富的函数式接口\n\n\n\n## 如何理解函数式接口\n\n- Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP)编程是一切。但是随着python、scala等语言的兴起和新技术的挑战，Java不得不做出调整以便支持更加广泛的技术要求，也即java不但可以支持OOP还可以支持OOF（面向函数编程） \n- 在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型——函数式接口。 \n- 简单的说，在Java8中，Lambda表达式就是一个函数式接口的实例。这就是Lambda表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口的实例，那么该对象就可以用Lambda表达式来表示。\n- 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。\n\n\n\n## Java内置函数式接口\n\n\n\n**核心函数式接口**\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0002.png\">\n\n\n\n**其它函数式接口**\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0003.png\">\n\n\n\n\n\n**Consumer**\n\n```java\n @Test\n    public void test1(){\n\n        happyTime(500, new Consumer<Double>() {\n            @Override\n            public void accept(Double aDouble) {\n                System.out.println(\"学习太累了，去天上人间买了瓶矿泉水，价格为：\" + aDouble);\n            }\n        });\n\n        System.out.println(\"********************\");\n\n        happyTime(400,money -> System.out.println(\"学习太累了，去天上人间喝了口水，价格为：\" + money));\n    }\n\n    public void happyTime(double money, Consumer<Double> con){\n        con.accept(money);\n    }\n```\n\n\n\n**结果：**\n\n```Java\n学习太累了，去天上人间买了瓶矿泉水，价格为：500.0\n********************\n学习太累了，去天上人间喝了口水，价格为：400.0\n\nProcess finished with exit code 0\n```\n\n\n\n**Predicate**\n\n```java\n@Test\n    public void test2(){\n        List<String> list = Arrays.asList(\"北京\",\"南京\",\"天津\",\"东京\",\"西京\",\"普京\");\n\n        List<String> filterStrs = filterString(list, new Predicate<String>() {\n            @Override\n            public boolean test(String s) {//这里是定义一个校验规则\n                return s.contains(\"京\");\n            }\n        });\n\n        System.out.println(filterStrs);\n\n        //用lambda表达式会很简单\n        List<String> filterStrs1 = filterString(list,s -> s.contains(\"京\"));\n        System.out.println(filterStrs1);\n    }\n\n    //根据给定的规则，过滤集合中的字符串。此规则由Predicate的方法决定\n    public List<String> filterString(List<String> list, Predicate<String> pre){\n\n        ArrayList<String> filterList = new ArrayList<>();\n\n        for(String s : list){\n            if(pre.test(s)){\n                filterList.add(s);\n            }\n        }\n\n        return filterList;\n\n    }\n\n```\n\n\n\n**结果：**\n\n```\n[北京, 南京, 东京, 西京, 普京]\n[北京, 南京, 东京, 西京, 普京]\n\nProcess finished with exit code 0\n```\n\n\n\n## 自定义函数式接口\n\n```java\n/**\n * 自定义函数式接口\n * 只是说加上@FunctionalInterface之后可以校验\n */\n@FunctionalInterface\npublic interface MyFunInterface<T> {\n\n    public T getValue(T t);\n\n}\n```\n\n\n\n```java\npublic class Test {\n\n    public static void main(String[] args) {\n        //这个方法的第一个参数是lambda表达式，相当于是实例化了那个函数式接口\n        String s = toUpperString(str -> str.toUpperCase(), \"abcd\");\n        System.out.println(s);\n    }\n\n    public static String toUpperString(MyFunInterface<String> mf,String str){\n        return mf.getValue(str);\n    }\n}\n```\n\n\n\n# 方法引用\n\n- 当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！\n\n- 方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。\n\n- 要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致！\n\n- 格式：使用操作符 “::” 将类(或对象) 与 方法名分隔开来。\n\n- 如下三种主要使用情况： \n\n  - 对象 :: 实例方法名\n\n  - 类 :: 静态方法名\n\n  - 类 :: 实例方法名\n\n\n\n我们直接拿例子来说明情况，先提前准备两个类：\n\n```Java\n\npublic class Employee {\n\n\tprivate int id;\n\tprivate String name;\n\tprivate int age;\n\tprivate double salary;\n\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(int id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\n\tpublic double getSalary() {\n\t\treturn salary;\n\t}\n\n\tpublic void setSalary(double salary) {\n\t\tthis.salary = salary;\n\t}\n\n\tpublic Employee() {\n\t\tSystem.out.println(\"Employee().....\");\n\t}\n\n\tpublic Employee(int id) {\n\t\tthis.id = id;\n\t\tSystem.out.println(\"Employee(int id).....\");\n\t}\n\n\tpublic Employee(int id, String name) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n\n\tpublic Employee(int id, String name, int age, double salary) {\n\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.salary = salary;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Employee{\" + \"id=\" + id + \", name='\" + name + '\\'' + \", age=\" + age + \", salary=\" + salary + '}';\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o)\n\t\t\treturn true;\n\t\tif (o == null || getClass() != o.getClass())\n\t\t\treturn false;\n\n\t\tEmployee employee = (Employee) o;\n\n\t\tif (id != employee.id)\n\t\t\treturn false;\n\t\tif (age != employee.age)\n\t\t\treturn false;\n\t\tif (Double.compare(employee.salary, salary) != 0)\n\t\t\treturn false;\n\t\treturn name != null ? name.equals(employee.name) : employee.name == null;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint result;\n\t\tlong temp;\n\t\tresult = id;\n\t\tresult = 31 * result + (name != null ? name.hashCode() : 0);\n\t\tresult = 31 * result + age;\n\t\ttemp = Double.doubleToLongBits(salary);\n\t\tresult = 31 * result + (int) (temp ^ (temp >>> 32));\n\t\treturn result;\n\t}\n}\n\n```\n\n\n\n```Java\n/**\n * 提供用于测试的数据\n */\npublic class EmployeeData {\n   \n   public static List<Employee> getEmployees(){\n      List<Employee> list = new ArrayList<>();\n      \n      list.add(new Employee(1001, \"马化腾\", 34, 6000.38));\n      list.add(new Employee(1002, \"马云\", 12, 9876.12));\n      list.add(new Employee(1003, \"刘强东\", 33, 3000.82));\n      list.add(new Employee(1004, \"雷军\", 26, 7657.37));\n      list.add(new Employee(1005, \"李彦宏\", 65, 5555.32));\n      list.add(new Employee(1006, \"比尔盖茨\", 42, 9500.43));\n      list.add(new Employee(1007, \"任正非\", 26, 4333.32));\n      list.add(new Employee(1008, \"扎克伯格\", 35, 2500.32));\n      \n      return list;\n   }\n   \n}\n```\n\n\n\n**下面来通过实际例子讲解方法引用：**\n\n```java\n\n\n/**\n * 方法引用的使用\n *\n * 1.使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！\n *\n * 2.方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以\n *   方法引用，也是函数式接口的实例。\n *\n * 3. 使用格式：  类(或对象) :: 方法名\n *\n * 4. 具体分为如下的三种情况：\n *    情况1     对象 :: 非静态方法\n *    情况2     类 :: 静态方法\n *\n *    情况3     类 :: 非静态方法\n *\n * 5. 方法引用使用的要求：\n * \t接口中的抽象方法的形参列表和返回值类型\n * \t与\n * \t方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2）\n *\n */\npublic class MethodRefTest {\n\n\t// 情况一：对象 :: 实例方法\n\t//Consumer中的void accept(T t)\n\t//PrintStream中的void println(T t)\n\t@Test\n\tpublic void test1() {\n\t\tConsumer<String> con1 = str -> System.out.println(str);\n\t\tcon1.accept(\"北京\");\n\n\t\tSystem.out.println(\"*******************\");\n\t\tPrintStream ps = System.out;\n\t\tConsumer<String> con2 = ps::println;\n\t\tcon2.accept(\"beijing\");\n\t}\n\t\n\t//Supplier中的T get()\n\t//Employee中的String getName()\n\t@Test\n\tpublic void test2() {\n\t\tEmployee emp = new Employee(1001,\"Tom\",23,5600);\n\n\t\tSupplier<String> sup1 = () -> emp.getName();\n\t\tSystem.out.println(sup1.get());\n\n\t\tSystem.out.println(\"*******************\");\n\t\tSupplier<String> sup2 = emp::getName;\n\t\tSystem.out.println(sup2.get());\n\n\t}\n\n\t// 情况二：类 :: 静态方法\n\t//Comparator中的int compare(T t1,T t2)\n\t//Integer中的int compare(T t1,T t2)\n\t@Test\n\tpublic void test3() {\n\t\tComparator<Integer> com1 = (t1,t2) -> Integer.compare(t1,t2);\n\t\tSystem.out.println(com1.compare(12,21));\n\n\t\tSystem.out.println(\"*******************\");\n\n\t\tComparator<Integer> com2 = Integer::compare;\n\t\tSystem.out.println(com2.compare(12,3));\n\n\t}\n\t\n\t//Function中的R apply(T t)\n\t//Math中的Long round(Double d)\n\t@Test\n\tpublic void test4() {\n\t\tFunction<Double,Long> func = new Function<Double, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long apply(Double d) {\n\t\t\t\treturn Math.round(d);\n\t\t\t}\n\t\t};\n\n\t\tSystem.out.println(\"*******************\");\n\n\t\tFunction<Double,Long> func1 = d -> Math.round(d);\n\t\tSystem.out.println(func1.apply(12.3));\n\n\t\tSystem.out.println(\"*******************\");\n\n\t\tFunction<Double,Long> func2 = Math::round;\n\t\tSystem.out.println(func2.apply(12.6));\n\t}\n\n\t// 情况三：类 :: 实例方法  (有难度)\n\t// Comparator中的int comapre(T t1,T t2)  第一个参数T t1,也可以变成方法的调用者\n\t// String中的int t1.compareTo(t2)        看上面说的，t1变成了调用者等价于第一个参数T t1\n\t@Test\n\tpublic void test5() {\n\t\tComparator<String> com1 = (s1,s2) -> s1.compareTo(s2);\n\t\tSystem.out.println(com1.compare(\"abc\",\"abd\"));\n\n\t\tSystem.out.println(\"*******************\");\n\n\t\tComparator<String> com2 = String :: compareTo;\n\t\tSystem.out.println(com2.compare(\"abd\",\"abm\"));\n\t}\n\n\t//BiPredicate中的boolean test(T t1, T t2);\n\t//String中的boolean t1.equals(t2)\n\t@Test\n\tpublic void test6() {\n\t\tBiPredicate<String,String> pre1 = (s1,s2) -> s1.equals(s2);\n\t\tSystem.out.println(pre1.test(\"abc\",\"abc\"));\n\n\t\tSystem.out.println(\"*******************\");\n\t\tBiPredicate<String,String> pre2 = String :: equals;\n\t\tSystem.out.println(pre2.test(\"abc\",\"abd\"));\n\t}\n\t\n\t// Function中的R apply(T t)\n\t// Employee中的String getName();   第一个参数T t相当于方法调用者emp，返回值R和String对应\n\t@Test\n\tpublic void test7() {\n\t\tEmployee employee = new Employee(1001, \"Jerry\", 23, 6000);\n\n\n\t\tFunction<Employee,String> func1 = e -> e.getName();\n\t\tSystem.out.println(func1.apply(employee));\n\n\t\tSystem.out.println(\"*******************\");\n\n\n\t\tFunction<Employee,String> func2 = Employee::getName;\n\t\tSystem.out.println(func2.apply(employee));\n\n\n\t}\n\n}\n\n```\n\n\n\n\n\n# 构造器引用\n\n格式：ClassName :: new\n\n与函数式接口相结合，自动与函数式接口中方法兼容。可以把构造器引用赋值给定义的方法，要求构造器参数列表要与接口中抽象方法的参数列表一致！且方法的返回值即为构造器对应类的对象。\n\n\n\n```Java\n\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\n\n/**\n * 一、构造器引用\n *      和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。\n *      抽象方法的返回值类型即为构造器所属的类的类型\n *\n * 二、数组引用\n *     大家可以把数组看做是一个特殊的类，则写法与构造器引用一致。\n *\n */\npublic class ConstructorRefTest {\n\n    /**\n     * 构造器引用\n     * Supplier中的T get()\n     * Employee的空参构造器：Employee()\n     * 1、和方法引用一样的理解方法，你的get()方法没有参数，我的Employee()也没有参数。\n     * 2、你的get()方法有返回值T，我的Employee()方法返回值也是一个对象\n     * 3、所以刚好可以用  \n     */\n    @Test\n    public void test1(){\n\n        Supplier<Employee> sup = new Supplier<Employee>() {\n            @Override\n            public Employee get() {\n                return new Employee();\n            }\n        };\n        System.out.println(\"*******************\");\n\n        Supplier<Employee>  sup1 = () -> new Employee();\n        System.out.println(sup1.get());\n\n        System.out.println(\"*******************\");\n\n        Supplier<Employee>  sup2 = Employee :: new;\n        System.out.println(sup2.get());\n    }\n\n\t//Function中的R apply(T t)\n    @Test\n    public void test2(){\n        Function<Integer,Employee> func1 = id -> new Employee(id);\n        Employee employee = func1.apply(1001);\n        System.out.println(employee);\n\n        System.out.println(\"*******************\");\n\n        Function<Integer,Employee> func2 = Employee :: new;\n        Employee employee1 = func2.apply(1002);\n        System.out.println(employee1);\n\n    }\n\n\t//BiFunction中的R apply(T t,U u)\n    @Test\n    public void test3(){\n        BiFunction<Integer,String,Employee> func1 = (id,name) -> new Employee(id,name);\n        System.out.println(func1.apply(1001,\"Tom\"));\n\n        System.out.println(\"*******************\");\n\n        BiFunction<Integer,String,Employee> func2 = Employee :: new;\n        System.out.println(func2.apply(1002,\"Tom\"));\n\n    }\n\n\t//数组引用\n    //Function中的R apply(T t)\n    @Test\n    public void test4(){\n        Function<Integer,String[]> func1 = length -> new String[length];\n        String[] arr1 = func1.apply(5);\n        System.out.println(Arrays.toString(arr1));\n\n        System.out.println(\"*******************\");\n\n        Function<Integer,String[]> func2 = String[] :: new;\n        String[] arr2 = func2.apply(10);\n        System.out.println(Arrays.toString(arr2));\n\n    }\n}\n\n```\n\n\n\n# 强大的Stream API\n\n## Stream API说明\n\n- Java8中有两大最为重要的改变。第一个是 **Lambda** **表达式**；另外一个则是 **Stream API**。 \n\n- Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。\n\n- Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 **使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。**也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式\n\n\n\n## 为什么要使用Stream API\n\n- 实际开发中，项目中多数数据源都来自于Mysql，Oracle等，很多一些复杂的数据获取可以直接在sql层面去解决。但现在数据源可以更多了，有MongDB，Radis等，而这些NoSQL的数据本身不支持一些复杂的数据计算，这个时候就需要Java层面去处理。 \n\n- Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。\n\n\n\n## 什么是Stream\n\nStream到底是什么呢？\n\n是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。\n\n**“集合讲的是数据，Stream讲的是计算！”**\n\n**注意：**\n\n①Stream 自己不会存储元素。\n\n②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。 \n\n③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行\n\n\n\n\n\n**Stream** **的操作三个步骤**\n\n1、创建Stream\n\n一个数据源（如：集合、数组），获取一个流\n\n2、中间操作\n\n一个中间操作链，对数据源的数据进行处理\n\n3、终止操作(终端操作) \n\n一旦执行终止操作，就执行中间操作链，才产生结果【也就是所谓的延迟执行】。之后，不会再被使用\n\n\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0004.png\">\n\n\n\n\n\n## 创建Stream\n\n\n\n```java\n\npublic class StreamAPITest {\n\n    //创建 Stream方式一：通过集合\n    @Test\n    public void test1(){\n        List<Employee> employees = EmployeeData.getEmployees();\n\n//        default Stream<E> stream() : 返回一个顺序流，顺序流等会中间操作拿数据的时候按顺序拿\n        Stream<Employee> stream = employees.stream();\n\n//        default Stream<E> parallelStream() : 返回一个并行流\n        Stream<Employee> parallelStream = employees.parallelStream();\n\n    }\n\n    //创建 Stream方式二：通过数组\n    @Test\n    public void test2(){\n        int[] arr = new int[]{1,2,3,4,5,6};\n        //调用Arrays类的static <T> Stream<T> stream(T[] array): 返回一个流\n        IntStream stream = Arrays.stream(arr);\n\n        Employee e1 = new Employee(1001,\"Tom\");\n        Employee e2 = new Employee(1002,\"Jerry\");\n        Employee[] arr1 = new Employee[]{e1,e2};\n        Stream<Employee> stream1 = Arrays.stream(arr1);\n\n    }\n    //创建 Stream方式三：通过Stream的of()，通过显示值创建一个流。它可以接收任意数量的参数\n    @Test\n    public void test3(){\n\n        Stream<Integer> stream = Stream.of(1, 2, 3, 4, 5, 6);\n\n    }\n\n    //创建 Stream方式四：创建无限流【用的少，了解下就行】\n    @Test\n    public void test4(){\n\n//      迭代\n//      public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f)\n        //遍历前10个偶数\n        Stream.iterate(0, t -> t + 2).limit(10).forEach(System.out::println);\n\n\n//      生成\n//      public static<T> Stream<T> generate(Supplier<T> s)\n        Stream.generate(Math::random).limit(10).forEach(System.out::println);\n\n    }\n\n}\n\n```\n\n\n\n\n\n## 中间操作\n\n```Java\n\n/**\n * 测试Stream的中间操作\n */\npublic class StreamAPITest1 {\n\n    //1-筛选与切片\n    @Test\n    public void test1(){\n        List<Employee> list = EmployeeData.getEmployees();\n//        filter(Predicate p)——过滤   接收 Lambda ， 从流中排除某些元素。\n        Stream<Employee> stream = list.stream();\n        //练习：查询员工表中薪资大于7000的员工信息\n        /**\n         * List<String> filterStrs1 = filterString(list,s -> s.contains(\"京\"));\n         * 跟之前的这个lambda表达式代码是一个意思\n         */\n        stream.filter(e -> e.getSalary() > 7000).forEach(System.out::println);\n\n        System.out.println();\n//        limit(n)——截断流，使其元素不超过给定数量。\n        list.stream().limit(3).forEach(System.out::println);\n        System.out.println();\n\n        /*\n        skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，\n        则返回一个空流。与 limit(n) 互补\n        */\n        list.stream().skip(3).forEach(System.out::println);\n\n        System.out.println();\n//        distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素\n\n        list.add(new Employee(1010,\"刘强东\",40,8000));\n        list.add(new Employee(1010,\"刘强东\",41,8000));\n        list.add(new Employee(1010,\"刘强东\",40,8000));\n        list.add(new Employee(1010,\"刘强东\",40,8000));\n        list.add(new Employee(1010,\"刘强东\",40,8000));\n\n//        System.out.println(list);\n\n        list.stream().distinct().forEach(System.out::println);\n    }\n\n    //映射\n    @Test\n    public void test2(){\n        /*\n        map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应\n        用到每个元素上，并将其映射成一个新的元素。\n        */\n        List<String> list = Arrays.asList(\"aa\", \"bb\", \"cc\", \"dd\");\n        list.stream().map(str -> str.toUpperCase()).forEach(System.out::println);\n\n//        练习1：获取员工姓名长度大于3的员工的姓名。\n        List<Employee> employees = EmployeeData.getEmployees();\n        Stream<String> namesStream = employees.stream().map(Employee::getName);\n        namesStream.filter(name -> name.length() > 3).forEach(System.out::println);\n        System.out.println();\n        //练习2：\n        Stream<Stream<Character>> streamStream = list.stream().map(StreamAPITest1::fromStringToStream);\n        //这个还需要两层遍历\n        streamStream.forEach(s ->{\n            s.forEach(System.out::println);\n        });\n        System.out.println();\n        /*\n        flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连\n        接成一个流。flatMap一层遍历即可拿到想要的结果\n        */\n        Stream<Character> characterStream = list.stream().flatMap(StreamAPITest1::fromStringToStream);\n        characterStream.forEach(System.out::println);\n\n    }\n\n    //将字符串中的多个字符构成的集合转换为对应的Stream的实例\n    public static Stream<Character> fromStringToStream(String str){//aa\n        ArrayList<Character> list = new ArrayList<>();\n        for(Character c : str.toCharArray()){\n            list.add(c);\n        }\n       return list.stream();\n\n    }\n\n\n    //3-排序\n    @Test\n    public void test4(){\n//        sorted()——自然排序\n        List<Integer> list = Arrays.asList(12, 43, 65, 34, 87, 0, -98, 7);\n        list.stream().sorted().forEach(System.out::println);\n        //抛异常，原因:Employee没有实现Comparable接口\n//        List<Employee> employees = EmployeeData.getEmployees();\n//        employees.stream().sorted().forEach(System.out::println);\n\n\n//        sorted(Comparator com)——定制排序\n\n        List<Employee> employees = EmployeeData.getEmployees();\n        employees.stream().sorted( (e1,e2) -> {\n\n           int ageValue = Integer.compare(e1.getAge(),e2.getAge());\n           if(ageValue != 0){\n               return ageValue;\n           }else{\n               return -Double.compare(e1.getSalary(),e2.getSalary());\n           }\n\n        }).forEach(System.out::println);\n    }\n\n}\n\n```\n\n\n\n## 终止操作\n\n\n\n```Java\n\n/**\n * 测试Stream的终止操作\n *\n */\npublic class StreamAPITest2 {\n\n    //1-匹配与查找\n    @Test\n    public void test1(){\n        List<Employee> employees = EmployeeData.getEmployees();\n\n//        allMatch(Predicate p)——检查是否匹配所有元素。\n//          练习：是否所有的员工的年龄都大于18\n        boolean allMatch = employees.stream().allMatch(e -> e.getAge() > 18);\n        System.out.println(allMatch);\n\n//        anyMatch(Predicate p)——检查是否至少匹配一个元素。\n//         练习：是否存在员工的工资大于 10000\n        boolean anyMatch = employees.stream().anyMatch(e -> e.getSalary() > 10000);\n        System.out.println(anyMatch);\n\n//        noneMatch(Predicate p)——检查是否没有匹配的元素。\n//          练习：是否存在员工姓“雷”\n        boolean noneMatch = employees.stream().noneMatch(e -> e.getName().startsWith(\"雷\"));\n        System.out.println(noneMatch);\n//        findFirst——返回第一个元素\n        Optional<Employee> employee = employees.stream().findFirst();\n        System.out.println(employee);\n//        findAny——返回当前流中的任意元素\n        Optional<Employee> employee1 = employees.parallelStream().findAny();\n        System.out.println(employee1);\n\n    }\n\n    @Test\n    public void test2(){\n        List<Employee> employees = EmployeeData.getEmployees();\n        // count——返回流中元素的总个数\n        long count = employees.stream().filter(e -> e.getSalary() > 5000).count();\n        System.out.println(count);\n//        max(Comparator c)——返回流中最大值\n//        练习：返回最高的工资：\n        Stream<Double> salaryStream = employees.stream().map(e -> e.getSalary());\n        Optional<Double> maxSalary = salaryStream.max(Double::compare);\n        System.out.println(maxSalary);\n//        min(Comparator c)——返回流中最小值\n//        练习：返回最低工资的员工\n        Optional<Employee> employee = employees.stream().min((e1, e2) -> Double.compare(e1.getSalary(), e2.getSalary()));\n        System.out.println(employee);\n        System.out.println();\n//        forEach(Consumer c)——内部迭代\n        employees.stream().forEach(System.out::println);\n\n        //使用集合的遍历操作\n        employees.forEach(System.out::println);\n    }\n\n    //2-归约\n    @Test\n    public void test3(){\n//        reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T\n//        练习1：计算1-10的自然数的和\n        List<Integer> list = Arrays.asList(1,2,3,4,5,6,7,8,9,10);\n        Integer sum = list.stream().reduce(0, Integer::sum);\n        System.out.println(sum);\n\n\n//        reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional<T>\n//        练习2：计算公司所有员工工资的总和\n        List<Employee> employees = EmployeeData.getEmployees();\n        Stream<Double> salaryStream = employees.stream().map(Employee::getSalary);\n//        Optional<Double> sumMoney = salaryStream.reduce(Double::sum);\n        Optional<Double> sumMoney = salaryStream.reduce((d1,d2) -> d1 + d2);\n        System.out.println(sumMoney.get());\n\n    }\n\n    //3-收集\n    @Test\n    public void test4(){\n// collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法\n//        练习1：查找工资大于6000的员工，结果返回为一个List或Set\n\n        List<Employee> employees = EmployeeData.getEmployees();\n        List<Employee> employeeList = employees.stream().filter(e -> e.getSalary() > 6000).collect(Collectors.toList());\n\n        employeeList.forEach(System.out::println);\n        System.out.println();\n        Set<Employee> employeeSet = employees.stream().filter(e -> e.getSalary() > 6000).collect(Collectors.toSet());\n\n        employeeSet.forEach(System.out::println);\n\n\n\n\n    }\n}\n\n```\n\n\n\n# Optional类\n\n## 什么是Optional？\n\n\n\n- 到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分。\n\n- Optional<T> 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。 \n\n- Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。\n\n\n\n## 常用API\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0005.png\">\n\n\n\n\n\n## 举例\n\n首先准备两个类\n\n```java\n\npublic class Boy {\n    private Girl girl;\n\n    @Override\n    public String toString() {\n        return \"Boy{\" +\n                \"girl=\" + girl +\n                '}';\n    }\n\n    public Girl getGirl() {\n        return girl;\n    }\n\n    public void setGirl(Girl girl) {\n        this.girl = girl;\n    }\n\n    public Boy() {\n\n    }\n\n    public Boy(Girl girl) {\n\n        this.girl = girl;\n    }\n}\n```\n\n\n\n```java\npublic class Girl {\n\n    private String name;\n\n    @Override\n    public String toString() {\n        return \"Girl{\" +\n                \"name='\" + name + '\\'' +\n                '}';\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Girl() {\n\n    }\n\n    public Girl(String name) {\n\n        this.name = name;\n    }\n}\n```\n\n\n\n这里只是简单的测试两个API\n\n```Java\n/**\n * Optional类：为了在程序中避免出现空指针异常而创建的。\n *\n * 常用的方法：ofNullable(T t)\n *            orElse(T t)\n *\n */\npublic class OptionalTest {\n\n/*\nOptional.of(T t) : 创建一个 Optional 实例，t必须非空；\nOptional.empty() : 创建一个空的 Optional 实例\nOptional.ofNullable(T t)：t可以为null\n\n */\n    @Test\n    public void test1(){\n        Girl girl = new Girl();\n//        girl = null;\n        //of(T t):保证t是非空的\n        Optional<Girl> optionalGirl = Optional.of(girl);\n\n    }\n\n    @Test\n    public void test2(){\n        Girl girl = new Girl();\n//        girl = null;\n        //ofNullable(T t)：t可以为null\n        Optional<Girl> optionalGirl = Optional.ofNullable(girl);\n        System.out.println(optionalGirl);\n        //orElse(T t1):如果单前的Optional内部封装的t是非空的，则返回内部的t.\n        //如果内部的t是空的，则返回orElse()方法中的参数t1.\n        Girl girl1 = optionalGirl.orElse(new Girl(\"赵丽颖\"));\n        System.out.println(girl1);\n\n    }\n}\n```\n\n\n\n**实际场景使用**\n\n可能出现空指针的例子：\n\n```java\npublic String getGirlName(Boy boy){\n        return boy.getGirl().getName();\n    }\n\n    @Test\n    public void test3(){\n        Boy boy = new Boy();\n        boy = null;\n        String girlName = getGirlName(boy);\n        System.out.println(girlName);\n\n    }\n```\n\n\n\n结果：\n\n```\njava.lang.NullPointerException\n\tat com.atguigu.java4.OptionalTest.getGirlName(OptionalTest.java:47)\n\tat com.atguigu.java4.OptionalTest.test3(OptionalTest.java:54)\n...\n...\n\nProcess finished with exit code -1\n```\n\n\n\n没有Optional的解决办法，但是如果调用层数过多，就得一层一层判断是否为null，写起来很麻烦。\n\n```Java\n//优化以后的getGirlName():\n    public String getGirlName1(Boy boy){\n        if(boy != null){\n            Girl girl = boy.getGirl();\n            if(girl != null){\n                return girl.getName();\n            }\n        }\n\n        return null;\n\n    }\n@Test\n    public void test4(){\n        Boy boy = new Boy();\n        boy = null;\n        String girlName = getGirlName1(boy);\n        System.out.println(girlName);\n\n    }\n```\n\n\n\n使用Optional解决问题：\n\n```Java\n //使用Optional类的getGirlName():\n    public String getGirlName2(Boy boy){\n\n        Optional<Boy> boyOptional = Optional.ofNullable(boy);\n        //此时的boy1一定非空\n        Boy boy1 = boyOptional.orElse(new Boy(new Girl(\"迪丽热巴\")));\n\n        Girl girl = boy1.getGirl();\n\n        Optional<Girl> girlOptional = Optional.ofNullable(girl);\n        //girl1一定非空\n        Girl girl1 = girlOptional.orElse(new Girl(\"古力娜扎\"));\n\n        return girl1.getName();\n    }\n\n    @Test\n    public void test5(){\n        Boy boy = null;\n        boy = new Boy();\n        boy = new Boy(new Girl(\"苍老师\"));\n        String girlName = getGirlName2(boy);\n        System.out.println(girlName);\n\n    }\n```\n\n这种是绝对不会出现空指针的。\n\n\n\n# 接口的增强\n\n```\nJDK7及以前：只能定义全局常量和抽象方法\n  >全局常量：public static final的.但是书写时，可以省略不写\n  >抽象方法：public abstract的\n  \t\t\t\nJDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法\n```\n\n\n\n```java\n/*\n * JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法\n */\npublic interface CompareA {\n\n    //静态方法\n    public static void method1() {\n\n        System.out.println(\"CompareA:北京\");\n    }\n\n    //默认方法\n    public default void method2() {\n        System.out.println(\"CompareA：上海\");\n    }\n    //接口中的public 可以省略，自动就是public\n    default void method3() {\n        System.out.println(\"CompareA：上海\");\n    }\n}\n```\n\n\n\n```java\npublic class SuperClass {\n\t\n\tpublic void method3(){\n\t\tSystem.out.println(\"SuperClass:北京\");\n\t}\n\t\n}\n```\n\n\n\n```java\npublic interface CompareB {\n\t\n\tdefault void method3(){\n\t\tSystem.out.println(\"CompareB：上海\");\n\t}\n\t\n}\n```\n\n\n\n\n\n```java\npublic class SubClassTest {\n\t\n\tpublic static void main(String[] args) {\n\t\tSubClass s = new SubClass();\n\t\t\n//\t\ts.method1();\n//\t\tSubClass.method1();\n\t\t//知识点1：接口中定义的静态方法，只能通过接口来调用。实现类用不了\n\t\tCompareA.method1();\n\t\t//知识点2：通过实现类的对象，可以调用接口中的默认方法。\n\t\t//如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法\n\t\ts.method2();\n\t\t//知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，\n\t\t//那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。-->类优先原则\n\t\t//知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，\n\t\t//那么在实现类没有重写此方法的情况下，报错。-->接口冲突。\n\t\t//这就需要我们必须在实现类中重写此方法\n\t\ts.method3();\n\t\t\n\t}\n\t\n}\n\nclass SubClass extends SuperClass implements CompareA,CompareB{\n\t\n\tpublic void method2(){\n\t\tSystem.out.println(\"SubClass：上海\");\n\t}\n\t\n\tpublic void method3(){\n\t\tSystem.out.println(\"SubClass：深圳\");\n\t}\n\t\n\t//知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法\n\tpublic void myMethod(){\n\t\tmethod3();//调用自己定义的重写的方法\n\t\tsuper.method3();//调用的是父类中声明的\n\t\t//调用接口中的默认方法\n\t\tCompareA.super.method3();\n\t\tCompareB.super.method3();\n\t}\n}\n```\n","slug":"2021-04-14-Java8新特性","published":1,"updated":"2024-04-14T14:33:03.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv9oiygh0000f0vdcvv9g7k1","content":"<h1 id=\"Java8新特性纵览\"><a href=\"#Java8新特性纵览\" class=\"headerlink\" title=\"Java8新特性纵览\"></a>Java8新特性纵览</h1><blockquote>\n<p>关于Java8新特性的学习与记录，资料来源于互联网。</p>\n</blockquote>\n<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><h2 id=\"为什么使用Lambda表达式？\"><a href=\"#为什么使用Lambda表达式？\" class=\"headerlink\" title=\"为什么使用Lambda表达式？\"></a>为什么使用Lambda表达式？</h2><ul>\n<li>Lambda 是一个<strong>匿名函数</strong>，我们可以把 Lambda 表达式理解为是<strong>一段可以传递的代码</strong>（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</li>\n<li>在Java8之后的很多源码里用到了Lambda表达式，不学的话可能看不懂源码。</li>\n</ul>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//原始写法</span></span><br><span class=\"line\">       <span class=\"type\">Runnable</span> <span class=\"variable\">r1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">               System.out.println(<span class=\"string\">&quot;我爱北京天安门&quot;</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">       r1.run();</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;***********************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//lambda表达式，可以表达一样的意思</span></span><br><span class=\"line\">       <span class=\"type\">Runnable</span> <span class=\"variable\">r2</span> <span class=\"operator\">=</span> () -&gt; System.out.println(<span class=\"string\">&quot;我爱北京故宫&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       r2.run();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       Comparator&lt;Integer&gt; com1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> Integer.compare(o1,o2);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">compare1</span> <span class=\"operator\">=</span> com1.compare(<span class=\"number\">12</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">       System.out.println(compare1);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;***********************&quot;</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//Lambda表达式的写法</span></span><br><span class=\"line\">       Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">compare2</span> <span class=\"operator\">=</span> com2.compare(<span class=\"number\">32</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">       System.out.println(compare2);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;***********************&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">//方法引用</span></span><br><span class=\"line\">       Comparator&lt;Integer&gt; com3 = Integer :: compare;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">compare3</span> <span class=\"operator\">=</span> com3.compare(<span class=\"number\">32</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">       System.out.println(compare3);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Lambda语法规则\"><a href=\"#Lambda语法规则\" class=\"headerlink\" title=\"Lambda语法规则\"></a>Lambda语法规则</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Lambda表达式的使用</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.举例： (o1,o2) -&gt; Integer.compare(o1,o2);</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.格式：</span></span><br><span class=\"line\"><span class=\"comment\"> * -&gt; :lambda操作符 或 箭头操作符</span></span><br><span class=\"line\"><span class=\"comment\"> * -&gt;左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表）</span></span><br><span class=\"line\"><span class=\"comment\"> * -&gt;右边：lambda体 （其实就是重写的抽象方法的方法体）</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. Lambda表达式的使用：（分为6种情况介绍）</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 总结：</span></span><br><span class=\"line\"><span class=\"comment\"> * -&gt;左边：lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只有一个参数，其一对()也</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以省略</span></span><br><span class=\"line\"><span class=\"comment\"> * -&gt;右边：lambda体应该使用一对&#123;&#125;包裹；如果lambda体只有一条执行语句（可能是return语句），省略这一</span></span><br><span class=\"line\"><span class=\"comment\"> 对&#123;&#125;和return关键字</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.Lambda表达式的本质：作为函数式接口的实例</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 5. 如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。我们可以在一个接口上</span></span><br><span class=\"line\"><span class=\"comment\"> 使用 <span class=\"doctag\">@FunctionalInterface</span> 注解，</span></span><br><span class=\"line\"><span class=\"comment\"> * 这样做可以检查它是否是一个函数式接口。</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 6. 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LambdaTest1</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//语法格式一：无参，无返回值</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">r1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;我爱北京天安门&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        r1.run();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;***********************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">r2</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我爱北京故宫&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        r2.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//语法格式二：Lambda 需要一个参数，但是没有返回值。</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; con = <span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">                System.out.println(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con.accept(<span class=\"string\">&quot;谎言和誓言的区别是什么？&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con1.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con1.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; con2 = (s) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con2.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();<span class=\"comment\">//类型推断</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;<span class=\"comment\">//类型推断</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//语法格式四：Lambda 若只需要一个参数时，参数的小括号可以省略</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test5</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Consumer&lt;String&gt; con1 = (s) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con1.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; con2 = s -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con2.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//语法格式五：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test6</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Comparator&lt;Integer&gt; com1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> &#123;</span><br><span class=\"line\">                System.out.println(o1);</span><br><span class=\"line\">                System.out.println(o2);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.compareTo(o2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(com1.compare(<span class=\"number\">12</span>, <span class=\"number\">21</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*****************************&quot;</span>);</span><br><span class=\"line\">        Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(o1);</span><br><span class=\"line\">            System.out.println(o2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.compareTo(o2);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(com2.compare(<span class=\"number\">12</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//语法格式六：当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test7</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Comparator&lt;Integer&gt; com1 = (o1, o2) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.compareTo(o2);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(com1.compare(<span class=\"number\">12</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*****************************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; o1.compareTo(o2);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(com2.compare(<span class=\"number\">12</span>, <span class=\"number\">21</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test8</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Consumer&lt;String&gt; con1 = s -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con1.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*****************************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; con2 = s -&gt; System.out.println(s);</span><br><span class=\"line\"></span><br><span class=\"line\">        con2.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h1><h2 id=\"什么是函数式-Functional-接口\"><a href=\"#什么是函数式-Functional-接口\" class=\"headerlink\" title=\"什么是函数式(Functional)接口\"></a>什么是函数式(Functional)接口</h2><ul>\n<li><p>只包含一个抽象方法的接口，称为<strong>函数式接口</strong>。 </p>\n</li>\n<li><p>你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。</p>\n</li>\n<li><p>我们可以在一个接口上使用 <strong>@FunctionalInterface</strong> 注解，这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</p>\n</li>\n<li><p>在java.util.function包下定义了Java 8 的丰富的函数式接口</p>\n</li>\n</ul>\n<h2 id=\"如何理解函数式接口\"><a href=\"#如何理解函数式接口\" class=\"headerlink\" title=\"如何理解函数式接口\"></a>如何理解函数式接口</h2><ul>\n<li>Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP)编程是一切。但是随着python、scala等语言的兴起和新技术的挑战，Java不得不做出调整以便支持更加广泛的技术要求，也即java不但可以支持OOP还可以支持OOF（面向函数编程） </li>\n<li>在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型——函数式接口。 </li>\n<li>简单的说，在Java8中，Lambda表达式就是一个函数式接口的实例。这就是Lambda表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口的实例，那么该对象就可以用Lambda表达式来表示。</li>\n<li>所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。</li>\n</ul>\n<h2 id=\"Java内置函数式接口\"><a href=\"#Java内置函数式接口\" class=\"headerlink\" title=\"Java内置函数式接口\"></a>Java内置函数式接口</h2><p><strong>核心函数式接口</strong></p>\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0002.png\">\n\n\n\n<p><strong>其它函数式接口</strong></p>\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0003.png\">\n\n\n\n\n\n<p><strong>Consumer</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       happyTime(<span class=\"number\">500</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>&lt;Double&gt;() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Double aDouble)</span> &#123;</span><br><span class=\"line\">               System.out.println(<span class=\"string\">&quot;学习太累了，去天上人间买了瓶矿泉水，价格为：&quot;</span> + aDouble);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;********************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       happyTime(<span class=\"number\">400</span>,money -&gt; System.out.println(<span class=\"string\">&quot;学习太累了，去天上人间喝了口水，价格为：&quot;</span> + money));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">happyTime</span><span class=\"params\">(<span class=\"type\">double</span> money, Consumer&lt;Double&gt; con)</span>&#123;</span><br><span class=\"line\">       con.accept(money);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>结果：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">学习太累了，去天上人间买了瓶矿泉水，价格为：<span class=\"number\">500.0</span></span><br><span class=\"line\">********************</span><br><span class=\"line\">学习太累了，去天上人间喝了口水，价格为：<span class=\"number\">400.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Predicate</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;北京&quot;</span>,<span class=\"string\">&quot;南京&quot;</span>,<span class=\"string\">&quot;天津&quot;</span>,<span class=\"string\">&quot;东京&quot;</span>,<span class=\"string\">&quot;西京&quot;</span>,<span class=\"string\">&quot;普京&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; filterStrs = filterString(list, <span class=\"keyword\">new</span> <span class=\"title class_\">Predicate</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">test</span><span class=\"params\">(String s)</span> &#123;<span class=\"comment\">//这里是定义一个校验规则</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> s.contains(<span class=\"string\">&quot;京&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(filterStrs);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//用lambda表达式会很简单</span></span><br><span class=\"line\">        List&lt;String&gt; filterStrs1 = filterString(list,s -&gt; s.contains(<span class=\"string\">&quot;京&quot;</span>));</span><br><span class=\"line\">        System.out.println(filterStrs1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据给定的规则，过滤集合中的字符串。此规则由Predicate的方法决定</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">filterString</span><span class=\"params\">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayList&lt;String&gt; filterList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s : list)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pre.test(s))&#123;</span><br><span class=\"line\">                filterList.add(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterList;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>结果：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[北京, 南京, 东京, 西京, 普京]</span><br><span class=\"line\">[北京, 南京, 东京, 西京, 普京]</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"自定义函数式接口\"><a href=\"#自定义函数式接口\" class=\"headerlink\" title=\"自定义函数式接口\"></a>自定义函数式接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义函数式接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 只是说加上<span class=\"doctag\">@FunctionalInterface</span>之后可以校验</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyFunInterface</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getValue</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这个方法的第一个参数是lambda表达式，相当于是实例化了那个函数式接口</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> toUpperString(str -&gt; str.toUpperCase(), <span class=\"string\">&quot;abcd&quot;</span>);</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">toUpperString</span><span class=\"params\">(MyFunInterface&lt;String&gt; mf,String str)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mf.getValue(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h1><ul>\n<li><p>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</p>\n</li>\n<li><p>方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。</p>\n</li>\n<li><p>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致！</p>\n</li>\n<li><p>格式：使用操作符 “::” 将类(或对象) 与 方法名分隔开来。</p>\n</li>\n<li><p>如下三种主要使用情况： </p>\n<ul>\n<li><p>对象 :: 实例方法名</p>\n</li>\n<li><p>类 :: 静态方法名</p>\n</li>\n<li><p>类 :: 实例方法名</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>我们直接拿例子来说明情况，先提前准备两个类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getSalary</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSalary</span><span class=\"params\">(<span class=\"type\">double</span> salary)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.salary = salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Employee().....&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Employee(int id).....&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">(<span class=\"type\">int</span> id, String name)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">(<span class=\"type\">int</span> id, String name, <span class=\"type\">int</span> age, <span class=\"type\">double</span> salary)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.salary = salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Employee&#123;&quot;</span> + <span class=\"string\">&quot;id=&quot;</span> + id + <span class=\"string\">&quot;, name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> + <span class=\"string\">&quot;, age=&quot;</span> + age + <span class=\"string\">&quot;, salary=&quot;</span> + salary + <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> == o)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (o == <span class=\"literal\">null</span> || getClass() != o.getClass())</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> (Employee) o;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (id != employee.id)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (age != employee.age)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Double.compare(employee.salary, salary) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name != <span class=\"literal\">null</span> ? name.equals(employee.name) : employee.name == <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> result;</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> temp;</span><br><span class=\"line\">\t\tresult = id;</span><br><span class=\"line\">\t\tresult = <span class=\"number\">31</span> * result + (name != <span class=\"literal\">null</span> ? name.hashCode() : <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tresult = <span class=\"number\">31</span> * result + age;</span><br><span class=\"line\">\t\ttemp = Double.doubleToLongBits(salary);</span><br><span class=\"line\">\t\tresult = <span class=\"number\">31</span> * result + (<span class=\"type\">int</span>) (temp ^ (temp &gt;&gt;&gt; <span class=\"number\">32</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 提供用于测试的数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeData</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Employee&gt; <span class=\"title function_\">getEmployees</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      List&lt;Employee&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">      </span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1001</span>, <span class=\"string\">&quot;马化腾&quot;</span>, <span class=\"number\">34</span>, <span class=\"number\">6000.38</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1002</span>, <span class=\"string\">&quot;马云&quot;</span>, <span class=\"number\">12</span>, <span class=\"number\">9876.12</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1003</span>, <span class=\"string\">&quot;刘强东&quot;</span>, <span class=\"number\">33</span>, <span class=\"number\">3000.82</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1004</span>, <span class=\"string\">&quot;雷军&quot;</span>, <span class=\"number\">26</span>, <span class=\"number\">7657.37</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1005</span>, <span class=\"string\">&quot;李彦宏&quot;</span>, <span class=\"number\">65</span>, <span class=\"number\">5555.32</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1006</span>, <span class=\"string\">&quot;比尔盖茨&quot;</span>, <span class=\"number\">42</span>, <span class=\"number\">9500.43</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1007</span>, <span class=\"string\">&quot;任正非&quot;</span>, <span class=\"number\">26</span>, <span class=\"number\">4333.32</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1008</span>, <span class=\"string\">&quot;扎克伯格&quot;</span>, <span class=\"number\">35</span>, <span class=\"number\">2500.32</span>));</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>下面来通过实际例子讲解方法引用：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法引用的使用</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以</span></span><br><span class=\"line\"><span class=\"comment\"> *   方法引用，也是函数式接口的实例。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 使用格式：  类(或对象) :: 方法名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 4. 具体分为如下的三种情况：</span></span><br><span class=\"line\"><span class=\"comment\"> *    情况1     对象 :: 非静态方法</span></span><br><span class=\"line\"><span class=\"comment\"> *    情况2     类 :: 静态方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *    情况3     类 :: 非静态方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 5. 方法引用使用的要求：</span></span><br><span class=\"line\"><span class=\"comment\"> * \t接口中的抽象方法的形参列表和返回值类型</span></span><br><span class=\"line\"><span class=\"comment\"> * \t与</span></span><br><span class=\"line\"><span class=\"comment\"> * \t方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MethodRefTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 情况一：对象 :: 实例方法</span></span><br><span class=\"line\">\t<span class=\"comment\">//Consumer中的void accept(T t)</span></span><br><span class=\"line\">\t<span class=\"comment\">//PrintStream中的void println(T t)</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tConsumer&lt;String&gt; con1 = str -&gt; System.out.println(str);</span><br><span class=\"line\">\t\tcon1.accept(<span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">PrintStream</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> System.out;</span><br><span class=\"line\">\t\tConsumer&lt;String&gt; con2 = ps::println;</span><br><span class=\"line\">\t\tcon2.accept(<span class=\"string\">&quot;beijing&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//Supplier中的T get()</span></span><br><span class=\"line\">\t<span class=\"comment\">//Employee中的String getName()</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Employee</span> <span class=\"variable\">emp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1001</span>,<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"number\">23</span>,<span class=\"number\">5600</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSupplier&lt;String&gt; sup1 = () -&gt; emp.getName();</span><br><span class=\"line\">\t\tSystem.out.println(sup1.get());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\">\t\tSupplier&lt;String&gt; sup2 = emp::getName;</span><br><span class=\"line\">\t\tSystem.out.println(sup2.get());</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 情况二：类 :: 静态方法</span></span><br><span class=\"line\">\t<span class=\"comment\">//Comparator中的int compare(T t1,T t2)</span></span><br><span class=\"line\">\t<span class=\"comment\">//Integer中的int compare(T t1,T t2)</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tComparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);</span><br><span class=\"line\">\t\tSystem.out.println(com1.compare(<span class=\"number\">12</span>,<span class=\"number\">21</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tComparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class=\"line\">\t\tSystem.out.println(com2.compare(<span class=\"number\">12</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//Function中的R apply(T t)</span></span><br><span class=\"line\">\t<span class=\"comment\">//Math中的Long round(Double d)</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tFunction&lt;Double,Long&gt; func = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>&lt;Double, Long&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> Long <span class=\"title function_\">apply</span><span class=\"params\">(Double d)</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> Math.round(d);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFunction&lt;Double,Long&gt; func1 = d -&gt; Math.round(d);</span><br><span class=\"line\">\t\tSystem.out.println(func1.apply(<span class=\"number\">12.3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFunction&lt;Double,Long&gt; func2 = Math::round;</span><br><span class=\"line\">\t\tSystem.out.println(func2.apply(<span class=\"number\">12.6</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 情况三：类 :: 实例方法  (有难度)</span></span><br><span class=\"line\">\t<span class=\"comment\">// Comparator中的int comapre(T t1,T t2)  第一个参数T t1,也可以变成方法的调用者</span></span><br><span class=\"line\">\t<span class=\"comment\">// String中的int t1.compareTo(t2)        看上面说的，t1变成了调用者等价于第一个参数T t1</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test5</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tComparator&lt;String&gt; com1 = (s1,s2) -&gt; s1.compareTo(s2);</span><br><span class=\"line\">\t\tSystem.out.println(com1.compare(<span class=\"string\">&quot;abc&quot;</span>,<span class=\"string\">&quot;abd&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tComparator&lt;String&gt; com2 = String :: compareTo;</span><br><span class=\"line\">\t\tSystem.out.println(com2.compare(<span class=\"string\">&quot;abd&quot;</span>,<span class=\"string\">&quot;abm&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class=\"line\">\t<span class=\"comment\">//String中的boolean t1.equals(t2)</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test6</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tBiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);</span><br><span class=\"line\">\t\tSystem.out.println(pre1.test(<span class=\"string\">&quot;abc&quot;</span>,<span class=\"string\">&quot;abc&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\">\t\tBiPredicate&lt;String,String&gt; pre2 = String :: equals;</span><br><span class=\"line\">\t\tSystem.out.println(pre2.test(<span class=\"string\">&quot;abc&quot;</span>,<span class=\"string\">&quot;abd&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Function中的R apply(T t)</span></span><br><span class=\"line\">\t<span class=\"comment\">// Employee中的String getName();   第一个参数T t相当于方法调用者emp，返回值R和String对应</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test7</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1001</span>, <span class=\"string\">&quot;Jerry&quot;</span>, <span class=\"number\">23</span>, <span class=\"number\">6000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFunction&lt;Employee,String&gt; func1 = e -&gt; e.getName();</span><br><span class=\"line\">\t\tSystem.out.println(func1.apply(employee));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFunction&lt;Employee,String&gt; func2 = Employee::getName;</span><br><span class=\"line\">\t\tSystem.out.println(func2.apply(employee));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"构造器引用\"><a href=\"#构造器引用\" class=\"headerlink\" title=\"构造器引用\"></a>构造器引用</h1><p>格式：ClassName :: new</p>\n<p>与函数式接口相结合，自动与函数式接口中方法兼容。可以把构造器引用赋值给定义的方法，要求构造器参数列表要与接口中抽象方法的参数列表一致！且方法的返回值即为构造器对应类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.BiFunction;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一、构造器引用</span></span><br><span class=\"line\"><span class=\"comment\"> *      和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。</span></span><br><span class=\"line\"><span class=\"comment\"> *      抽象方法的返回值类型即为构造器所属的类的类型</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 二、数组引用</span></span><br><span class=\"line\"><span class=\"comment\"> *     大家可以把数组看做是一个特殊的类，则写法与构造器引用一致。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstructorRefTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造器引用</span></span><br><span class=\"line\"><span class=\"comment\">     * Supplier中的T get()</span></span><br><span class=\"line\"><span class=\"comment\">     * Employee的空参构造器：Employee()</span></span><br><span class=\"line\"><span class=\"comment\">     * 1、和方法引用一样的理解方法，你的get()方法没有参数，我的Employee()也没有参数。</span></span><br><span class=\"line\"><span class=\"comment\">     * 2、你的get()方法有返回值T，我的Employee()方法返回值也是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 3、所以刚好可以用  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Supplier&lt;Employee&gt; sup = <span class=\"keyword\">new</span> <span class=\"title class_\">Supplier</span>&lt;Employee&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Employee <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Supplier&lt;Employee&gt;  sup1 = () -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">        System.out.println(sup1.get());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Supplier&lt;Employee&gt;  sup2 = Employee :: <span class=\"keyword\">new</span>;</span><br><span class=\"line\">        System.out.println(sup2.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Function中的R apply(T t)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Function&lt;Integer,Employee&gt; func1 = id -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(id);</span><br><span class=\"line\">        <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> func1.apply(<span class=\"number\">1001</span>);</span><br><span class=\"line\">        System.out.println(employee);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Function&lt;Integer,Employee&gt; func2 = Employee :: <span class=\"keyword\">new</span>;</span><br><span class=\"line\">        <span class=\"type\">Employee</span> <span class=\"variable\">employee1</span> <span class=\"operator\">=</span> func2.apply(<span class=\"number\">1002</span>);</span><br><span class=\"line\">        System.out.println(employee1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//BiFunction中的R apply(T t,U u)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        BiFunction&lt;Integer,String,Employee&gt; func1 = (id,name) -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(id,name);</span><br><span class=\"line\">        System.out.println(func1.apply(<span class=\"number\">1001</span>,<span class=\"string\">&quot;Tom&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        BiFunction&lt;Integer,String,Employee&gt; func2 = Employee :: <span class=\"keyword\">new</span>;</span><br><span class=\"line\">        System.out.println(func2.apply(<span class=\"number\">1002</span>,<span class=\"string\">&quot;Tom&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//数组引用</span></span><br><span class=\"line\">    <span class=\"comment\">//Function中的R apply(T t)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Function&lt;Integer,String[]&gt; func1 = length -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[length];</span><br><span class=\"line\">        String[] arr1 = func1.apply(<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr1));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Function&lt;Integer,String[]&gt; func2 = String[] :: <span class=\"keyword\">new</span>;</span><br><span class=\"line\">        String[] arr2 = func2.apply(<span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr2));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"强大的Stream-API\"><a href=\"#强大的Stream-API\" class=\"headerlink\" title=\"强大的Stream API\"></a>强大的Stream API</h1><h2 id=\"Stream-API说明\"><a href=\"#Stream-API说明\" class=\"headerlink\" title=\"Stream API说明\"></a>Stream API说明</h2><ul>\n<li><p>Java8中有两大最为重要的改变。第一个是 <strong>Lambda</strong> <strong>表达式</strong>；另外一个则是 <strong>Stream API</strong>。 </p>\n</li>\n<li><p>Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p>\n</li>\n<li><p>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 <strong>使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。</strong>也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式</p>\n</li>\n</ul>\n<h2 id=\"为什么要使用Stream-API\"><a href=\"#为什么要使用Stream-API\" class=\"headerlink\" title=\"为什么要使用Stream API\"></a>为什么要使用Stream API</h2><ul>\n<li><p>实际开发中，项目中多数数据源都来自于Mysql，Oracle等，很多一些复杂的数据获取可以直接在sql层面去解决。但现在数据源可以更多了，有MongDB，Radis等，而这些NoSQL的数据本身不支持一些复杂的数据计算，这个时候就需要Java层面去处理。 </p>\n</li>\n<li><p>Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。</p>\n</li>\n</ul>\n<h2 id=\"什么是Stream\"><a href=\"#什么是Stream\" class=\"headerlink\" title=\"什么是Stream\"></a>什么是Stream</h2><p>Stream到底是什么呢？</p>\n<p>是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。</p>\n<p><strong>“集合讲的是数据，Stream讲的是计算！”</strong></p>\n<p><strong>注意：</strong></p>\n<p>①Stream 自己不会存储元素。</p>\n<p>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。 </p>\n<p>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行</p>\n<p><strong>Stream</strong> <strong>的操作三个步骤</strong></p>\n<p>1、创建Stream</p>\n<p>一个数据源（如：集合、数组），获取一个流</p>\n<p>2、中间操作</p>\n<p>一个中间操作链，对数据源的数据进行处理</p>\n<p>3、终止操作(终端操作) </p>\n<p>一旦执行终止操作，就执行中间操作链，才产生结果【也就是所谓的延迟执行】。之后，不会再被使用</p>\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0004.png\">\n\n\n\n\n\n<h2 id=\"创建Stream\"><a href=\"#创建Stream\" class=\"headerlink\" title=\"创建Stream\"></a>创建Stream</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StreamAPITest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建 Stream方式一：通过集合</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        default Stream&lt;E&gt; stream() : 返回一个顺序流，顺序流等会中间操作拿数据的时候按顺序拿</span></span><br><span class=\"line\">        Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class=\"line\">        Stream&lt;Employee&gt; parallelStream = employees.parallelStream();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建 Stream方式二：通过数组</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span></span><br><span class=\"line\">        <span class=\"type\">IntStream</span> <span class=\"variable\">stream</span> <span class=\"operator\">=</span> Arrays.stream(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Employee</span> <span class=\"variable\">e1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1001</span>,<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Employee</span> <span class=\"variable\">e2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1002</span>,<span class=\"string\">&quot;Jerry&quot;</span>);</span><br><span class=\"line\">        Employee[] arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>[]&#123;e1,e2&#125;;</span><br><span class=\"line\">        Stream&lt;Employee&gt; stream1 = Arrays.stream(arr1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建 Stream方式三：通过Stream的of()，通过显示值创建一个流。它可以接收任意数量的参数</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Stream&lt;Integer&gt; stream = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建 Stream方式四：创建无限流【用的少，了解下就行】</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      迭代</span></span><br><span class=\"line\"><span class=\"comment\">//      public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class=\"line\">        <span class=\"comment\">//遍历前10个偶数</span></span><br><span class=\"line\">        Stream.iterate(<span class=\"number\">0</span>, t -&gt; t + <span class=\"number\">2</span>).limit(<span class=\"number\">10</span>).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      生成</span></span><br><span class=\"line\"><span class=\"comment\">//      public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class=\"line\">        Stream.generate(Math::random).limit(<span class=\"number\">10</span>).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"中间操作\"><a href=\"#中间操作\" class=\"headerlink\" title=\"中间操作\"></a>中间操作</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Stream的中间操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StreamAPITest1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1-筛选与切片</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class=\"line\"><span class=\"comment\">//        filter(Predicate p)——过滤   接收 Lambda ， 从流中排除某些元素。</span></span><br><span class=\"line\">        Stream&lt;Employee&gt; stream = list.stream();</span><br><span class=\"line\">        <span class=\"comment\">//练习：查询员工表中薪资大于7000的员工信息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * List&lt;String&gt; filterStrs1 = filterString(list,s -&gt; s.contains(&quot;京&quot;));</span></span><br><span class=\"line\"><span class=\"comment\">         * 跟之前的这个lambda表达式代码是一个意思</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        stream.filter(e -&gt; e.getSalary() &gt; <span class=\"number\">7000</span>).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"><span class=\"comment\">//        limit(n)——截断流，使其元素不超过给定数量。</span></span><br><span class=\"line\">        list.stream().limit(<span class=\"number\">3</span>).forEach(System.out::println);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，</span></span><br><span class=\"line\"><span class=\"comment\">        则返回一个空流。与 limit(n) 互补</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        list.stream().skip(<span class=\"number\">3</span>).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"><span class=\"comment\">//        distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1010</span>,<span class=\"string\">&quot;刘强东&quot;</span>,<span class=\"number\">40</span>,<span class=\"number\">8000</span>));</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1010</span>,<span class=\"string\">&quot;刘强东&quot;</span>,<span class=\"number\">41</span>,<span class=\"number\">8000</span>));</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1010</span>,<span class=\"string\">&quot;刘强东&quot;</span>,<span class=\"number\">40</span>,<span class=\"number\">8000</span>));</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1010</span>,<span class=\"string\">&quot;刘强东&quot;</span>,<span class=\"number\">40</span>,<span class=\"number\">8000</span>));</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1010</span>,<span class=\"string\">&quot;刘强东&quot;</span>,<span class=\"number\">40</span>,<span class=\"number\">8000</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(list);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        list.stream().distinct().forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//映射</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应</span></span><br><span class=\"line\"><span class=\"comment\">        用到每个元素上，并将其映射成一个新的元素。</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;aa&quot;</span>, <span class=\"string\">&quot;bb&quot;</span>, <span class=\"string\">&quot;cc&quot;</span>, <span class=\"string\">&quot;dd&quot;</span>);</span><br><span class=\"line\">        list.stream().map(str -&gt; str.toUpperCase()).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        练习1：获取员工姓名长度大于3的员工的姓名。</span></span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\">        Stream&lt;String&gt; namesStream = employees.stream().map(Employee::getName);</span><br><span class=\"line\">        namesStream.filter(name -&gt; name.length() &gt; <span class=\"number\">3</span>).forEach(System.out::println);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"comment\">//练习2：</span></span><br><span class=\"line\">        Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream().map(StreamAPITest1::fromStringToStream);</span><br><span class=\"line\">        <span class=\"comment\">//这个还需要两层遍历</span></span><br><span class=\"line\">        streamStream.forEach(s -&gt;&#123;</span><br><span class=\"line\">            s.forEach(System.out::println);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连</span></span><br><span class=\"line\"><span class=\"comment\">        接成一个流。flatMap一层遍历即可拿到想要的结果</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        Stream&lt;Character&gt; characterStream = list.stream().flatMap(StreamAPITest1::fromStringToStream);</span><br><span class=\"line\">        characterStream.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将字符串中的多个字符构成的集合转换为对应的Stream的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Stream&lt;Character&gt; <span class=\"title function_\">fromStringToStream</span><span class=\"params\">(String str)</span>&#123;<span class=\"comment\">//aa</span></span><br><span class=\"line\">        ArrayList&lt;Character&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Character c : str.toCharArray())&#123;</span><br><span class=\"line\">            list.add(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> list.stream();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3-排序</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        sorted()——自然排序</span></span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">12</span>, <span class=\"number\">43</span>, <span class=\"number\">65</span>, <span class=\"number\">34</span>, <span class=\"number\">87</span>, <span class=\"number\">0</span>, -<span class=\"number\">98</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">        list.stream().sorted().forEach(System.out::println);</span><br><span class=\"line\">        <span class=\"comment\">//抛异常，原因:Employee没有实现Comparable接口</span></span><br><span class=\"line\"><span class=\"comment\">//        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span></span><br><span class=\"line\"><span class=\"comment\">//        employees.stream().sorted().forEach(System.out::println);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        sorted(Comparator com)——定制排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\">        employees.stream().sorted( (e1,e2) -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"type\">int</span> <span class=\"variable\">ageValue</span> <span class=\"operator\">=</span> Integer.compare(e1.getAge(),e2.getAge());</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(ageValue != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> ageValue;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> -Double.compare(e1.getSalary(),e2.getSalary());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"终止操作\"><a href=\"#终止操作\" class=\"headerlink\" title=\"终止操作\"></a>终止操作</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Stream的终止操作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StreamAPITest2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1-匹配与查找</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        allMatch(Predicate p)——检查是否匹配所有元素。</span></span><br><span class=\"line\"><span class=\"comment\">//          练习：是否所有的员工的年龄都大于18</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">allMatch</span> <span class=\"operator\">=</span> employees.stream().allMatch(e -&gt; e.getAge() &gt; <span class=\"number\">18</span>);</span><br><span class=\"line\">        System.out.println(allMatch);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        anyMatch(Predicate p)——检查是否至少匹配一个元素。</span></span><br><span class=\"line\"><span class=\"comment\">//         练习：是否存在员工的工资大于 10000</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">anyMatch</span> <span class=\"operator\">=</span> employees.stream().anyMatch(e -&gt; e.getSalary() &gt; <span class=\"number\">10000</span>);</span><br><span class=\"line\">        System.out.println(anyMatch);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        noneMatch(Predicate p)——检查是否没有匹配的元素。</span></span><br><span class=\"line\"><span class=\"comment\">//          练习：是否存在员工姓“雷”</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">noneMatch</span> <span class=\"operator\">=</span> employees.stream().noneMatch(e -&gt; e.getName().startsWith(<span class=\"string\">&quot;雷&quot;</span>));</span><br><span class=\"line\">        System.out.println(noneMatch);</span><br><span class=\"line\"><span class=\"comment\">//        findFirst——返回第一个元素</span></span><br><span class=\"line\">        Optional&lt;Employee&gt; employee = employees.stream().findFirst();</span><br><span class=\"line\">        System.out.println(employee);</span><br><span class=\"line\"><span class=\"comment\">//        findAny——返回当前流中的任意元素</span></span><br><span class=\"line\">        Optional&lt;Employee&gt; employee1 = employees.parallelStream().findAny();</span><br><span class=\"line\">        System.out.println(employee1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\">        <span class=\"comment\">// count——返回流中元素的总个数</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> employees.stream().filter(e -&gt; e.getSalary() &gt; <span class=\"number\">5000</span>).count();</span><br><span class=\"line\">        System.out.println(count);</span><br><span class=\"line\"><span class=\"comment\">//        max(Comparator c)——返回流中最大值</span></span><br><span class=\"line\"><span class=\"comment\">//        练习：返回最高的工资：</span></span><br><span class=\"line\">        Stream&lt;Double&gt; salaryStream = employees.stream().map(e -&gt; e.getSalary());</span><br><span class=\"line\">        Optional&lt;Double&gt; maxSalary = salaryStream.max(Double::compare);</span><br><span class=\"line\">        System.out.println(maxSalary);</span><br><span class=\"line\"><span class=\"comment\">//        min(Comparator c)——返回流中最小值</span></span><br><span class=\"line\"><span class=\"comment\">//        练习：返回最低工资的员工</span></span><br><span class=\"line\">        Optional&lt;Employee&gt; employee = employees.stream().min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br><span class=\"line\">        System.out.println(employee);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"><span class=\"comment\">//        forEach(Consumer c)——内部迭代</span></span><br><span class=\"line\">        employees.stream().forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用集合的遍历操作</span></span><br><span class=\"line\">        employees.forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2-归约</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T</span></span><br><span class=\"line\"><span class=\"comment\">//        练习1：计算1-10的自然数的和</span></span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> list.stream().reduce(<span class=\"number\">0</span>, Integer::sum);</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//        练习2：计算公司所有员工工资的总和</span></span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\">        Stream&lt;Double&gt; salaryStream = employees.stream().map(Employee::getSalary);</span><br><span class=\"line\"><span class=\"comment\">//        Optional&lt;Double&gt; sumMoney = salaryStream.reduce(Double::sum);</span></span><br><span class=\"line\">        Optional&lt;Double&gt; sumMoney = salaryStream.reduce((d1,d2) -&gt; d1 + d2);</span><br><span class=\"line\">        System.out.println(sumMoney.get());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3-收集</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span></span><br><span class=\"line\"><span class=\"comment\">//        练习1：查找工资大于6000的员工，结果返回为一个List或Set</span></span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\">        List&lt;Employee&gt; employeeList = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class=\"number\">6000</span>).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        employeeList.forEach(System.out::println);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        Set&lt;Employee&gt; employeeSet = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class=\"number\">6000</span>).collect(Collectors.toSet());</span><br><span class=\"line\"></span><br><span class=\"line\">        employeeSet.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Optional类\"><a href=\"#Optional类\" class=\"headerlink\" title=\"Optional类\"></a>Optional类</h1><h2 id=\"什么是Optional？\"><a href=\"#什么是Optional？\" class=\"headerlink\" title=\"什么是Optional？\"></a>什么是Optional？</h2><ul>\n<li><p>到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分。</p>\n</li>\n<li><p>Optional<T> 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。 </p>\n</li>\n<li><p>Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p>\n</li>\n</ul>\n<h2 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h2><img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0005.png\">\n\n\n\n\n\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><p>首先准备两个类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Boy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Girl girl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Boy&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;girl=&quot;</span> + girl +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Girl <span class=\"title function_\">getGirl</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> girl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setGirl</span><span class=\"params\">(Girl girl)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.girl = girl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Boy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Boy</span><span class=\"params\">(Girl girl)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.girl = girl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Girl</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Girl&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Girl</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Girl</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里只是简单的测试两个API</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Optional类：为了在程序中避免出现空指针异常而创建的。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 常用的方法：ofNullable(T t)</span></span><br><span class=\"line\"><span class=\"comment\"> *            orElse(T t)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OptionalTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Optional.of(T t) : 创建一个 Optional 实例，t必须非空；</span></span><br><span class=\"line\"><span class=\"comment\">Optional.empty() : 创建一个空的 Optional 实例</span></span><br><span class=\"line\"><span class=\"comment\">Optional.ofNullable(T t)：t可以为null</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Girl</span> <span class=\"variable\">girl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Girl</span>();</span><br><span class=\"line\"><span class=\"comment\">//        girl = null;</span></span><br><span class=\"line\">        <span class=\"comment\">//of(T t):保证t是非空的</span></span><br><span class=\"line\">        Optional&lt;Girl&gt; optionalGirl = Optional.of(girl);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Girl</span> <span class=\"variable\">girl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Girl</span>();</span><br><span class=\"line\"><span class=\"comment\">//        girl = null;</span></span><br><span class=\"line\">        <span class=\"comment\">//ofNullable(T t)：t可以为null</span></span><br><span class=\"line\">        Optional&lt;Girl&gt; optionalGirl = Optional.ofNullable(girl);</span><br><span class=\"line\">        System.out.println(optionalGirl);</span><br><span class=\"line\">        <span class=\"comment\">//orElse(T t1):如果单前的Optional内部封装的t是非空的，则返回内部的t.</span></span><br><span class=\"line\">        <span class=\"comment\">//如果内部的t是空的，则返回orElse()方法中的参数t1.</span></span><br><span class=\"line\">        <span class=\"type\">Girl</span> <span class=\"variable\">girl1</span> <span class=\"operator\">=</span> optionalGirl.orElse(<span class=\"keyword\">new</span> <span class=\"title class_\">Girl</span>(<span class=\"string\">&quot;赵丽颖&quot;</span>));</span><br><span class=\"line\">        System.out.println(girl1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>实际场景使用</strong></p>\n<p>可能出现空指针的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getGirlName</span><span class=\"params\">(Boy boy)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> boy.getGirl().getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Boy</span> <span class=\"variable\">boy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boy</span>();</span><br><span class=\"line\">        boy = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">girlName</span> <span class=\"operator\">=</span> getGirlName(boy);</span><br><span class=\"line\">        System.out.println(girlName);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.NullPointerException</span><br><span class=\"line\">\tat com.atguigu.java4.OptionalTest.getGirlName(OptionalTest.java:47)</span><br><span class=\"line\">\tat com.atguigu.java4.OptionalTest.test3(OptionalTest.java:54)</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code -1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>没有Optional的解决办法，但是如果调用层数过多，就得一层一层判断是否为null，写起来很麻烦。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//优化以后的getGirlName():</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getGirlName1</span><span class=\"params\">(Boy boy)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(boy != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">Girl</span> <span class=\"variable\">girl</span> <span class=\"operator\">=</span> boy.getGirl();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(girl != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> girl.getName();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Boy</span> <span class=\"variable\">boy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boy</span>();</span><br><span class=\"line\">        boy = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">girlName</span> <span class=\"operator\">=</span> getGirlName1(boy);</span><br><span class=\"line\">        System.out.println(girlName);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用Optional解决问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用Optional类的getGirlName():</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">getGirlName2</span><span class=\"params\">(Boy boy)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       Optional&lt;Boy&gt; boyOptional = Optional.ofNullable(boy);</span><br><span class=\"line\">       <span class=\"comment\">//此时的boy1一定非空</span></span><br><span class=\"line\">       <span class=\"type\">Boy</span> <span class=\"variable\">boy1</span> <span class=\"operator\">=</span> boyOptional.orElse(<span class=\"keyword\">new</span> <span class=\"title class_\">Boy</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Girl</span>(<span class=\"string\">&quot;迪丽热巴&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">Girl</span> <span class=\"variable\">girl</span> <span class=\"operator\">=</span> boy1.getGirl();</span><br><span class=\"line\"></span><br><span class=\"line\">       Optional&lt;Girl&gt; girlOptional = Optional.ofNullable(girl);</span><br><span class=\"line\">       <span class=\"comment\">//girl1一定非空</span></span><br><span class=\"line\">       <span class=\"type\">Girl</span> <span class=\"variable\">girl1</span> <span class=\"operator\">=</span> girlOptional.orElse(<span class=\"keyword\">new</span> <span class=\"title class_\">Girl</span>(<span class=\"string\">&quot;古力娜扎&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> girl1.getName();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test5</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Boy</span> <span class=\"variable\">boy</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       boy = <span class=\"keyword\">new</span> <span class=\"title class_\">Boy</span>();</span><br><span class=\"line\">       boy = <span class=\"keyword\">new</span> <span class=\"title class_\">Boy</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Girl</span>(<span class=\"string\">&quot;苍老师&quot;</span>));</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">girlName</span> <span class=\"operator\">=</span> getGirlName2(boy);</span><br><span class=\"line\">       System.out.println(girlName);</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种是绝对不会出现空指针的。</p>\n<h1 id=\"接口的增强\"><a href=\"#接口的增强\" class=\"headerlink\" title=\"接口的增强\"></a>接口的增强</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDK7及以前：只能定义全局常量和抽象方法</span><br><span class=\"line\">  &gt;全局常量：public static final的.但是书写时，可以省略不写</span><br><span class=\"line\">  &gt;抽象方法：public abstract的</span><br><span class=\"line\">  \t\t\t</span><br><span class=\"line\">JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CompareA</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CompareA:北京&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//默认方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CompareA：上海&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//接口中的public 可以省略，自动就是public</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CompareA：上海&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SuperClass</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;SuperClass:北京&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CompareB</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;CompareB：上海&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SubClassTest</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">SubClass</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass</span>();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"comment\">//\t\ts.method1();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSubClass.method1();</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//知识点1：接口中定义的静态方法，只能通过接口来调用。实现类用不了</span></span><br><span class=\"line\">\t\tCompareA.method1();</span><br><span class=\"line\">\t\t<span class=\"comment\">//知识点2：通过实现类的对象，可以调用接口中的默认方法。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</span></span><br><span class=\"line\">\t\ts.method2();</span><br><span class=\"line\">\t\t<span class=\"comment\">//知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。--&gt;类优先原则</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//那么在实现类没有重写此方法的情况下，报错。--&gt;接口冲突。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//这就需要我们必须在实现类中重写此方法</span></span><br><span class=\"line\">\t\ts.method3();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CompareA</span>,CompareB&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;SubClass：上海&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;SubClass：深圳&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">myMethod</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tmethod3();<span class=\"comment\">//调用自己定义的重写的方法</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>.method3();<span class=\"comment\">//调用的是父类中声明的</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//调用接口中的默认方法</span></span><br><span class=\"line\">\t\tCompareA.<span class=\"built_in\">super</span>.method3();</span><br><span class=\"line\">\t\tCompareB.<span class=\"built_in\">super</span>.method3();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"Java8新特性纵览\"><a href=\"#Java8新特性纵览\" class=\"headerlink\" title=\"Java8新特性纵览\"></a>Java8新特性纵览</h1><blockquote>\n<p>关于Java8新特性的学习与记录，资料来源于互联网。</p>\n</blockquote>\n<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><h2 id=\"为什么使用Lambda表达式？\"><a href=\"#为什么使用Lambda表达式？\" class=\"headerlink\" title=\"为什么使用Lambda表达式？\"></a>为什么使用Lambda表达式？</h2><ul>\n<li>Lambda 是一个<strong>匿名函数</strong>，我们可以把 Lambda 表达式理解为是<strong>一段可以传递的代码</strong>（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</li>\n<li>在Java8之后的很多源码里用到了Lambda表达式，不学的话可能看不懂源码。</li>\n</ul>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//原始写法</span></span><br><span class=\"line\">       <span class=\"type\">Runnable</span> <span class=\"variable\">r1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">               System.out.println(<span class=\"string\">&quot;我爱北京天安门&quot;</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">       r1.run();</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;***********************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//lambda表达式，可以表达一样的意思</span></span><br><span class=\"line\">       <span class=\"type\">Runnable</span> <span class=\"variable\">r2</span> <span class=\"operator\">=</span> () -&gt; System.out.println(<span class=\"string\">&quot;我爱北京故宫&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       r2.run();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       Comparator&lt;Integer&gt; com1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> Integer.compare(o1,o2);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">compare1</span> <span class=\"operator\">=</span> com1.compare(<span class=\"number\">12</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">       System.out.println(compare1);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;***********************&quot;</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//Lambda表达式的写法</span></span><br><span class=\"line\">       Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">compare2</span> <span class=\"operator\">=</span> com2.compare(<span class=\"number\">32</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">       System.out.println(compare2);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;***********************&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">//方法引用</span></span><br><span class=\"line\">       Comparator&lt;Integer&gt; com3 = Integer :: compare;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">compare3</span> <span class=\"operator\">=</span> com3.compare(<span class=\"number\">32</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">       System.out.println(compare3);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Lambda语法规则\"><a href=\"#Lambda语法规则\" class=\"headerlink\" title=\"Lambda语法规则\"></a>Lambda语法规则</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Lambda表达式的使用</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.举例： (o1,o2) -&gt; Integer.compare(o1,o2);</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.格式：</span></span><br><span class=\"line\"><span class=\"comment\"> * -&gt; :lambda操作符 或 箭头操作符</span></span><br><span class=\"line\"><span class=\"comment\"> * -&gt;左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表）</span></span><br><span class=\"line\"><span class=\"comment\"> * -&gt;右边：lambda体 （其实就是重写的抽象方法的方法体）</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. Lambda表达式的使用：（分为6种情况介绍）</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 总结：</span></span><br><span class=\"line\"><span class=\"comment\"> * -&gt;左边：lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只有一个参数，其一对()也</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以省略</span></span><br><span class=\"line\"><span class=\"comment\"> * -&gt;右边：lambda体应该使用一对&#123;&#125;包裹；如果lambda体只有一条执行语句（可能是return语句），省略这一</span></span><br><span class=\"line\"><span class=\"comment\"> 对&#123;&#125;和return关键字</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.Lambda表达式的本质：作为函数式接口的实例</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 5. 如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。我们可以在一个接口上</span></span><br><span class=\"line\"><span class=\"comment\"> 使用 <span class=\"doctag\">@FunctionalInterface</span> 注解，</span></span><br><span class=\"line\"><span class=\"comment\"> * 这样做可以检查它是否是一个函数式接口。</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 6. 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LambdaTest1</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//语法格式一：无参，无返回值</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">r1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;我爱北京天安门&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        r1.run();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;***********************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">r2</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我爱北京故宫&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        r2.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//语法格式二：Lambda 需要一个参数，但是没有返回值。</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; con = <span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">                System.out.println(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con.accept(<span class=\"string\">&quot;谎言和誓言的区别是什么？&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con1.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con1.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; con2 = (s) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con2.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();<span class=\"comment\">//类型推断</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;<span class=\"comment\">//类型推断</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//语法格式四：Lambda 若只需要一个参数时，参数的小括号可以省略</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test5</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Consumer&lt;String&gt; con1 = (s) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con1.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; con2 = s -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con2.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//语法格式五：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test6</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Comparator&lt;Integer&gt; com1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> &#123;</span><br><span class=\"line\">                System.out.println(o1);</span><br><span class=\"line\">                System.out.println(o2);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.compareTo(o2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(com1.compare(<span class=\"number\">12</span>, <span class=\"number\">21</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*****************************&quot;</span>);</span><br><span class=\"line\">        Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(o1);</span><br><span class=\"line\">            System.out.println(o2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.compareTo(o2);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(com2.compare(<span class=\"number\">12</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//语法格式六：当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test7</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Comparator&lt;Integer&gt; com1 = (o1, o2) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o1.compareTo(o2);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(com1.compare(<span class=\"number\">12</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*****************************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; o1.compareTo(o2);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(com2.compare(<span class=\"number\">12</span>, <span class=\"number\">21</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test8</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Consumer&lt;String&gt; con1 = s -&gt; &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        con1.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*****************************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; con2 = s -&gt; System.out.println(s);</span><br><span class=\"line\"></span><br><span class=\"line\">        con2.accept(<span class=\"string\">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h1><h2 id=\"什么是函数式-Functional-接口\"><a href=\"#什么是函数式-Functional-接口\" class=\"headerlink\" title=\"什么是函数式(Functional)接口\"></a>什么是函数式(Functional)接口</h2><ul>\n<li><p>只包含一个抽象方法的接口，称为<strong>函数式接口</strong>。 </p>\n</li>\n<li><p>你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。</p>\n</li>\n<li><p>我们可以在一个接口上使用 <strong>@FunctionalInterface</strong> 注解，这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</p>\n</li>\n<li><p>在java.util.function包下定义了Java 8 的丰富的函数式接口</p>\n</li>\n</ul>\n<h2 id=\"如何理解函数式接口\"><a href=\"#如何理解函数式接口\" class=\"headerlink\" title=\"如何理解函数式接口\"></a>如何理解函数式接口</h2><ul>\n<li>Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP)编程是一切。但是随着python、scala等语言的兴起和新技术的挑战，Java不得不做出调整以便支持更加广泛的技术要求，也即java不但可以支持OOP还可以支持OOF（面向函数编程） </li>\n<li>在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型——函数式接口。 </li>\n<li>简单的说，在Java8中，Lambda表达式就是一个函数式接口的实例。这就是Lambda表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口的实例，那么该对象就可以用Lambda表达式来表示。</li>\n<li>所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。</li>\n</ul>\n<h2 id=\"Java内置函数式接口\"><a href=\"#Java内置函数式接口\" class=\"headerlink\" title=\"Java内置函数式接口\"></a>Java内置函数式接口</h2><p><strong>核心函数式接口</strong></p>\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0002.png\">\n\n\n\n<p><strong>其它函数式接口</strong></p>\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0003.png\">\n\n\n\n\n\n<p><strong>Consumer</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       happyTime(<span class=\"number\">500</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>&lt;Double&gt;() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Double aDouble)</span> &#123;</span><br><span class=\"line\">               System.out.println(<span class=\"string\">&quot;学习太累了，去天上人间买了瓶矿泉水，价格为：&quot;</span> + aDouble);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;********************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       happyTime(<span class=\"number\">400</span>,money -&gt; System.out.println(<span class=\"string\">&quot;学习太累了，去天上人间喝了口水，价格为：&quot;</span> + money));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">happyTime</span><span class=\"params\">(<span class=\"type\">double</span> money, Consumer&lt;Double&gt; con)</span>&#123;</span><br><span class=\"line\">       con.accept(money);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>结果：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">学习太累了，去天上人间买了瓶矿泉水，价格为：<span class=\"number\">500.0</span></span><br><span class=\"line\">********************</span><br><span class=\"line\">学习太累了，去天上人间喝了口水，价格为：<span class=\"number\">400.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Predicate</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;北京&quot;</span>,<span class=\"string\">&quot;南京&quot;</span>,<span class=\"string\">&quot;天津&quot;</span>,<span class=\"string\">&quot;东京&quot;</span>,<span class=\"string\">&quot;西京&quot;</span>,<span class=\"string\">&quot;普京&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; filterStrs = filterString(list, <span class=\"keyword\">new</span> <span class=\"title class_\">Predicate</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">test</span><span class=\"params\">(String s)</span> &#123;<span class=\"comment\">//这里是定义一个校验规则</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> s.contains(<span class=\"string\">&quot;京&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(filterStrs);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//用lambda表达式会很简单</span></span><br><span class=\"line\">        List&lt;String&gt; filterStrs1 = filterString(list,s -&gt; s.contains(<span class=\"string\">&quot;京&quot;</span>));</span><br><span class=\"line\">        System.out.println(filterStrs1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据给定的规则，过滤集合中的字符串。此规则由Predicate的方法决定</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">filterString</span><span class=\"params\">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayList&lt;String&gt; filterList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s : list)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pre.test(s))&#123;</span><br><span class=\"line\">                filterList.add(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterList;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>结果：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[北京, 南京, 东京, 西京, 普京]</span><br><span class=\"line\">[北京, 南京, 东京, 西京, 普京]</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"自定义函数式接口\"><a href=\"#自定义函数式接口\" class=\"headerlink\" title=\"自定义函数式接口\"></a>自定义函数式接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义函数式接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 只是说加上<span class=\"doctag\">@FunctionalInterface</span>之后可以校验</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyFunInterface</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getValue</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这个方法的第一个参数是lambda表达式，相当于是实例化了那个函数式接口</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> toUpperString(str -&gt; str.toUpperCase(), <span class=\"string\">&quot;abcd&quot;</span>);</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">toUpperString</span><span class=\"params\">(MyFunInterface&lt;String&gt; mf,String str)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mf.getValue(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h1><ul>\n<li><p>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</p>\n</li>\n<li><p>方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。</p>\n</li>\n<li><p>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致！</p>\n</li>\n<li><p>格式：使用操作符 “::” 将类(或对象) 与 方法名分隔开来。</p>\n</li>\n<li><p>如下三种主要使用情况： </p>\n<ul>\n<li><p>对象 :: 实例方法名</p>\n</li>\n<li><p>类 :: 静态方法名</p>\n</li>\n<li><p>类 :: 实例方法名</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>我们直接拿例子来说明情况，先提前准备两个类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getSalary</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSalary</span><span class=\"params\">(<span class=\"type\">double</span> salary)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.salary = salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Employee().....&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Employee(int id).....&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">(<span class=\"type\">int</span> id, String name)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">(<span class=\"type\">int</span> id, String name, <span class=\"type\">int</span> age, <span class=\"type\">double</span> salary)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.salary = salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Employee&#123;&quot;</span> + <span class=\"string\">&quot;id=&quot;</span> + id + <span class=\"string\">&quot;, name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> + <span class=\"string\">&quot;, age=&quot;</span> + age + <span class=\"string\">&quot;, salary=&quot;</span> + salary + <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> == o)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (o == <span class=\"literal\">null</span> || getClass() != o.getClass())</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> (Employee) o;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (id != employee.id)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (age != employee.age)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Double.compare(employee.salary, salary) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name != <span class=\"literal\">null</span> ? name.equals(employee.name) : employee.name == <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> result;</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> temp;</span><br><span class=\"line\">\t\tresult = id;</span><br><span class=\"line\">\t\tresult = <span class=\"number\">31</span> * result + (name != <span class=\"literal\">null</span> ? name.hashCode() : <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tresult = <span class=\"number\">31</span> * result + age;</span><br><span class=\"line\">\t\ttemp = Double.doubleToLongBits(salary);</span><br><span class=\"line\">\t\tresult = <span class=\"number\">31</span> * result + (<span class=\"type\">int</span>) (temp ^ (temp &gt;&gt;&gt; <span class=\"number\">32</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 提供用于测试的数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeData</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Employee&gt; <span class=\"title function_\">getEmployees</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      List&lt;Employee&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">      </span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1001</span>, <span class=\"string\">&quot;马化腾&quot;</span>, <span class=\"number\">34</span>, <span class=\"number\">6000.38</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1002</span>, <span class=\"string\">&quot;马云&quot;</span>, <span class=\"number\">12</span>, <span class=\"number\">9876.12</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1003</span>, <span class=\"string\">&quot;刘强东&quot;</span>, <span class=\"number\">33</span>, <span class=\"number\">3000.82</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1004</span>, <span class=\"string\">&quot;雷军&quot;</span>, <span class=\"number\">26</span>, <span class=\"number\">7657.37</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1005</span>, <span class=\"string\">&quot;李彦宏&quot;</span>, <span class=\"number\">65</span>, <span class=\"number\">5555.32</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1006</span>, <span class=\"string\">&quot;比尔盖茨&quot;</span>, <span class=\"number\">42</span>, <span class=\"number\">9500.43</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1007</span>, <span class=\"string\">&quot;任正非&quot;</span>, <span class=\"number\">26</span>, <span class=\"number\">4333.32</span>));</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1008</span>, <span class=\"string\">&quot;扎克伯格&quot;</span>, <span class=\"number\">35</span>, <span class=\"number\">2500.32</span>));</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>下面来通过实际例子讲解方法引用：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法引用的使用</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以</span></span><br><span class=\"line\"><span class=\"comment\"> *   方法引用，也是函数式接口的实例。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 使用格式：  类(或对象) :: 方法名</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 4. 具体分为如下的三种情况：</span></span><br><span class=\"line\"><span class=\"comment\"> *    情况1     对象 :: 非静态方法</span></span><br><span class=\"line\"><span class=\"comment\"> *    情况2     类 :: 静态方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *    情况3     类 :: 非静态方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 5. 方法引用使用的要求：</span></span><br><span class=\"line\"><span class=\"comment\"> * \t接口中的抽象方法的形参列表和返回值类型</span></span><br><span class=\"line\"><span class=\"comment\"> * \t与</span></span><br><span class=\"line\"><span class=\"comment\"> * \t方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MethodRefTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 情况一：对象 :: 实例方法</span></span><br><span class=\"line\">\t<span class=\"comment\">//Consumer中的void accept(T t)</span></span><br><span class=\"line\">\t<span class=\"comment\">//PrintStream中的void println(T t)</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tConsumer&lt;String&gt; con1 = str -&gt; System.out.println(str);</span><br><span class=\"line\">\t\tcon1.accept(<span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">PrintStream</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> System.out;</span><br><span class=\"line\">\t\tConsumer&lt;String&gt; con2 = ps::println;</span><br><span class=\"line\">\t\tcon2.accept(<span class=\"string\">&quot;beijing&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//Supplier中的T get()</span></span><br><span class=\"line\">\t<span class=\"comment\">//Employee中的String getName()</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Employee</span> <span class=\"variable\">emp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1001</span>,<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"number\">23</span>,<span class=\"number\">5600</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSupplier&lt;String&gt; sup1 = () -&gt; emp.getName();</span><br><span class=\"line\">\t\tSystem.out.println(sup1.get());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\">\t\tSupplier&lt;String&gt; sup2 = emp::getName;</span><br><span class=\"line\">\t\tSystem.out.println(sup2.get());</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 情况二：类 :: 静态方法</span></span><br><span class=\"line\">\t<span class=\"comment\">//Comparator中的int compare(T t1,T t2)</span></span><br><span class=\"line\">\t<span class=\"comment\">//Integer中的int compare(T t1,T t2)</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tComparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);</span><br><span class=\"line\">\t\tSystem.out.println(com1.compare(<span class=\"number\">12</span>,<span class=\"number\">21</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tComparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class=\"line\">\t\tSystem.out.println(com2.compare(<span class=\"number\">12</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//Function中的R apply(T t)</span></span><br><span class=\"line\">\t<span class=\"comment\">//Math中的Long round(Double d)</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tFunction&lt;Double,Long&gt; func = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>&lt;Double, Long&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> Long <span class=\"title function_\">apply</span><span class=\"params\">(Double d)</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> Math.round(d);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFunction&lt;Double,Long&gt; func1 = d -&gt; Math.round(d);</span><br><span class=\"line\">\t\tSystem.out.println(func1.apply(<span class=\"number\">12.3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFunction&lt;Double,Long&gt; func2 = Math::round;</span><br><span class=\"line\">\t\tSystem.out.println(func2.apply(<span class=\"number\">12.6</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 情况三：类 :: 实例方法  (有难度)</span></span><br><span class=\"line\">\t<span class=\"comment\">// Comparator中的int comapre(T t1,T t2)  第一个参数T t1,也可以变成方法的调用者</span></span><br><span class=\"line\">\t<span class=\"comment\">// String中的int t1.compareTo(t2)        看上面说的，t1变成了调用者等价于第一个参数T t1</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test5</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tComparator&lt;String&gt; com1 = (s1,s2) -&gt; s1.compareTo(s2);</span><br><span class=\"line\">\t\tSystem.out.println(com1.compare(<span class=\"string\">&quot;abc&quot;</span>,<span class=\"string\">&quot;abd&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tComparator&lt;String&gt; com2 = String :: compareTo;</span><br><span class=\"line\">\t\tSystem.out.println(com2.compare(<span class=\"string\">&quot;abd&quot;</span>,<span class=\"string\">&quot;abm&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class=\"line\">\t<span class=\"comment\">//String中的boolean t1.equals(t2)</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test6</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tBiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);</span><br><span class=\"line\">\t\tSystem.out.println(pre1.test(<span class=\"string\">&quot;abc&quot;</span>,<span class=\"string\">&quot;abc&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\">\t\tBiPredicate&lt;String,String&gt; pre2 = String :: equals;</span><br><span class=\"line\">\t\tSystem.out.println(pre2.test(<span class=\"string\">&quot;abc&quot;</span>,<span class=\"string\">&quot;abd&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Function中的R apply(T t)</span></span><br><span class=\"line\">\t<span class=\"comment\">// Employee中的String getName();   第一个参数T t相当于方法调用者emp，返回值R和String对应</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test7</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1001</span>, <span class=\"string\">&quot;Jerry&quot;</span>, <span class=\"number\">23</span>, <span class=\"number\">6000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFunction&lt;Employee,String&gt; func1 = e -&gt; e.getName();</span><br><span class=\"line\">\t\tSystem.out.println(func1.apply(employee));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFunction&lt;Employee,String&gt; func2 = Employee::getName;</span><br><span class=\"line\">\t\tSystem.out.println(func2.apply(employee));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"构造器引用\"><a href=\"#构造器引用\" class=\"headerlink\" title=\"构造器引用\"></a>构造器引用</h1><p>格式：ClassName :: new</p>\n<p>与函数式接口相结合，自动与函数式接口中方法兼容。可以把构造器引用赋值给定义的方法，要求构造器参数列表要与接口中抽象方法的参数列表一致！且方法的返回值即为构造器对应类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.BiFunction;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一、构造器引用</span></span><br><span class=\"line\"><span class=\"comment\"> *      和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。</span></span><br><span class=\"line\"><span class=\"comment\"> *      抽象方法的返回值类型即为构造器所属的类的类型</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 二、数组引用</span></span><br><span class=\"line\"><span class=\"comment\"> *     大家可以把数组看做是一个特殊的类，则写法与构造器引用一致。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstructorRefTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造器引用</span></span><br><span class=\"line\"><span class=\"comment\">     * Supplier中的T get()</span></span><br><span class=\"line\"><span class=\"comment\">     * Employee的空参构造器：Employee()</span></span><br><span class=\"line\"><span class=\"comment\">     * 1、和方法引用一样的理解方法，你的get()方法没有参数，我的Employee()也没有参数。</span></span><br><span class=\"line\"><span class=\"comment\">     * 2、你的get()方法有返回值T，我的Employee()方法返回值也是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 3、所以刚好可以用  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Supplier&lt;Employee&gt; sup = <span class=\"keyword\">new</span> <span class=\"title class_\">Supplier</span>&lt;Employee&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Employee <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Supplier&lt;Employee&gt;  sup1 = () -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">        System.out.println(sup1.get());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Supplier&lt;Employee&gt;  sup2 = Employee :: <span class=\"keyword\">new</span>;</span><br><span class=\"line\">        System.out.println(sup2.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Function中的R apply(T t)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Function&lt;Integer,Employee&gt; func1 = id -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(id);</span><br><span class=\"line\">        <span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> func1.apply(<span class=\"number\">1001</span>);</span><br><span class=\"line\">        System.out.println(employee);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Function&lt;Integer,Employee&gt; func2 = Employee :: <span class=\"keyword\">new</span>;</span><br><span class=\"line\">        <span class=\"type\">Employee</span> <span class=\"variable\">employee1</span> <span class=\"operator\">=</span> func2.apply(<span class=\"number\">1002</span>);</span><br><span class=\"line\">        System.out.println(employee1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//BiFunction中的R apply(T t,U u)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        BiFunction&lt;Integer,String,Employee&gt; func1 = (id,name) -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(id,name);</span><br><span class=\"line\">        System.out.println(func1.apply(<span class=\"number\">1001</span>,<span class=\"string\">&quot;Tom&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        BiFunction&lt;Integer,String,Employee&gt; func2 = Employee :: <span class=\"keyword\">new</span>;</span><br><span class=\"line\">        System.out.println(func2.apply(<span class=\"number\">1002</span>,<span class=\"string\">&quot;Tom&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//数组引用</span></span><br><span class=\"line\">    <span class=\"comment\">//Function中的R apply(T t)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Function&lt;Integer,String[]&gt; func1 = length -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[length];</span><br><span class=\"line\">        String[] arr1 = func1.apply(<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr1));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Function&lt;Integer,String[]&gt; func2 = String[] :: <span class=\"keyword\">new</span>;</span><br><span class=\"line\">        String[] arr2 = func2.apply(<span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr2));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"强大的Stream-API\"><a href=\"#强大的Stream-API\" class=\"headerlink\" title=\"强大的Stream API\"></a>强大的Stream API</h1><h2 id=\"Stream-API说明\"><a href=\"#Stream-API说明\" class=\"headerlink\" title=\"Stream API说明\"></a>Stream API说明</h2><ul>\n<li><p>Java8中有两大最为重要的改变。第一个是 <strong>Lambda</strong> <strong>表达式</strong>；另外一个则是 <strong>Stream API</strong>。 </p>\n</li>\n<li><p>Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p>\n</li>\n<li><p>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 <strong>使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。</strong>也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式</p>\n</li>\n</ul>\n<h2 id=\"为什么要使用Stream-API\"><a href=\"#为什么要使用Stream-API\" class=\"headerlink\" title=\"为什么要使用Stream API\"></a>为什么要使用Stream API</h2><ul>\n<li><p>实际开发中，项目中多数数据源都来自于Mysql，Oracle等，很多一些复杂的数据获取可以直接在sql层面去解决。但现在数据源可以更多了，有MongDB，Radis等，而这些NoSQL的数据本身不支持一些复杂的数据计算，这个时候就需要Java层面去处理。 </p>\n</li>\n<li><p>Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。</p>\n</li>\n</ul>\n<h2 id=\"什么是Stream\"><a href=\"#什么是Stream\" class=\"headerlink\" title=\"什么是Stream\"></a>什么是Stream</h2><p>Stream到底是什么呢？</p>\n<p>是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。</p>\n<p><strong>“集合讲的是数据，Stream讲的是计算！”</strong></p>\n<p><strong>注意：</strong></p>\n<p>①Stream 自己不会存储元素。</p>\n<p>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。 </p>\n<p>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行</p>\n<p><strong>Stream</strong> <strong>的操作三个步骤</strong></p>\n<p>1、创建Stream</p>\n<p>一个数据源（如：集合、数组），获取一个流</p>\n<p>2、中间操作</p>\n<p>一个中间操作链，对数据源的数据进行处理</p>\n<p>3、终止操作(终端操作) </p>\n<p>一旦执行终止操作，就执行中间操作链，才产生结果【也就是所谓的延迟执行】。之后，不会再被使用</p>\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0004.png\">\n\n\n\n\n\n<h2 id=\"创建Stream\"><a href=\"#创建Stream\" class=\"headerlink\" title=\"创建Stream\"></a>创建Stream</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StreamAPITest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建 Stream方式一：通过集合</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        default Stream&lt;E&gt; stream() : 返回一个顺序流，顺序流等会中间操作拿数据的时候按顺序拿</span></span><br><span class=\"line\">        Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class=\"line\">        Stream&lt;Employee&gt; parallelStream = employees.parallelStream();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建 Stream方式二：通过数组</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span></span><br><span class=\"line\">        <span class=\"type\">IntStream</span> <span class=\"variable\">stream</span> <span class=\"operator\">=</span> Arrays.stream(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Employee</span> <span class=\"variable\">e1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1001</span>,<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Employee</span> <span class=\"variable\">e2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1002</span>,<span class=\"string\">&quot;Jerry&quot;</span>);</span><br><span class=\"line\">        Employee[] arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>[]&#123;e1,e2&#125;;</span><br><span class=\"line\">        Stream&lt;Employee&gt; stream1 = Arrays.stream(arr1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建 Stream方式三：通过Stream的of()，通过显示值创建一个流。它可以接收任意数量的参数</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Stream&lt;Integer&gt; stream = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建 Stream方式四：创建无限流【用的少，了解下就行】</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      迭代</span></span><br><span class=\"line\"><span class=\"comment\">//      public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class=\"line\">        <span class=\"comment\">//遍历前10个偶数</span></span><br><span class=\"line\">        Stream.iterate(<span class=\"number\">0</span>, t -&gt; t + <span class=\"number\">2</span>).limit(<span class=\"number\">10</span>).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      生成</span></span><br><span class=\"line\"><span class=\"comment\">//      public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class=\"line\">        Stream.generate(Math::random).limit(<span class=\"number\">10</span>).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"中间操作\"><a href=\"#中间操作\" class=\"headerlink\" title=\"中间操作\"></a>中间操作</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Stream的中间操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StreamAPITest1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1-筛选与切片</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class=\"line\"><span class=\"comment\">//        filter(Predicate p)——过滤   接收 Lambda ， 从流中排除某些元素。</span></span><br><span class=\"line\">        Stream&lt;Employee&gt; stream = list.stream();</span><br><span class=\"line\">        <span class=\"comment\">//练习：查询员工表中薪资大于7000的员工信息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * List&lt;String&gt; filterStrs1 = filterString(list,s -&gt; s.contains(&quot;京&quot;));</span></span><br><span class=\"line\"><span class=\"comment\">         * 跟之前的这个lambda表达式代码是一个意思</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        stream.filter(e -&gt; e.getSalary() &gt; <span class=\"number\">7000</span>).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"><span class=\"comment\">//        limit(n)——截断流，使其元素不超过给定数量。</span></span><br><span class=\"line\">        list.stream().limit(<span class=\"number\">3</span>).forEach(System.out::println);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，</span></span><br><span class=\"line\"><span class=\"comment\">        则返回一个空流。与 limit(n) 互补</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        list.stream().skip(<span class=\"number\">3</span>).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"><span class=\"comment\">//        distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1010</span>,<span class=\"string\">&quot;刘强东&quot;</span>,<span class=\"number\">40</span>,<span class=\"number\">8000</span>));</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1010</span>,<span class=\"string\">&quot;刘强东&quot;</span>,<span class=\"number\">41</span>,<span class=\"number\">8000</span>));</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1010</span>,<span class=\"string\">&quot;刘强东&quot;</span>,<span class=\"number\">40</span>,<span class=\"number\">8000</span>));</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1010</span>,<span class=\"string\">&quot;刘强东&quot;</span>,<span class=\"number\">40</span>,<span class=\"number\">8000</span>));</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1010</span>,<span class=\"string\">&quot;刘强东&quot;</span>,<span class=\"number\">40</span>,<span class=\"number\">8000</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(list);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        list.stream().distinct().forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//映射</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应</span></span><br><span class=\"line\"><span class=\"comment\">        用到每个元素上，并将其映射成一个新的元素。</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;aa&quot;</span>, <span class=\"string\">&quot;bb&quot;</span>, <span class=\"string\">&quot;cc&quot;</span>, <span class=\"string\">&quot;dd&quot;</span>);</span><br><span class=\"line\">        list.stream().map(str -&gt; str.toUpperCase()).forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        练习1：获取员工姓名长度大于3的员工的姓名。</span></span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\">        Stream&lt;String&gt; namesStream = employees.stream().map(Employee::getName);</span><br><span class=\"line\">        namesStream.filter(name -&gt; name.length() &gt; <span class=\"number\">3</span>).forEach(System.out::println);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"comment\">//练习2：</span></span><br><span class=\"line\">        Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream().map(StreamAPITest1::fromStringToStream);</span><br><span class=\"line\">        <span class=\"comment\">//这个还需要两层遍历</span></span><br><span class=\"line\">        streamStream.forEach(s -&gt;&#123;</span><br><span class=\"line\">            s.forEach(System.out::println);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连</span></span><br><span class=\"line\"><span class=\"comment\">        接成一个流。flatMap一层遍历即可拿到想要的结果</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        Stream&lt;Character&gt; characterStream = list.stream().flatMap(StreamAPITest1::fromStringToStream);</span><br><span class=\"line\">        characterStream.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将字符串中的多个字符构成的集合转换为对应的Stream的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Stream&lt;Character&gt; <span class=\"title function_\">fromStringToStream</span><span class=\"params\">(String str)</span>&#123;<span class=\"comment\">//aa</span></span><br><span class=\"line\">        ArrayList&lt;Character&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Character c : str.toCharArray())&#123;</span><br><span class=\"line\">            list.add(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> list.stream();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3-排序</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        sorted()——自然排序</span></span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">12</span>, <span class=\"number\">43</span>, <span class=\"number\">65</span>, <span class=\"number\">34</span>, <span class=\"number\">87</span>, <span class=\"number\">0</span>, -<span class=\"number\">98</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">        list.stream().sorted().forEach(System.out::println);</span><br><span class=\"line\">        <span class=\"comment\">//抛异常，原因:Employee没有实现Comparable接口</span></span><br><span class=\"line\"><span class=\"comment\">//        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span></span><br><span class=\"line\"><span class=\"comment\">//        employees.stream().sorted().forEach(System.out::println);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        sorted(Comparator com)——定制排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\">        employees.stream().sorted( (e1,e2) -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"type\">int</span> <span class=\"variable\">ageValue</span> <span class=\"operator\">=</span> Integer.compare(e1.getAge(),e2.getAge());</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(ageValue != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> ageValue;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> -Double.compare(e1.getSalary(),e2.getSalary());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"终止操作\"><a href=\"#终止操作\" class=\"headerlink\" title=\"终止操作\"></a>终止操作</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Stream的终止操作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StreamAPITest2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1-匹配与查找</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        allMatch(Predicate p)——检查是否匹配所有元素。</span></span><br><span class=\"line\"><span class=\"comment\">//          练习：是否所有的员工的年龄都大于18</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">allMatch</span> <span class=\"operator\">=</span> employees.stream().allMatch(e -&gt; e.getAge() &gt; <span class=\"number\">18</span>);</span><br><span class=\"line\">        System.out.println(allMatch);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        anyMatch(Predicate p)——检查是否至少匹配一个元素。</span></span><br><span class=\"line\"><span class=\"comment\">//         练习：是否存在员工的工资大于 10000</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">anyMatch</span> <span class=\"operator\">=</span> employees.stream().anyMatch(e -&gt; e.getSalary() &gt; <span class=\"number\">10000</span>);</span><br><span class=\"line\">        System.out.println(anyMatch);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        noneMatch(Predicate p)——检查是否没有匹配的元素。</span></span><br><span class=\"line\"><span class=\"comment\">//          练习：是否存在员工姓“雷”</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">noneMatch</span> <span class=\"operator\">=</span> employees.stream().noneMatch(e -&gt; e.getName().startsWith(<span class=\"string\">&quot;雷&quot;</span>));</span><br><span class=\"line\">        System.out.println(noneMatch);</span><br><span class=\"line\"><span class=\"comment\">//        findFirst——返回第一个元素</span></span><br><span class=\"line\">        Optional&lt;Employee&gt; employee = employees.stream().findFirst();</span><br><span class=\"line\">        System.out.println(employee);</span><br><span class=\"line\"><span class=\"comment\">//        findAny——返回当前流中的任意元素</span></span><br><span class=\"line\">        Optional&lt;Employee&gt; employee1 = employees.parallelStream().findAny();</span><br><span class=\"line\">        System.out.println(employee1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\">        <span class=\"comment\">// count——返回流中元素的总个数</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> employees.stream().filter(e -&gt; e.getSalary() &gt; <span class=\"number\">5000</span>).count();</span><br><span class=\"line\">        System.out.println(count);</span><br><span class=\"line\"><span class=\"comment\">//        max(Comparator c)——返回流中最大值</span></span><br><span class=\"line\"><span class=\"comment\">//        练习：返回最高的工资：</span></span><br><span class=\"line\">        Stream&lt;Double&gt; salaryStream = employees.stream().map(e -&gt; e.getSalary());</span><br><span class=\"line\">        Optional&lt;Double&gt; maxSalary = salaryStream.max(Double::compare);</span><br><span class=\"line\">        System.out.println(maxSalary);</span><br><span class=\"line\"><span class=\"comment\">//        min(Comparator c)——返回流中最小值</span></span><br><span class=\"line\"><span class=\"comment\">//        练习：返回最低工资的员工</span></span><br><span class=\"line\">        Optional&lt;Employee&gt; employee = employees.stream().min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br><span class=\"line\">        System.out.println(employee);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"><span class=\"comment\">//        forEach(Consumer c)——内部迭代</span></span><br><span class=\"line\">        employees.stream().forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用集合的遍历操作</span></span><br><span class=\"line\">        employees.forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2-归约</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T</span></span><br><span class=\"line\"><span class=\"comment\">//        练习1：计算1-10的自然数的和</span></span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> list.stream().reduce(<span class=\"number\">0</span>, Integer::sum);</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//        练习2：计算公司所有员工工资的总和</span></span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\">        Stream&lt;Double&gt; salaryStream = employees.stream().map(Employee::getSalary);</span><br><span class=\"line\"><span class=\"comment\">//        Optional&lt;Double&gt; sumMoney = salaryStream.reduce(Double::sum);</span></span><br><span class=\"line\">        Optional&lt;Double&gt; sumMoney = salaryStream.reduce((d1,d2) -&gt; d1 + d2);</span><br><span class=\"line\">        System.out.println(sumMoney.get());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3-收集</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span></span><br><span class=\"line\"><span class=\"comment\">//        练习1：查找工资大于6000的员工，结果返回为一个List或Set</span></span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class=\"line\">        List&lt;Employee&gt; employeeList = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class=\"number\">6000</span>).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        employeeList.forEach(System.out::println);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        Set&lt;Employee&gt; employeeSet = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class=\"number\">6000</span>).collect(Collectors.toSet());</span><br><span class=\"line\"></span><br><span class=\"line\">        employeeSet.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Optional类\"><a href=\"#Optional类\" class=\"headerlink\" title=\"Optional类\"></a>Optional类</h1><h2 id=\"什么是Optional？\"><a href=\"#什么是Optional？\" class=\"headerlink\" title=\"什么是Optional？\"></a>什么是Optional？</h2><ul>\n<li><p>到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分。</p>\n</li>\n<li><p>Optional<T> 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。 </p>\n</li>\n<li><p>Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p>\n</li>\n</ul>\n<h2 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h2><img src=\"https://npm.elemecdn.com/youthlql@1.0.8/Java_Basis/Java8_New_Features/0005.png\">\n\n\n\n\n\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><p>首先准备两个类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Boy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Girl girl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Boy&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;girl=&quot;</span> + girl +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Girl <span class=\"title function_\">getGirl</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> girl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setGirl</span><span class=\"params\">(Girl girl)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.girl = girl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Boy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Boy</span><span class=\"params\">(Girl girl)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.girl = girl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Girl</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Girl&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Girl</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Girl</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里只是简单的测试两个API</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Optional类：为了在程序中避免出现空指针异常而创建的。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 常用的方法：ofNullable(T t)</span></span><br><span class=\"line\"><span class=\"comment\"> *            orElse(T t)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OptionalTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Optional.of(T t) : 创建一个 Optional 实例，t必须非空；</span></span><br><span class=\"line\"><span class=\"comment\">Optional.empty() : 创建一个空的 Optional 实例</span></span><br><span class=\"line\"><span class=\"comment\">Optional.ofNullable(T t)：t可以为null</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Girl</span> <span class=\"variable\">girl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Girl</span>();</span><br><span class=\"line\"><span class=\"comment\">//        girl = null;</span></span><br><span class=\"line\">        <span class=\"comment\">//of(T t):保证t是非空的</span></span><br><span class=\"line\">        Optional&lt;Girl&gt; optionalGirl = Optional.of(girl);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Girl</span> <span class=\"variable\">girl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Girl</span>();</span><br><span class=\"line\"><span class=\"comment\">//        girl = null;</span></span><br><span class=\"line\">        <span class=\"comment\">//ofNullable(T t)：t可以为null</span></span><br><span class=\"line\">        Optional&lt;Girl&gt; optionalGirl = Optional.ofNullable(girl);</span><br><span class=\"line\">        System.out.println(optionalGirl);</span><br><span class=\"line\">        <span class=\"comment\">//orElse(T t1):如果单前的Optional内部封装的t是非空的，则返回内部的t.</span></span><br><span class=\"line\">        <span class=\"comment\">//如果内部的t是空的，则返回orElse()方法中的参数t1.</span></span><br><span class=\"line\">        <span class=\"type\">Girl</span> <span class=\"variable\">girl1</span> <span class=\"operator\">=</span> optionalGirl.orElse(<span class=\"keyword\">new</span> <span class=\"title class_\">Girl</span>(<span class=\"string\">&quot;赵丽颖&quot;</span>));</span><br><span class=\"line\">        System.out.println(girl1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>实际场景使用</strong></p>\n<p>可能出现空指针的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getGirlName</span><span class=\"params\">(Boy boy)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> boy.getGirl().getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Boy</span> <span class=\"variable\">boy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boy</span>();</span><br><span class=\"line\">        boy = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">girlName</span> <span class=\"operator\">=</span> getGirlName(boy);</span><br><span class=\"line\">        System.out.println(girlName);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.NullPointerException</span><br><span class=\"line\">\tat com.atguigu.java4.OptionalTest.getGirlName(OptionalTest.java:47)</span><br><span class=\"line\">\tat com.atguigu.java4.OptionalTest.test3(OptionalTest.java:54)</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code -1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>没有Optional的解决办法，但是如果调用层数过多，就得一层一层判断是否为null，写起来很麻烦。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//优化以后的getGirlName():</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getGirlName1</span><span class=\"params\">(Boy boy)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(boy != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">Girl</span> <span class=\"variable\">girl</span> <span class=\"operator\">=</span> boy.getGirl();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(girl != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> girl.getName();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Boy</span> <span class=\"variable\">boy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boy</span>();</span><br><span class=\"line\">        boy = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">girlName</span> <span class=\"operator\">=</span> getGirlName1(boy);</span><br><span class=\"line\">        System.out.println(girlName);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用Optional解决问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用Optional类的getGirlName():</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">getGirlName2</span><span class=\"params\">(Boy boy)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       Optional&lt;Boy&gt; boyOptional = Optional.ofNullable(boy);</span><br><span class=\"line\">       <span class=\"comment\">//此时的boy1一定非空</span></span><br><span class=\"line\">       <span class=\"type\">Boy</span> <span class=\"variable\">boy1</span> <span class=\"operator\">=</span> boyOptional.orElse(<span class=\"keyword\">new</span> <span class=\"title class_\">Boy</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Girl</span>(<span class=\"string\">&quot;迪丽热巴&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">Girl</span> <span class=\"variable\">girl</span> <span class=\"operator\">=</span> boy1.getGirl();</span><br><span class=\"line\"></span><br><span class=\"line\">       Optional&lt;Girl&gt; girlOptional = Optional.ofNullable(girl);</span><br><span class=\"line\">       <span class=\"comment\">//girl1一定非空</span></span><br><span class=\"line\">       <span class=\"type\">Girl</span> <span class=\"variable\">girl1</span> <span class=\"operator\">=</span> girlOptional.orElse(<span class=\"keyword\">new</span> <span class=\"title class_\">Girl</span>(<span class=\"string\">&quot;古力娜扎&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> girl1.getName();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test5</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Boy</span> <span class=\"variable\">boy</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       boy = <span class=\"keyword\">new</span> <span class=\"title class_\">Boy</span>();</span><br><span class=\"line\">       boy = <span class=\"keyword\">new</span> <span class=\"title class_\">Boy</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Girl</span>(<span class=\"string\">&quot;苍老师&quot;</span>));</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">girlName</span> <span class=\"operator\">=</span> getGirlName2(boy);</span><br><span class=\"line\">       System.out.println(girlName);</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种是绝对不会出现空指针的。</p>\n<h1 id=\"接口的增强\"><a href=\"#接口的增强\" class=\"headerlink\" title=\"接口的增强\"></a>接口的增强</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDK7及以前：只能定义全局常量和抽象方法</span><br><span class=\"line\">  &gt;全局常量：public static final的.但是书写时，可以省略不写</span><br><span class=\"line\">  &gt;抽象方法：public abstract的</span><br><span class=\"line\">  \t\t\t</span><br><span class=\"line\">JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CompareA</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CompareA:北京&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//默认方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CompareA：上海&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//接口中的public 可以省略，自动就是public</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CompareA：上海&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SuperClass</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;SuperClass:北京&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CompareB</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;CompareB：上海&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SubClassTest</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">SubClass</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubClass</span>();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"comment\">//\t\ts.method1();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSubClass.method1();</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//知识点1：接口中定义的静态方法，只能通过接口来调用。实现类用不了</span></span><br><span class=\"line\">\t\tCompareA.method1();</span><br><span class=\"line\">\t\t<span class=\"comment\">//知识点2：通过实现类的对象，可以调用接口中的默认方法。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</span></span><br><span class=\"line\">\t\ts.method2();</span><br><span class=\"line\">\t\t<span class=\"comment\">//知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。--&gt;类优先原则</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//那么在实现类没有重写此方法的情况下，报错。--&gt;接口冲突。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//这就需要我们必须在实现类中重写此方法</span></span><br><span class=\"line\">\t\ts.method3();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CompareA</span>,CompareB&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;SubClass：上海&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;SubClass：深圳&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">myMethod</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tmethod3();<span class=\"comment\">//调用自己定义的重写的方法</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>.method3();<span class=\"comment\">//调用的是父类中声明的</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//调用接口中的默认方法</span></span><br><span class=\"line\">\t\tCompareA.<span class=\"built_in\">super</span>.method3();</span><br><span class=\"line\">\t\tCompareB.<span class=\"built_in\">super</span>.method3();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"CompletableFuture的使用","date":"2023-08-10T04:17:39.000Z","cover":"../img/Java/Thread/Thread.svg","_content":"\n> CompletableFuture类提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法。\n\n# 总结\n\n<table>\n    <tr>\n        <th>分类</th>\n        <th>方法名</th>\n        <th>描述</th>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">创建异步任务</th>\n        <td><code>runAsync</code></td>\n        <td>不支持返回值</td>\n    </tr>\n    <tr>\n        <td><code>supplyAsync</code></td>\n        <td>支持返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"6\">创建异步任务</th>\n        <td><code>thenRun</code>、<code>thenRunAsync</code></td>\n        <td>不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAccept</code>、<code>thenAcceptAsync</code></td>\n        <td>接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenApply</code>、<code>thenApplyAsync</code></td>\n        <td>接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>exceptionally</code>、<code>exceptionallyAsync</code></td>\n        <td>接异常、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>whenComplete</code>、<code>whenCompleteAsync</code></td>\n        <td>接返回值和异常、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>handle</code>、<code>handleAsync</code></td>\n        <td>接返回值和异常、有返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"7\">两个任务组合</th>\n        <td><code>thenCompose</code>、<code>thenComposeAsync</code></td>\n        <td>任务转化</td>\n    </tr>\n    <tr>\n        <td><code>thenCombine</code>、<code>thenCombineAsync</code></td>\n        <td>“且”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAcceptBoth</code>、<code>thenAcceptBothAsync</code></td>\n        <td>“且”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterBoth</code>、<code>runAfterBothAsync</code></td>\n        <td>“且”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>applyToEither</code>、<code>applyToEitherAsync</code></td>\n        <td>“或”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>acceptEither</code>、<code>acceptEitherAsync</code></td>\n        <td>“或”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterEither</code>、<code>runAfterEitherAsync</code></td>\n        <td>“或”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">多个任务组合</th>\n        <td><code>anyOf</code></td>\n        <td>“任意一个”组合</td>\n    </tr>\n    <tr>\n        <td><code>allOf</code></td>\n        <td>“所有”组合</td>\n    </tr>\n</table>\n\n> 在CompletableFuture中如果使用没有指定线程池的方法，则会使用`ForkJoinPool.commonPool()`作为它的线程池执行异步代码。\n\n# 创建异步任务\n\n### 不支持返回值\n\n- 方法签名\n  ```java\n  // 使用默认线程池中的线程\n  public static CompletableFuture<Void> runAsync(Runnable runnable);\n  // 使用自定义线程池中的线程\n  public static CompletableFuture<Void> runAsync(Runnable runnable, Executor executor); \n  ```\n- 示例代码\n  ```java\n  CompletableFuture.runAsync(() -> {\n      // TODO 执行任务\n  });\n  ```\n\n### 支持返回值\n\n- 方法签名\n  ```java\n  // 使用默认线程池中的线程\n  public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier);\n  // 使用自定义线程池中的线程\n  public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier, Executor executor); \n  ```\n\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 执行任务\n      return null;\n  });\n    ```\n\n# 任务完成时回调方法\n\n当CompletableFuture任务执行完成或者抛出异常的时候，可以执行特定的回调方法。\n\n### 不接参数、无返回值\n\n> 前一个任务执行完成后执行；任务之间**无参数传递**，回调方法**无返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> thenRun(Runnable action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> thenRunAsync(Runnable action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> thenRunAsync(Runnable action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.runAsync(() -> {\n  }).thenRun(() -> {\n      // TODO 执行任务\n  });\n  ```\n\n### 接返回值、无返回值\n\n> 前一个任务执行完成后执行；前一个任务会将执行结果**作为参数**，传递到回调方法中，回调方法**无返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> thenAccept(Consumer<? super T> action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      return \"Result\";\n  }).thenAccept((result) -> {\n      // TODO 执行任务\n  });\n  ```\n\n### 接返回值、有返回值\n\n> 前一个任务执行完成后执行；前一个任务会将执行结果**作为参数**，传递到回调方法中，并且会调方法**有返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> thenApply(Function<? super T,? extends U> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      return \"Result_1\";\n  }).thenApply(() -> {\n      // TODO 执行任务\n      return \"Result_2\";\n  });\n  ```\n\n### 接异常、有返回值\n\n> 某个任务执行异常时执行；异常任务抛出的异常**作为参数**，传递到回调方法中，并且会调方法**有返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<T> exceptionally(Function<Throwable, ? extends T> fn);\n  // 使用默认线程池中的线程\n  public CompletableFuture<T> exceptionallyAsync(Function<Throwable, ? extends T> fn);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<T> exceptionallyAsync(Function<Throwable, ? extends T> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.runAsync(() -> {\n      throw new RuntimeException();\n  }).exceptionally((exception) -> {\n      // TODO 处理异常\n      return \"ERROR!\";\n  });\n  ```\n\n### 接返回值和异常、无返回值\n\n> 前一个任务执行完成或出现异常时执行；前一个任务会将结果或抛出的异常**作为参数**，传递到回调方法中，回调方法**无返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<T> whenComplete(BiConsumer<? super T, ? super Throwable> action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      throw new RuntimeException();\n  }).whenCompleteAsync((result, exception) -> {\n      if (exception != null) {\n          // TODO 处理异常\n      } else {\n          // TODO 执行任务\n      }\n  });\n  ```\n\n### 接返回值和异常、有返回值\n\n> 前一个任务执行完成后执行；前一个任务会将结果或抛出的异常**作为参数**，传递到回调方法中，回调方法**有返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> handle(BiFunction<? super T, Throwable, ? extends U> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      throw new RuntimeException();\n  }).handleAsync((result, exception) -> {\n      if (exception != null) {\n          // TODO 处理异常\n          return \"ERROR!\";\n      } else {\n          // 执行任务\n          return \"SUCCESS!\";\n      }\n  });\n  ```\n\n# 两个任务组合\n\n### 任务转化\n\n> 将前一个任务的执行结果**作为参数**进行处理，处理后**返回一个新的任务**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> thenCompose(Function<? super T, ? extends CompletionStage<U>> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture<String> task = CompletableFuture.supplyAsync(() -> {\n      return \"任务一的结果\";\n  });\n  \n  CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n      return \"任务二的结果\";\n  }).thenComposeAsync((result) -> {\n      // TODO 执行任务\n      return task;\n  });\n  ```\n\n### “且”组合、接返回值、有返回值\n\n> 将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法有返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U,V> CompletableFuture<V> thenCombine(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn);\n  // 使用默认线程池中的线程\n  public <U,V> CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn);\n  // 使用自定义线程池中的线程\n  public <U,V> CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).thenCombineAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result1, result2) -> {\n      // 任务一和任务二都完成时执行的回调方法\n      return null;\n  });\n  ```\n\n### “且”组合、接返回值、无返回值\n\n> 将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<Void> thenAcceptBoth(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).thenAcceptBothAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result1, result2) -> {\n      // TODO 任务一和任务二都完成时执行的回调方法\n  });\n  ```\n\n### “且”组合、不接参数、无返回值\n\n> 将两个任务组合，当两个任务都正常执行完了，执行回调方法，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> runAfterBoth(CompletionStage<?> other, Runnable action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).runAfterBothAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), () -> {\n      // TODO 任务一和任务二都完成时执行的回调方法\n  });\n  ```\n\n### “或”组合、接返回值、有返回值\n\n> 将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法有返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> applyToEither(CompletionStage<? extends T> other, Function<? super T, U> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T, U> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T, U> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).applyToEitherAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result) -> {\n      // TODO 任务一和任务二任意一个执行完成时执行的回调方法\n      return \"SUCCESS\";\n  });\n  ```\n\n### “或”组合、接返回值、无返回值\n\n> 将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> acceptEither(CompletionStage<? extends T> other, Consumer<? super T> action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      try {\n          Thread.sleep(10);\n      } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n      }\n      return \"任务一的结果\";\n  }).acceptEitherAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result) -> {\n      // TODO 任务一和任务二任意一个执行完成时执行的回调方法\n  });\n  ```\n\n### “或”组合、不接参数、无返回值\n\n> 将两个任务组合，其中任意一个任务执行完成，执行回调方法，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> runAfterEither(CompletionStage<?> other, Runnable action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> runAfterEitherAsync(CompletionStage<?> other, Runnable action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> runAfterEitherAsync(CompletionStage<?> other, Runnable action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      try {\n          Thread.sleep(10);\n      } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n      }\n      return \"任务一的结果\";\n  }).runAfterEitherAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), () -> {\n      // TODO 任务一和任务二任意一个执行完成时执行的回调方法\n  });\n  ```\n\n# 多个任务组合\n\n### “任意一个”组合\n\n> 将多个任务组合，其中任意一个任务执行完成即可拿到该任务的执行结果（执行结果为Object类型），或执行接下来的任务\n\n- 方法签名\n  ```java\n  public static CompletableFuture<Object> anyOf(CompletableFuture<?>... cfs);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture<String> task1 = CompletableFuture.supplyAsync(() -> {\n      return \"任务一的结果\";\n  });\n  \n  CompletableFuture<String> task2 = CompletableFuture.supplyAsync(() -> {\n      return \"任务二的结果\";\n  });\n  \n  Object result = CompletableFuture.anyOf(task1, task2).join();\n  ```\n\n### “所有”组合\n\n> 将多个任务组合，当所有任务都执行完成后执行接下来的任务\n\n- 方法签名\n  ```java\n  public static CompletableFuture<Void> allOf(CompletableFuture<?>... cfs);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture<String> task1 = CompletableFuture.supplyAsync(() -> {\n      return \"任务一的结果\";\n  });\n  \n  CompletableFuture<String> task2 = CompletableFuture.supplyAsync(() -> {\n      return \"任务二的结果\";\n  });\n  \n  Object join = CompletableFuture.allOf(task1, task2).join();\n  ```\n","source":"_posts/2023-08-10-CompletableFuture的使用.md","raw":"---\ntitle: CompletableFuture的使用\ndate: 2023-08-10 12:17:39\ncover: ../img/Java/Thread/Thread.svg\ntags: [ Java,并发,CompletableFuture ]\ncategories:\n  - Java\n---\n\n> CompletableFuture类提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法。\n\n# 总结\n\n<table>\n    <tr>\n        <th>分类</th>\n        <th>方法名</th>\n        <th>描述</th>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">创建异步任务</th>\n        <td><code>runAsync</code></td>\n        <td>不支持返回值</td>\n    </tr>\n    <tr>\n        <td><code>supplyAsync</code></td>\n        <td>支持返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"6\">创建异步任务</th>\n        <td><code>thenRun</code>、<code>thenRunAsync</code></td>\n        <td>不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAccept</code>、<code>thenAcceptAsync</code></td>\n        <td>接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenApply</code>、<code>thenApplyAsync</code></td>\n        <td>接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>exceptionally</code>、<code>exceptionallyAsync</code></td>\n        <td>接异常、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>whenComplete</code>、<code>whenCompleteAsync</code></td>\n        <td>接返回值和异常、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>handle</code>、<code>handleAsync</code></td>\n        <td>接返回值和异常、有返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"7\">两个任务组合</th>\n        <td><code>thenCompose</code>、<code>thenComposeAsync</code></td>\n        <td>任务转化</td>\n    </tr>\n    <tr>\n        <td><code>thenCombine</code>、<code>thenCombineAsync</code></td>\n        <td>“且”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAcceptBoth</code>、<code>thenAcceptBothAsync</code></td>\n        <td>“且”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterBoth</code>、<code>runAfterBothAsync</code></td>\n        <td>“且”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>applyToEither</code>、<code>applyToEitherAsync</code></td>\n        <td>“或”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>acceptEither</code>、<code>acceptEitherAsync</code></td>\n        <td>“或”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterEither</code>、<code>runAfterEitherAsync</code></td>\n        <td>“或”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">多个任务组合</th>\n        <td><code>anyOf</code></td>\n        <td>“任意一个”组合</td>\n    </tr>\n    <tr>\n        <td><code>allOf</code></td>\n        <td>“所有”组合</td>\n    </tr>\n</table>\n\n> 在CompletableFuture中如果使用没有指定线程池的方法，则会使用`ForkJoinPool.commonPool()`作为它的线程池执行异步代码。\n\n# 创建异步任务\n\n### 不支持返回值\n\n- 方法签名\n  ```java\n  // 使用默认线程池中的线程\n  public static CompletableFuture<Void> runAsync(Runnable runnable);\n  // 使用自定义线程池中的线程\n  public static CompletableFuture<Void> runAsync(Runnable runnable, Executor executor); \n  ```\n- 示例代码\n  ```java\n  CompletableFuture.runAsync(() -> {\n      // TODO 执行任务\n  });\n  ```\n\n### 支持返回值\n\n- 方法签名\n  ```java\n  // 使用默认线程池中的线程\n  public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier);\n  // 使用自定义线程池中的线程\n  public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier, Executor executor); \n  ```\n\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 执行任务\n      return null;\n  });\n    ```\n\n# 任务完成时回调方法\n\n当CompletableFuture任务执行完成或者抛出异常的时候，可以执行特定的回调方法。\n\n### 不接参数、无返回值\n\n> 前一个任务执行完成后执行；任务之间**无参数传递**，回调方法**无返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> thenRun(Runnable action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> thenRunAsync(Runnable action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> thenRunAsync(Runnable action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.runAsync(() -> {\n  }).thenRun(() -> {\n      // TODO 执行任务\n  });\n  ```\n\n### 接返回值、无返回值\n\n> 前一个任务执行完成后执行；前一个任务会将执行结果**作为参数**，传递到回调方法中，回调方法**无返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> thenAccept(Consumer<? super T> action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      return \"Result\";\n  }).thenAccept((result) -> {\n      // TODO 执行任务\n  });\n  ```\n\n### 接返回值、有返回值\n\n> 前一个任务执行完成后执行；前一个任务会将执行结果**作为参数**，传递到回调方法中，并且会调方法**有返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> thenApply(Function<? super T,? extends U> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      return \"Result_1\";\n  }).thenApply(() -> {\n      // TODO 执行任务\n      return \"Result_2\";\n  });\n  ```\n\n### 接异常、有返回值\n\n> 某个任务执行异常时执行；异常任务抛出的异常**作为参数**，传递到回调方法中，并且会调方法**有返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<T> exceptionally(Function<Throwable, ? extends T> fn);\n  // 使用默认线程池中的线程\n  public CompletableFuture<T> exceptionallyAsync(Function<Throwable, ? extends T> fn);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<T> exceptionallyAsync(Function<Throwable, ? extends T> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.runAsync(() -> {\n      throw new RuntimeException();\n  }).exceptionally((exception) -> {\n      // TODO 处理异常\n      return \"ERROR!\";\n  });\n  ```\n\n### 接返回值和异常、无返回值\n\n> 前一个任务执行完成或出现异常时执行；前一个任务会将结果或抛出的异常**作为参数**，传递到回调方法中，回调方法**无返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<T> whenComplete(BiConsumer<? super T, ? super Throwable> action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      throw new RuntimeException();\n  }).whenCompleteAsync((result, exception) -> {\n      if (exception != null) {\n          // TODO 处理异常\n      } else {\n          // TODO 执行任务\n      }\n  });\n  ```\n\n### 接返回值和异常、有返回值\n\n> 前一个任务执行完成后执行；前一个任务会将结果或抛出的异常**作为参数**，传递到回调方法中，回调方法**有返回值**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> handle(BiFunction<? super T, Throwable, ? extends U> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      throw new RuntimeException();\n  }).handleAsync((result, exception) -> {\n      if (exception != null) {\n          // TODO 处理异常\n          return \"ERROR!\";\n      } else {\n          // 执行任务\n          return \"SUCCESS!\";\n      }\n  });\n  ```\n\n# 两个任务组合\n\n### 任务转化\n\n> 将前一个任务的执行结果**作为参数**进行处理，处理后**返回一个新的任务**\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> thenCompose(Function<? super T, ? extends CompletionStage<U>> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> thenComposeAsync(Function<? super T, ? extends CompletionStage<U>> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture<String> task = CompletableFuture.supplyAsync(() -> {\n      return \"任务一的结果\";\n  });\n  \n  CompletableFuture<String> stringCompletableFuture = CompletableFuture.supplyAsync(() -> {\n      return \"任务二的结果\";\n  }).thenComposeAsync((result) -> {\n      // TODO 执行任务\n      return task;\n  });\n  ```\n\n### “且”组合、接返回值、有返回值\n\n> 将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法有返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U,V> CompletableFuture<V> thenCombine(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn);\n  // 使用默认线程池中的线程\n  public <U,V> CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn);\n  // 使用自定义线程池中的线程\n  public <U,V> CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).thenCombineAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result1, result2) -> {\n      // 任务一和任务二都完成时执行的回调方法\n      return null;\n  });\n  ```\n\n### “且”组合、接返回值、无返回值\n\n> 将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<Void> thenAcceptBoth(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).thenAcceptBothAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result1, result2) -> {\n      // TODO 任务一和任务二都完成时执行的回调方法\n  });\n  ```\n\n### “且”组合、不接参数、无返回值\n\n> 将两个任务组合，当两个任务都正常执行完了，执行回调方法，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> runAfterBoth(CompletionStage<?> other, Runnable action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other, Runnable action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).runAfterBothAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), () -> {\n      // TODO 任务一和任务二都完成时执行的回调方法\n  });\n  ```\n\n### “或”组合、接返回值、有返回值\n\n> 将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法有返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public <U> CompletableFuture<U> applyToEither(CompletionStage<? extends T> other, Function<? super T, U> fn);\n  // 使用默认线程池中的线程\n  public <U> CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T, U> fn);\n  // 使用自定义线程池中的线程\n  public <U> CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T, U> fn, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      return \"任务一的结果\";\n  }).applyToEitherAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result) -> {\n      // TODO 任务一和任务二任意一个执行完成时执行的回调方法\n      return \"SUCCESS\";\n  });\n  ```\n\n### “或”组合、接返回值、无返回值\n\n> 将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> acceptEither(CompletionStage<? extends T> other, Consumer<? super T> action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      try {\n          Thread.sleep(10);\n      } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n      }\n      return \"任务一的结果\";\n  }).acceptEitherAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), (result) -> {\n      // TODO 任务一和任务二任意一个执行完成时执行的回调方法\n  });\n  ```\n\n### “或”组合、不接参数、无返回值\n\n> 将两个任务组合，其中任意一个任务执行完成，执行回调方法，回调方法无返回值\n\n- 方法签名\n  ```java\n  // 使用调用它的线程上运行（一般是主线程）\n  public CompletableFuture<Void> runAfterEither(CompletionStage<?> other, Runnable action);\n  // 使用默认线程池中的线程\n  public CompletableFuture<Void> runAfterEitherAsync(CompletionStage<?> other, Runnable action);\n  // 使用自定义线程池中的线程\n  public CompletableFuture<Void> runAfterEitherAsync(CompletionStage<?> other, Runnable action, Executor executor);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture.supplyAsync(() -> {\n      // TODO 任务一\n      try {\n          Thread.sleep(10);\n      } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n      }\n      return \"任务一的结果\";\n  }).runAfterEitherAsync(CompletableFuture.supplyAsync(() -> {\n      // TODO 任务二\n      return \"任务二的结果\";\n  }), () -> {\n      // TODO 任务一和任务二任意一个执行完成时执行的回调方法\n  });\n  ```\n\n# 多个任务组合\n\n### “任意一个”组合\n\n> 将多个任务组合，其中任意一个任务执行完成即可拿到该任务的执行结果（执行结果为Object类型），或执行接下来的任务\n\n- 方法签名\n  ```java\n  public static CompletableFuture<Object> anyOf(CompletableFuture<?>... cfs);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture<String> task1 = CompletableFuture.supplyAsync(() -> {\n      return \"任务一的结果\";\n  });\n  \n  CompletableFuture<String> task2 = CompletableFuture.supplyAsync(() -> {\n      return \"任务二的结果\";\n  });\n  \n  Object result = CompletableFuture.anyOf(task1, task2).join();\n  ```\n\n### “所有”组合\n\n> 将多个任务组合，当所有任务都执行完成后执行接下来的任务\n\n- 方法签名\n  ```java\n  public static CompletableFuture<Void> allOf(CompletableFuture<?>... cfs);\n  ```\n- 示例代码\n  ```java\n  CompletableFuture<String> task1 = CompletableFuture.supplyAsync(() -> {\n      return \"任务一的结果\";\n  });\n  \n  CompletableFuture<String> task2 = CompletableFuture.supplyAsync(() -> {\n      return \"任务二的结果\";\n  });\n  \n  Object join = CompletableFuture.allOf(task1, task2).join();\n  ```\n","slug":"2023-08-10-CompletableFuture的使用","published":1,"updated":"2024-04-13T14:25:52.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv9oiygu0001f0vdcnpj4n09","content":"<blockquote>\n<p>CompletableFuture类提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法。</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><table>\n    <tr>\n        <th>分类</th>\n        <th>方法名</th>\n        <th>描述</th>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">创建异步任务</th>\n        <td><code>runAsync</code></td>\n        <td>不支持返回值</td>\n    </tr>\n    <tr>\n        <td><code>supplyAsync</code></td>\n        <td>支持返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"6\">创建异步任务</th>\n        <td><code>thenRun</code>、<code>thenRunAsync</code></td>\n        <td>不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAccept</code>、<code>thenAcceptAsync</code></td>\n        <td>接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenApply</code>、<code>thenApplyAsync</code></td>\n        <td>接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>exceptionally</code>、<code>exceptionallyAsync</code></td>\n        <td>接异常、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>whenComplete</code>、<code>whenCompleteAsync</code></td>\n        <td>接返回值和异常、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>handle</code>、<code>handleAsync</code></td>\n        <td>接返回值和异常、有返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"7\">两个任务组合</th>\n        <td><code>thenCompose</code>、<code>thenComposeAsync</code></td>\n        <td>任务转化</td>\n    </tr>\n    <tr>\n        <td><code>thenCombine</code>、<code>thenCombineAsync</code></td>\n        <td>“且”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAcceptBoth</code>、<code>thenAcceptBothAsync</code></td>\n        <td>“且”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterBoth</code>、<code>runAfterBothAsync</code></td>\n        <td>“且”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>applyToEither</code>、<code>applyToEitherAsync</code></td>\n        <td>“或”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>acceptEither</code>、<code>acceptEitherAsync</code></td>\n        <td>“或”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterEither</code>、<code>runAfterEitherAsync</code></td>\n        <td>“或”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">多个任务组合</th>\n        <td><code>anyOf</code></td>\n        <td>“任意一个”组合</td>\n    </tr>\n    <tr>\n        <td><code>allOf</code></td>\n        <td>“所有”组合</td>\n    </tr>\n</table>\n\n<blockquote>\n<p>在CompletableFuture中如果使用没有指定线程池的方法，则会使用<code>ForkJoinPool.commonPool()</code>作为它的线程池执行异步代码。</p>\n</blockquote>\n<h1 id=\"创建异步任务\"><a href=\"#创建异步任务\" class=\"headerlink\" title=\"创建异步任务\"></a>创建异步任务</h1><h3 id=\"不支持返回值\"><a href=\"#不支持返回值\" class=\"headerlink\" title=\"不支持返回值\"></a>不支持返回值</h3><ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAsync</span><span class=\"params\">(Runnable runnable)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAsync</span><span class=\"params\">(Runnable runnable, Executor executor)</span>; </span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"支持返回值\"><a href=\"#支持返回值\" class=\"headerlink\" title=\"支持返回值\"></a>支持返回值</h3><ul>\n<li><p>方法签名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">supplyAsync</span><span class=\"params\">(Supplier&lt;U&gt; supplier)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">supplyAsync</span><span class=\"params\">(Supplier&lt;U&gt; supplier, Executor executor)</span>; </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"任务完成时回调方法\"><a href=\"#任务完成时回调方法\" class=\"headerlink\" title=\"任务完成时回调方法\"></a>任务完成时回调方法</h1><p>当CompletableFuture任务执行完成或者抛出异常的时候，可以执行特定的回调方法。</p>\n<h3 id=\"不接参数、无返回值\"><a href=\"#不接参数、无返回值\" class=\"headerlink\" title=\"不接参数、无返回值\"></a>不接参数、无返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；任务之间<strong>无参数传递</strong>，回调方法<strong>无返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenRun</span><span class=\"params\">(Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenRunAsync</span><span class=\"params\">(Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenRunAsync</span><span class=\"params\">(Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">&#125;).thenRun(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值、无返回值\"><a href=\"#接返回值、无返回值\" class=\"headerlink\" title=\"接返回值、无返回值\"></a>接返回值、无返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；前一个任务会将执行结果<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>无返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAccept</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptAsync</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptAsync</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Result&quot;</span>;</span><br><span class=\"line\">&#125;).thenAccept((result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值、有返回值\"><a href=\"#接返回值、有返回值\" class=\"headerlink\" title=\"接返回值、有返回值\"></a>接返回值、有返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；前一个任务会将执行结果<strong>作为参数</strong>，传递到回调方法中，并且会调方法<strong>有返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenApply</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T,? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenApplyAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T,? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenApplyAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T,? extends U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Result_1&quot;</span>;</span><br><span class=\"line\">&#125;).thenApply(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Result_2&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接异常、有返回值\"><a href=\"#接异常、有返回值\" class=\"headerlink\" title=\"接异常、有返回值\"></a>接异常、有返回值</h3><blockquote>\n<p>某个任务执行异常时执行；异常任务抛出的异常<strong>作为参数</strong>，传递到回调方法中，并且会调方法<strong>有返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">exceptionally</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">exceptionallyAsync</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">exceptionallyAsync</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;).exceptionally((exception) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;ERROR!&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值和异常、无返回值\"><a href=\"#接返回值和异常、无返回值\" class=\"headerlink\" title=\"接返回值和异常、无返回值\"></a>接返回值和异常、无返回值</h3><blockquote>\n<p>前一个任务执行完成或出现异常时执行；前一个任务会将结果或抛出的异常<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>无返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">whenComplete</span><span class=\"params\">(BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> Throwable&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">whenCompleteAsync</span><span class=\"params\">(BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> Throwable&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">whenCompleteAsync</span><span class=\"params\">(BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> Throwable&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;).whenCompleteAsync((result, exception) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值和异常、有返回值\"><a href=\"#接返回值和异常、有返回值\" class=\"headerlink\" title=\"接返回值和异常、有返回值\"></a>接返回值和异常、有返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；前一个任务会将结果或抛出的异常<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>有返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">handle</span><span class=\"params\">(BiFunction&lt;? <span class=\"built_in\">super</span> T, Throwable, ? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">handleAsync</span><span class=\"params\">(BiFunction&lt;? <span class=\"built_in\">super</span> T, Throwable, ? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">handleAsync</span><span class=\"params\">(BiFunction&lt;? <span class=\"built_in\">super</span> T, Throwable, ? extends U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;).handleAsync((result, exception) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;ERROR!&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行任务</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;SUCCESS!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"两个任务组合\"><a href=\"#两个任务组合\" class=\"headerlink\" title=\"两个任务组合\"></a>两个任务组合</h1><h3 id=\"任务转化\"><a href=\"#任务转化\" class=\"headerlink\" title=\"任务转化\"></a>任务转化</h3><blockquote>\n<p>将前一个任务的执行结果<strong>作为参数</strong>进行处理，处理后<strong>返回一个新的任务</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenCompose</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenComposeAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenComposeAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; task = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;).thenComposeAsync((result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> task;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“且”组合、接返回值、有返回值\"><a href=\"#“且”组合、接返回值、有返回值\" class=\"headerlink\" title=\"“且”组合、接返回值、有返回值\"></a>“且”组合、接返回值、有返回值</h3><blockquote>\n<p>将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法有返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class=\"title function_\">thenCombine</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"built_in\">super</span> T,? <span class=\"built_in\">super</span> U,? extends V&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class=\"title function_\">thenCombineAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"built_in\">super</span> T,? <span class=\"built_in\">super</span> U,? extends V&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class=\"title function_\">thenCombineAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"built_in\">super</span> T,? <span class=\"built_in\">super</span> U,? extends V&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).thenCombineAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result1, result2) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 任务一和任务二都完成时执行的回调方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“且”组合、接返回值、无返回值\"><a href=\"#“且”组合、接返回值、无返回值\" class=\"headerlink\" title=\"“且”组合、接返回值、无返回值\"></a>“且”组合、接返回值、无返回值</h3><blockquote>\n<p>将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptBoth</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> U&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptBothAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> U&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptBothAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> U&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).thenAcceptBothAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result1, result2) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二都完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“且”组合、不接参数、无返回值\"><a href=\"#“且”组合、不接参数、无返回值\" class=\"headerlink\" title=\"“且”组合、不接参数、无返回值\"></a>“且”组合、不接参数、无返回值</h3><blockquote>\n<p>将两个任务组合，当两个任务都正常执行完了，执行回调方法，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterBoth</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterBothAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterBothAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).runAfterBothAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), () -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二都完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“或”组合、接返回值、有返回值\"><a href=\"#“或”组合、接返回值、有返回值\" class=\"headerlink\" title=\"“或”组合、接返回值、有返回值\"></a>“或”组合、接返回值、有返回值</h3><blockquote>\n<p>将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法有返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">applyToEither</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"built_in\">super</span> T, U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">applyToEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"built_in\">super</span> T, U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">applyToEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"built_in\">super</span> T, U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).applyToEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;SUCCESS&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“或”组合、接返回值、无返回值\"><a href=\"#“或”组合、接返回值、无返回值\" class=\"headerlink\" title=\"“或”组合、接返回值、无返回值\"></a>“或”组合、接返回值、无返回值</h3><blockquote>\n<p>将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">acceptEither</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">acceptEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">acceptEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).acceptEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“或”组合、不接参数、无返回值\"><a href=\"#“或”组合、不接参数、无返回值\" class=\"headerlink\" title=\"“或”组合、不接参数、无返回值\"></a>“或”组合、不接参数、无返回值</h3><blockquote>\n<p>将两个任务组合，其中任意一个任务执行完成，执行回调方法，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterEither</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterEitherAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterEitherAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).runAfterEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), () -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"多个任务组合\"><a href=\"#多个任务组合\" class=\"headerlink\" title=\"多个任务组合\"></a>多个任务组合</h1><h3 id=\"“任意一个”组合\"><a href=\"#“任意一个”组合\" class=\"headerlink\" title=\"“任意一个”组合\"></a>“任意一个”组合</h3><blockquote>\n<p>将多个任务组合，其中任意一个任务执行完成即可拿到该任务的执行结果（执行结果为Object类型），或执行接下来的任务</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Object&gt; <span class=\"title function_\">anyOf</span><span class=\"params\">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; task1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture&lt;String&gt; task2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> CompletableFuture.anyOf(task1, task2).join();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“所有”组合\"><a href=\"#“所有”组合\" class=\"headerlink\" title=\"“所有”组合\"></a>“所有”组合</h3><blockquote>\n<p>将多个任务组合，当所有任务都执行完成后执行接下来的任务</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">allOf</span><span class=\"params\">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; task1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture&lt;String&gt; task2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">join</span> <span class=\"operator\">=</span> CompletableFuture.allOf(task1, task2).join();</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>CompletableFuture类提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法。</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><table>\n    <tr>\n        <th>分类</th>\n        <th>方法名</th>\n        <th>描述</th>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">创建异步任务</th>\n        <td><code>runAsync</code></td>\n        <td>不支持返回值</td>\n    </tr>\n    <tr>\n        <td><code>supplyAsync</code></td>\n        <td>支持返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"6\">创建异步任务</th>\n        <td><code>thenRun</code>、<code>thenRunAsync</code></td>\n        <td>不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAccept</code>、<code>thenAcceptAsync</code></td>\n        <td>接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenApply</code>、<code>thenApplyAsync</code></td>\n        <td>接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>exceptionally</code>、<code>exceptionallyAsync</code></td>\n        <td>接异常、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>whenComplete</code>、<code>whenCompleteAsync</code></td>\n        <td>接返回值和异常、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>handle</code>、<code>handleAsync</code></td>\n        <td>接返回值和异常、有返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"7\">两个任务组合</th>\n        <td><code>thenCompose</code>、<code>thenComposeAsync</code></td>\n        <td>任务转化</td>\n    </tr>\n    <tr>\n        <td><code>thenCombine</code>、<code>thenCombineAsync</code></td>\n        <td>“且”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>thenAcceptBoth</code>、<code>thenAcceptBothAsync</code></td>\n        <td>“且”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterBoth</code>、<code>runAfterBothAsync</code></td>\n        <td>“且”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>applyToEither</code>、<code>applyToEitherAsync</code></td>\n        <td>“或”组合、接返回值、有返回值</td>\n    </tr>\n    <tr>\n        <td><code>acceptEither</code>、<code>acceptEitherAsync</code></td>\n        <td>“或”组合、接返回值、无返回值</td>\n    </tr>\n    <tr>\n        <td><code>runAfterEither</code>、<code>runAfterEitherAsync</code></td>\n        <td>“或”组合、不接参数、无返回值</td>\n    </tr>\n    <tr>\n        <th rowspan=\"2\">多个任务组合</th>\n        <td><code>anyOf</code></td>\n        <td>“任意一个”组合</td>\n    </tr>\n    <tr>\n        <td><code>allOf</code></td>\n        <td>“所有”组合</td>\n    </tr>\n</table>\n\n<blockquote>\n<p>在CompletableFuture中如果使用没有指定线程池的方法，则会使用<code>ForkJoinPool.commonPool()</code>作为它的线程池执行异步代码。</p>\n</blockquote>\n<h1 id=\"创建异步任务\"><a href=\"#创建异步任务\" class=\"headerlink\" title=\"创建异步任务\"></a>创建异步任务</h1><h3 id=\"不支持返回值\"><a href=\"#不支持返回值\" class=\"headerlink\" title=\"不支持返回值\"></a>不支持返回值</h3><ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAsync</span><span class=\"params\">(Runnable runnable)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAsync</span><span class=\"params\">(Runnable runnable, Executor executor)</span>; </span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"支持返回值\"><a href=\"#支持返回值\" class=\"headerlink\" title=\"支持返回值\"></a>支持返回值</h3><ul>\n<li><p>方法签名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">supplyAsync</span><span class=\"params\">(Supplier&lt;U&gt; supplier)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">supplyAsync</span><span class=\"params\">(Supplier&lt;U&gt; supplier, Executor executor)</span>; </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"任务完成时回调方法\"><a href=\"#任务完成时回调方法\" class=\"headerlink\" title=\"任务完成时回调方法\"></a>任务完成时回调方法</h1><p>当CompletableFuture任务执行完成或者抛出异常的时候，可以执行特定的回调方法。</p>\n<h3 id=\"不接参数、无返回值\"><a href=\"#不接参数、无返回值\" class=\"headerlink\" title=\"不接参数、无返回值\"></a>不接参数、无返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；任务之间<strong>无参数传递</strong>，回调方法<strong>无返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenRun</span><span class=\"params\">(Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenRunAsync</span><span class=\"params\">(Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenRunAsync</span><span class=\"params\">(Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">&#125;).thenRun(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值、无返回值\"><a href=\"#接返回值、无返回值\" class=\"headerlink\" title=\"接返回值、无返回值\"></a>接返回值、无返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；前一个任务会将执行结果<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>无返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAccept</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptAsync</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptAsync</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Result&quot;</span>;</span><br><span class=\"line\">&#125;).thenAccept((result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值、有返回值\"><a href=\"#接返回值、有返回值\" class=\"headerlink\" title=\"接返回值、有返回值\"></a>接返回值、有返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；前一个任务会将执行结果<strong>作为参数</strong>，传递到回调方法中，并且会调方法<strong>有返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenApply</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T,? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenApplyAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T,? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenApplyAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T,? extends U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Result_1&quot;</span>;</span><br><span class=\"line\">&#125;).thenApply(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Result_2&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接异常、有返回值\"><a href=\"#接异常、有返回值\" class=\"headerlink\" title=\"接异常、有返回值\"></a>接异常、有返回值</h3><blockquote>\n<p>某个任务执行异常时执行；异常任务抛出的异常<strong>作为参数</strong>，传递到回调方法中，并且会调方法<strong>有返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">exceptionally</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">exceptionallyAsync</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">exceptionallyAsync</span><span class=\"params\">(Function&lt;Throwable, ? extends T&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;).exceptionally((exception) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;ERROR!&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值和异常、无返回值\"><a href=\"#接返回值和异常、无返回值\" class=\"headerlink\" title=\"接返回值和异常、无返回值\"></a>接返回值和异常、无返回值</h3><blockquote>\n<p>前一个任务执行完成或出现异常时执行；前一个任务会将结果或抛出的异常<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>无返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">whenComplete</span><span class=\"params\">(BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> Throwable&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">whenCompleteAsync</span><span class=\"params\">(BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> Throwable&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"title function_\">whenCompleteAsync</span><span class=\"params\">(BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> Throwable&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;).whenCompleteAsync((result, exception) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"接返回值和异常、有返回值\"><a href=\"#接返回值和异常、有返回值\" class=\"headerlink\" title=\"接返回值和异常、有返回值\"></a>接返回值和异常、有返回值</h3><blockquote>\n<p>前一个任务执行完成后执行；前一个任务会将结果或抛出的异常<strong>作为参数</strong>，传递到回调方法中，回调方法<strong>有返回值</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">handle</span><span class=\"params\">(BiFunction&lt;? <span class=\"built_in\">super</span> T, Throwable, ? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">handleAsync</span><span class=\"params\">(BiFunction&lt;? <span class=\"built_in\">super</span> T, Throwable, ? extends U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">handleAsync</span><span class=\"params\">(BiFunction&lt;? <span class=\"built_in\">super</span> T, Throwable, ? extends U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">&#125;).handleAsync((result, exception) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 处理异常</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;ERROR!&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行任务</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;SUCCESS!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"两个任务组合\"><a href=\"#两个任务组合\" class=\"headerlink\" title=\"两个任务组合\"></a>两个任务组合</h1><h3 id=\"任务转化\"><a href=\"#任务转化\" class=\"headerlink\" title=\"任务转化\"></a>任务转化</h3><blockquote>\n<p>将前一个任务的执行结果<strong>作为参数</strong>进行处理，处理后<strong>返回一个新的任务</strong></p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenCompose</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenComposeAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">thenComposeAsync</span><span class=\"params\">(Function&lt;? <span class=\"built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; task = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;).thenComposeAsync((result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> task;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“且”组合、接返回值、有返回值\"><a href=\"#“且”组合、接返回值、有返回值\" class=\"headerlink\" title=\"“且”组合、接返回值、有返回值\"></a>“且”组合、接返回值、有返回值</h3><blockquote>\n<p>将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法有返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class=\"title function_\">thenCombine</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"built_in\">super</span> T,? <span class=\"built_in\">super</span> U,? extends V&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class=\"title function_\">thenCombineAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"built_in\">super</span> T,? <span class=\"built_in\">super</span> U,? extends V&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; <span class=\"title function_\">thenCombineAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class=\"built_in\">super</span> T,? <span class=\"built_in\">super</span> U,? extends V&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).thenCombineAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result1, result2) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 任务一和任务二都完成时执行的回调方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“且”组合、接返回值、无返回值\"><a href=\"#“且”组合、接返回值、无返回值\" class=\"headerlink\" title=\"“且”组合、接返回值、无返回值\"></a>“且”组合、接返回值、无返回值</h3><blockquote>\n<p>将两个任务组合，当两个任务都正常执行完了，将两个任务的结果作为参数，传递到回调方法中，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptBoth</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> U&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptBothAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> U&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"title function_\">thenAcceptBothAsync</span><span class=\"params\">(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class=\"built_in\">super</span> T, ? <span class=\"built_in\">super</span> U&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).thenAcceptBothAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result1, result2) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二都完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“且”组合、不接参数、无返回值\"><a href=\"#“且”组合、不接参数、无返回值\" class=\"headerlink\" title=\"“且”组合、不接参数、无返回值\"></a>“且”组合、不接参数、无返回值</h3><blockquote>\n<p>将两个任务组合，当两个任务都正常执行完了，执行回调方法，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterBoth</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterBothAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterBothAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).runAfterBothAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), () -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二都完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“或”组合、接返回值、有返回值\"><a href=\"#“或”组合、接返回值、有返回值\" class=\"headerlink\" title=\"“或”组合、接返回值、有返回值\"></a>“或”组合、接返回值、有返回值</h3><blockquote>\n<p>将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法有返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">applyToEither</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"built_in\">super</span> T, U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">applyToEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"built_in\">super</span> T, U&gt; fn)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"title function_\">applyToEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"built_in\">super</span> T, U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).applyToEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;SUCCESS&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“或”组合、接返回值、无返回值\"><a href=\"#“或”组合、接返回值、无返回值\" class=\"headerlink\" title=\"“或”组合、接返回值、无返回值\"></a>“或”组合、接返回值、无返回值</h3><blockquote>\n<p>将两个任务组合，其中任意一个任务执行完成，将该任务的结果作为参数，传递到回调方法中，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">acceptEither</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">acceptEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">acceptEitherAsync</span><span class=\"params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).acceptEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), (result) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“或”组合、不接参数、无返回值\"><a href=\"#“或”组合、不接参数、无返回值\" class=\"headerlink\" title=\"“或”组合、不接参数、无返回值\"></a>“或”组合、不接参数、无返回值</h3><blockquote>\n<p>将两个任务组合，其中任意一个任务执行完成，执行回调方法，回调方法无返回值</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用调用它的线程上运行（一般是主线程）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterEither</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用默认线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterEitherAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义线程池中的线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">runAfterEitherAsync</span><span class=\"params\">(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;).runAfterEitherAsync(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;), () -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO 任务一和任务二任意一个执行完成时执行的回调方法</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"多个任务组合\"><a href=\"#多个任务组合\" class=\"headerlink\" title=\"多个任务组合\"></a>多个任务组合</h1><h3 id=\"“任意一个”组合\"><a href=\"#“任意一个”组合\" class=\"headerlink\" title=\"“任意一个”组合\"></a>“任意一个”组合</h3><blockquote>\n<p>将多个任务组合，其中任意一个任务执行完成即可拿到该任务的执行结果（执行结果为Object类型），或执行接下来的任务</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Object&gt; <span class=\"title function_\">anyOf</span><span class=\"params\">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; task1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture&lt;String&gt; task2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> CompletableFuture.anyOf(task1, task2).join();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"“所有”组合\"><a href=\"#“所有”组合\" class=\"headerlink\" title=\"“所有”组合\"></a>“所有”组合</h3><blockquote>\n<p>将多个任务组合，当所有任务都执行完成后执行接下来的任务</p>\n</blockquote>\n<ul>\n<li>方法签名<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"title function_\">allOf</span><span class=\"params\">(CompletableFuture&lt;?&gt;... cfs)</span>;</span><br></pre></td></tr></table></figure></li>\n<li>示例代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CompletableFuture&lt;String&gt; task1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务一的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture&lt;String&gt; task2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;任务二的结果&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">join</span> <span class=\"operator\">=</span> CompletableFuture.allOf(task1, task2).join();</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"设计模式-01.设计思想","keywords":"设计模式，设计思想","description":"设计模式第一部分-常用设计思想。","cover":"https://npm.elemecdn.com/lql_static@latest/logo/design_patterns.jpg","abbrlink":"c3dcce5d","date":"2024-04-21T15:22:58.000Z","_content":"\n# 设计思想\n\n> 1. 此系列文章非本人原创，是学习笔记。\n> 2. 设计模式系列以后会持续更新，包括已经发布的设计模式文章，因为后续还要再多看一下书，教程和开源项目等，继续润色文章。\n\n下面讲一些常见的设计思想\n\n## 基于接口而非实现编程\n\n这个原则非常重要，是一种非常有效的提高代码质量的手段，在平时的开发中特别经常被用到。\n\n### 如何解读原则中的“接口”二字？\n\n1. “基于接口而非实现编程”这条原则的英文描述是：“Program to an interface, not an implementation”。我们理解这条原则的时候，千万不要一开始就与具体的编程语言挂钩，局限在编程语言的“接口”语法中（比如 Java 中的 interface 接口语法）。这条原则最早出现于 1994 年 GoF 的《设计模式》这本书，它先于很多编程语言而诞生（比如 Java 语言），是一条比较抽象、泛化的设计思想。\n2. 实际上，理解这条原则的关键，就是理解其中的“接口”两个字。还记得我们上一节课讲的“接口”的定义吗？从本质上来看，“接口”就是一组“协议”或者“约定”，是功能提供者提供给使用者的一个“功能列表”。“接口”在不同的应用场景下会有不同的解读，比如服务端与客户端之间的“接口”，类库提供的“接口”，甚至是一组通信的协议都可以叫作“接口”。刚刚对“接口”的理解，都比较偏上层、偏抽象，与实际的写代码离得有点远。如果落实到具体的编码，“基于接口而非实现编程”这条原则中的“接口”，可以理解为编程语言中的接口或者抽象类。\n3. 前面我们提到，这条原则能非常有效地提高代码质量，之所以这么说，那是因为，应用这条原则，可以将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低耦合性，提高扩展性。\n4. 实际上，“基于接口而非实现编程”这条原则的另一个表述方式，是“基于抽象而非实现编程”。后者的表述方式其实更能体现这条原则的设计初衷。在软件开发中，最大的挑战之一就是需求的不断变化，这也是考验代码设计好坏的一个标准。**越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。好的代码设计，不仅能应对当下的需求，而且在将来需求发生变化的时候，仍然能够在不破坏原有代码设计的情况下灵活应对**。而抽象就是提高代码扩展性、灵活性、可维护性最有效的手段之一。\n\n\n\n### 如何将这条原则应用到实战中？\n\n假设我们的系统中有很多涉及图片处理和存储的业务逻辑。图片经过处理之后被上传到阿里云上。为了代码复用，我们封装了图片存储相关的代码逻辑，提供了一个统一的 AliyunImageStore 类，供整个系统来使用。具体的代码实现如下所示：\n\n```java\npublic class AliyunImageStore {\n  //...省略属性、构造函数等...\n  \n  public void createBucketIfNotExisting(String bucketName) {\n    // ...创建bucket代码逻辑...\n    // ...失败会抛出异常..\n  }\n  \n  public String generateAccessToken() {\n    // ...根据accesskey/secrectkey等生成access token\n  }\n  \n  public String uploadToAliyun(Image image, String bucketName, String accessToken) {\n    //...上传图片到阿里云...\n    //...返回图片存储在阿里云上的地址(url）...\n  }\n  \n  public Image downloadFromAliyun(String url, String accessToken) {\n    //...从阿里云下载图片...\n  }\n}\n\n// AliyunImageStore类的使用举例\npublic class ImageProcessingJob {\n  private static final String BUCKET_NAME = \"ai_images_bucket\";\n  //...省略其他无关代码...\n  \n  public void process() {\n    Image image = ...; //处理图片，并封装为Image对象\n    AliyunImageStore imageStore = new AliyunImageStore(/*省略参数*/);\n    imageStore.createBucketIfNotExisting(BUCKET_NAME);\n    String accessToken = imageStore.generateAccessToken();\n    imagestore.uploadToAliyun(image, BUCKET_NAME, accessToken);\n  }\n  \n}\n```\n\n\n\n1. 整个上传流程包含三个步骤：创建 bucket（你可以简单理解为存储目录）、生成 access token 访问凭证、携带 access token 上传图片到指定的 bucket 中。代码实现非常简单，类中的几个方法定义得都很干净，用起来也很清晰，乍看起来没有太大问题，完全能满足我们将图片存储在阿里云的业务需求。\n2. 不过，软件开发中唯一不变的就是变化。过了一段时间后，我们自建了私有云，不再将图片存储到阿里云了，而是将图片存储到自建私有云上。为了满足这样一个需求的变化，我们该如何修改代码呢？\n3. 我们需要重新设计实现一个存储图片到私有云的 PrivateImageStore 类，并用它替换掉项目中所有的 AliyunImageStore 类对象。这样的修改听起来并不复杂，只是简单替换而已，对整个代码的改动并不大。不过，我们经常说，“细节是魔鬼”。这句话在软件开发中特别适用。实际上，刚刚的设计实现方式，就隐藏了很多容易出问题的“魔鬼细节”，我们一块来看看都有哪些。\n4. 新的 PrivateImageStore 类需要设计实现哪些方法，才能在尽量最小化代码修改的情况下，替换掉 AliyunImageStore 类呢？这就要求我们必须将 AliyunImageStore 类中所定义的所有 public 方法，在 PrivateImageStore 类中都逐一定义并重新实现一遍。而这样做就会存在一些问题，我总结了下面两点。\n   - 首先，AliyunImageStore 类中有些函数命名暴露了实现细节，比如，uploadToAliyun() 和 downloadFromAliyun()。如果开发这个功能的同事没有接口意识、抽象思维，那这种暴露实现细节的命名方式就不足为奇了，毕竟最初我们只考虑将图片存储在阿里云上。而我们把这种包含“aliyun”字眼的方法，照抄到 PrivateImageStore 类中，显然是不合适的。如果我们在新类中重新命名 uploadToAliyun()、downloadFromAliyun() 这些方法，那就意味着，我们要修改项目中所有使用到这两个方法的代码，代码修改量可能就会很大。\n   - 其次，将图片存储到阿里云的流程，跟存储到私有云的流程，可能并不是完全一致的。比如，阿里云的图片上传和下载的过程中，需要生产 access token，而私有云不需要 access token。一方面，AliyunImageStore 中定义的 generateAccessToken() 方法不能照抄到 PrivateImageStore 中；另一方面，我们在使用 AliyunImageStore 上传、下载图片的时候，代码中用到了 generateAccessToken() 方法，如果要改为私有云的上传下载流程，这些代码都需要做调整。\n5. 那这两个问题该如何解决呢？解决这个问题的根本方法就是，在编写代码的时候，要遵从“基于接口而非实现编程”的原则，具体来讲，我们需要做到下面这 3 点。\n   1. 函数的命名不能暴露任何实现细节。比如，前面提到的 uploadToAliyun() 就不符合要求，应该改为去掉 aliyun 这样的字眼，改为更加抽象的命名方式，比如：upload()。\n   2. 封装具体的实现细节。比如，跟阿里云相关的特殊上传（或下载）流程不应该暴露给调用者。我们对上传（或下载）流程进行封装，对外提供一个包裹所有上传（或下载）细节的方法，给调用者使用。\n   3. 为实现类定义抽象的接口。具体的实现类都依赖统一的接口定义，遵从一致的上传功能协议。使用者依赖接口，而不是具体的实现类来编程。\n6. 我们按照这个思路，把代码重构一下。重构后的代码如下所示：\n\n```java\npublic interface ImageStore {\n  String upload(Image image, String bucketName);\n  Image download(String url);\n}\n\npublic class AliyunImageStore implements ImageStore {\n  //...省略属性、构造函数等...\n\n  public String upload(Image image, String bucketName) {\n    createBucketIfNotExisting(bucketName);\n    String accessToken = generateAccessToken();\n    //...上传图片到阿里云...\n    //...返回图片在阿里云上的地址(url)...\n  }\n\n  public Image download(String url) {\n    String accessToken = generateAccessToken();\n    //...从阿里云下载图片...\n  }\n\n  private void createBucketIfNotExisting(String bucketName) {\n    // ...创建bucket...\n    // ...失败会抛出异常..\n  }\n\n  private String generateAccessToken() {\n    // ...根据accesskey/secrectkey等生成access token\n  }\n}\n\n// 上传下载流程改变：私有云不需要支持access token\npublic class PrivateImageStore implements ImageStore  {\n  public String upload(Image image, String bucketName) {\n    createBucketIfNotExisting(bucketName);\n    //...上传图片到私有云...\n    //...返回图片的url...\n  }\n\n  public Image download(String url) {\n    //...从私有云下载图片...\n  }\n\n  private void createBucketIfNotExisting(String bucketName) {\n    // ...创建bucket...\n    // ...失败会抛出异常..\n  }\n}\n\n// ImageStore的使用举例\npublic class ImageProcessingJob {\n  private static final String BUCKET_NAME = \"ai_images_bucket\";\n  //...省略其他无关代码...\n  \n  public void process() {\n    Image image = ...;//处理图片，并封装为Image对象\n    ImageStore imageStore = new PrivateImageStore(...);\n    imagestore.upload(image, BUCKET_NAME);\n  }\n}\n```\n\n1. 除此之外，很多人在定义接口的时候，希望通过实现类来反推接口的定义。先把实现类写好，然后看实现类中有哪些方法，照抄到接口定义中。如果按照这种思考方式，就有可能导致接口定义不够抽象，依赖具体的实现。这样的接口设计就没有意义了。不过，如果你觉得这种思考方式更加顺畅，那也没问题，只是将实现类的方法搬移到接口定义中的时候，要有选择性的搬移，不要将跟具体实现相关的方法搬移到接口中，比如 AliyunImageStore 中的 generateAccessToken() 方法。\n2. 总结一下，我们在做软件开发的时候，一定要有抽象意识、封装意识、接口意识。在定义接口的时候，不要暴露任何实现细节。接口的定义只表明做什么，而不是怎么做。而且，在设计接口的时候，我们要多思考一下，这样的接口设计是否足够通用，是否能够做到在替换具体的接口实现的时候，不需要任何接口定义的改动。\n\n\n\n### 是否需要为每个类定义接口？\n\n1. 看了刚刚的讲解，你可能会有这样的疑问：为了满足这条原则，我是不是需要给每个实现类都定义对应的接口呢？在开发的时候，是不是任何代码都要只依赖接口，完全不依赖实现编程呢？\n2. 做任何事情都要讲求一个“度”，过度使用这条原则，非得给每个类都定义接口，接口满天飞，也会导致不必要的开发负担。至于什么时候，该为某个类定义接口，实现基于接口的编程，什么时候不需要定义接口，直接使用实现类编程，我们做权衡的根本依据，还是要回归到设计原则诞生的初衷上来。只要搞清楚了这条原则是为了解决什么样的问题而产生的，你就会发现，很多之前模棱两可的问题，都会变得豁然开朗。\n3. 前面我们也提到，这条原则的设计初衷是，将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低代码间的耦合性，提高代码的扩展性。\n4. 从这个设计初衷上来看，如果在我们的业务场景中，某个功能只有一种实现方式，未来也不可能被其他实现方式替换，那我们就没有必要为其设计接口，也没有必要基于接口编程，直接使用实现类就可以了。\n5. 除此之外，越是不稳定的系统，我们越是要在代码的扩展性、维护性上下功夫。相反，如果某个系统特别稳定，在开发完之后，基本上不需要做维护，那我们就没有必要为其扩展性，投入不必要的开发时间。\n\n\n\n## 多用组合少用继承\n\n在面向对象编程中，有一条非常经典的设计原则，那就是：组合优于继承，多用组合少用继承。为什么不推荐使用继承？组合相比继承有哪些优势？如何判断该用组合还是继承？今天，我们就围绕着这三个问题，来详细讲解一下这条设计原则。\n\n\n\n\n\n### 为什么不推荐使用继承？\n\n1. 继承是面向对象的四大特性之一，用来表示类之间的 is-a 关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。所以，对于是否应该在项目中使用继承，网上有很多争议。很多人觉得继承是一种反模式，应该尽量少用，甚至不用。为什么会有这样的争议？我们通过一个例子来解释一下。\n2. 假设我们要设计一个关于鸟的类。我们将“鸟类”这样一个抽象的事物概念，定义为一个抽象类 AbstractBird。所有更细分的鸟，比如麻雀、鸽子、乌鸦等，都继承这个抽象类。\n3. 我们知道，大部分鸟都会飞，那我们可不可以在 AbstractBird 抽象类中，定义一个 fly() 方法呢？答案是否定的。尽管大部分鸟都会飞，但也有特例，比如鸵鸟就不会飞。鸵鸟继承具有 fly() 方法的父类，那鸵鸟就具有“飞”这样的行为，这显然不符合我们对现实世界中事物的认识。当然，你可能会说，我在鸵鸟这个子类中重写（override）fly() 方法，让它抛出 UnSupportedMethodException 异常不就可以了吗？具体的代码实现如下所示：\n\n```java\npublic class AbstractBird {\n  //...省略其他属性和方法...\n  public void fly() { //... }\n}\n\npublic class Ostrich extends AbstractBird { //鸵鸟\n  //...省略其他属性和方法...\n  public void fly() {\n    throw new UnSupportedMethodException(\"I can't fly.'\");\n  }\n}\n```\n\n1. 这种设计思路虽然可以解决问题，但不够优美。因为除了鸵鸟之外，不会飞的鸟还有很多，比如企鹅。对于这些不会飞的鸟来说，我们都需要重写 fly() 方法，抛出异常。这样的设计，一方面，徒增了编码的工作量；另一方面，也违背了我们之后要讲的最小知识原则（Least Knowledge Principle，也叫最少知识原则或者迪米特法则），暴露不该暴露的接口给外部，增加了类使用过程中被误用的概率。\n2. 你可能又会说，那我们再通过 AbstractBird 类派生出两个更加细分的抽象类：会飞的鸟类 AbstractFlyableBird 和不会飞的鸟类 AbstractUnFlyableBird，让麻雀、乌鸦这些会飞的鸟都继承 AbstractFlyableBird，让鸵鸟、企鹅这些不会飞的鸟，都继承 AbstractUnFlyableBird 类，不就可以了吗？具体的继承关系如下图所示：\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.0/design_patterns/design_ideas/0001.png\"/>\n\n\n\n1. 从图中我们可以看出，继承关系变成了三层。不过，整体上来讲，目前的继承关系还比较简单，层次比较浅，也算是一种可以接受的设计思路。我们再继续加点难度。在刚刚这个场景中，我们只关注“鸟会不会飞”，但如果我们还关注“鸟会不会叫”，那这个时候，我们又该如何设计类之间的继承关系呢？\n\n2. 是否会飞？是否会叫？两个行为搭配起来会产生四种情况：会飞会叫、不会飞会叫、会飞不会叫、不会飞不会叫。如果我们继续沿用刚才的设计思路，那就需要再定义四个抽象类（AbstractFlyableTweetableBird、AbstractFlyableUnTweetableBird、AbstractUnFlyableTweetableBird、AbstractUnFlyableUnTweetableBird）。\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.0/design_patterns/design_ideas/0002.png\"/>\n\n\n\n1. 如果我们还需要考虑“是否会下蛋”这样一个行为，那估计就要组合爆炸了。类的继承层次会越来越深、继承关系会越来越复杂。而这种层次很深、很复杂的继承关系，一方面，会导致代码的可读性变差。因为我们要搞清楚某个类具有哪些方法、属性，必须阅读父类的代码、父类的父类的代码……一直追溯到最顶层父类的代码。另一方面，这也破坏了类的封装特性，将父类的实现细节暴露给了子类。子类的实现依赖父类的实现，两者高度耦合，一旦父类代码修改，就会影响所有子类的逻辑。\n2. 总之，继承最大的问题就在于：继承层次过深、继承关系过于复杂会影响到代码的可读性和可维护性。这也是为什么我们不推荐使用继承。那刚刚例子中继承存在的问题，我们又该如何来解决呢？你可以先自己思考一下，再听我下面的讲解。\n\n\n\n### 组合相比继承有哪些优势？\n\n1. 实际上，我们可以利用组合（composition）、接口、委托（delegation）三个技术手段，一块儿来解决刚刚继承存在的问题。\n2. 接口表示具有某种行为特性。针对“会飞”这样一个行为特性，我们可以定义一个 Flyable 接口，只让会飞的鸟去实现这个接口。对于会叫、会下蛋这些行为特性，我们可以类似地定义 Tweetable 接口、EggLayable 接口。我们将这个设计思路翻译成 Java 代码的话，就是下面这个样子：\n\n```java\npublic interface Flyable {\n  void fly();\n}\npublic interface Tweetable {\n  void tweet();\n}\npublic interface EggLayable {\n  void layEgg();\n}\npublic class Ostrich implements Tweetable, EggLayable {//鸵鸟\n  //... 省略其他属性和方法...\n  @Override\n  public void tweet() { //... }\n  @Override\n  public void layEgg() { //... }\n}\npublic class Sparrow impelents Flyable, Tweetable, EggLayable {//麻雀\n  //... 省略其他属性和方法...\n  @Override\n  public void fly() { //... }\n  @Override\n  public void tweet() { //... }\n  @Override\n  public void layEgg() { //... }\n}\n```\n\n1. 不过，我们知道，接口只声明方法，不定义实现。也就是说，每个会下蛋的鸟都要实现一遍 layEgg() 方法，并且实现逻辑是一样的，这就会导致代码重复的问题。那这个问题又该如何解决呢？\n2. 我们可以针对三个接口再定义三个实现类，它们分别是：实现了 fly() 方法的 FlyAbility 类、实现了 tweet() 方法的 TweetAbility 类、实现了 layEgg() 方法的 EggLayAbility 类。然后，通过组合和委托技术来消除代码重复。具体的代码实现如下所示：\n\n```java\npublic interface Flyable {\n  void fly()；\n}\npublic class FlyAbility implements Flyable {\n  @Override\n  public void fly() { //... }\n}\n//省略Tweetable/TweetAbility/EggLayable/EggLayAbility\n\npublic class Ostrich implements Tweetable, EggLayable {//鸵鸟\n  private TweetAbility tweetAbility = new TweetAbility(); //组合\n  private EggLayAbility eggLayAbility = new EggLayAbility(); //组合\n  //... 省略其他属性和方法...\n  @Override\n  public void tweet() {\n    tweetAbility.tweet(); // 委托\n  }\n  @Override\n  public void layEgg() {\n    eggLayAbility.layEgg(); // 委托\n  }\n}\n```\n\n\n\n我们知道继承主要有三个作用：表示 is-a 关系，支持多态特性，代码复用。而这三个作用都可以通过其他技术手段来达成。比如 is-a 关系，我们可以通过组合和接口的 has-a 关系来替代；多态特性我们可以利用接口来实现；代码复用我们可以通过组合和委托来实现。所以，从理论上讲，通过组合、接口、委托三个技术手段，我们完全可以替换掉继承，在项目中不用或者少用继承关系，特别是一些复杂的继承关系。\n\n\n\n### 如何判断该用组合还是继承？\n\n1. 尽管我们鼓励多用组合少用继承，但组合也并不是完美的，继承也并非一无是处。从上面的例子来看，继承改写成组合意味着要做更细粒度的类的拆分。这也就意味着，我们要定义更多的类和接口。类和接口的增多也就或多或少地增加代码的复杂程度和维护成本。所以，在实际的项目开发中，我们还是要根据具体的情况，来具体选择该用继承还是组合。\n2. 如果类之间的继承结构稳定（不会轻易改变），继承层次比较浅（比如，最多有两层继承关系），继承关系不复杂，我们就可以大胆地使用继承。反之，系统越不稳定，继承层次很深，继承关系复杂，我们就尽量使用组合来替代继承。\n3. 除此之外，还有一些设计模式会固定使用继承或者组合。比如，装饰者模式（decorator pattern）、策略模式（strategy pattern）、组合模式（composite pattern）等都使用了组合关系，而模板模式（template pattern）使用了继承关系。\n4. 前面我们讲到继承可以实现代码复用。利用继承特性，我们把相同的属性和方法，抽取出来，定义到父类中。子类复用父类中的属性和方法，达到代码复用的目的。但是，有的时候，从业务含义上，A 类和 B 类并不一定具有继承关系。比如，Crawler 类和 PageAnalyzer 类，它们都用到了 URL 拼接和分割的功能，但并不具有继承关系（既不是父子关系，也不是兄弟关系）。仅仅为了代码复用，生硬地抽象出一个父类出来，会影响到代码的可读性。如果不熟悉背后设计思路的同事，发现 Crawler 类和 PageAnalyzer 类继承同一个父类，而父类中定义的却只是 URL 相关的操作，会觉得这个代码写得莫名其妙，理解不了。这个时候，使用组合就更加合理、更加灵活。具体的代码实现如下所示：\n\n```java\npublic class Url {\n  //...省略属性和方法\n}\n\npublic class Crawler {\n  private Url url; // 组合\n  public Crawler() {\n    this.url = new Url();\n  }\n  //...\n}\n\npublic class PageAnalyzer {\n  private Url url; // 组合\n  public PageAnalyzer() {\n    this.url = new Url();\n  }\n  //..\n}\n```\n\n\n\n还有一些特殊的场景要求我们必须使用继承。如果你不能改变一个函数的入参类型，而入参又非接口，为了支持多态，只能采用继承来实现。比如下面这样一段代码，其中 FeignClient 是一个外部类，我们没有权限去修改这部分代码，但是我们希望能重写这个类在运行时执行的 encode() 函数。这个时候，我们只能采用继承来实现了。\n\n\n\n```java\npublic class FeignClient { // Feign Client框架代码\n  //...省略其他代码...\n  public void encode(String url) { //... }\n}\n\npublic void demofunction(FeignClient feignClient) {\n  //...\n  feignClient.encode(url);\n  //...\n}\n\npublic class CustomizedFeignClient extends FeignClient {\n  @Override\n  public void encode(String url) { //...重写encode的实现...}\n}\n\n// 调用\nFeignClient client = new CustomizedFeignClient();\ndemofunction(client);\n```\n\n尽管有些人说，要杜绝继承，100% 用组合代替继承，但是我的观点没那么极端！之所以“多用组合少用继承”这个口号喊得这么响，只是因为，长期以来，我们过度使用继承。还是那句话，组合并不完美，继承也不是一无是处。只要我们控制好它们的副作用、发挥它们各自的优势，在不同的场合下，恰当地选择使用继承还是组合，这才是我们所追求的境界。\n\n\n\n\n\n## 如何通过封装、抽象、模块化、中间层等解耦代码？\n\n### “解耦”为何如此重要？\n\n1. 软件设计与开发最重要的工作之一就是应对复杂性。人处理复杂性的能力是有限的。过于复杂的代码往往在可读性、可维护性上都不友好。那如何来控制代码的复杂性呢？手段有很多，我个人认为，最关键的就是解耦，保证代码松耦合、高内聚。如果说重构是保证代码质量不至于腐化到无可救药地步的有效手段，那么利用解耦的方法对代码重构，就是保证代码不至于复杂到无法控制的有效手段。\n2. 后文迪米特法则有介绍，什么是“高内聚、松耦合”。。实际上，“高内聚、松耦合”是一个比较通用的设计思想，不仅可以指导细粒度的类和类之间关系的设计，还能指导粗粒度的系统、架构、模块的设计。相对于编码规范，它能够在更高层次上提高代码的可读性和可维护性。\n3. 不管是阅读代码还是修改代码，“高内聚、松耦合”的特性可以让我们聚焦在某一模块或类中，不需要了解太多其他模块或类的代码，让我们的焦点不至于过于发散，降低了阅读和修改代码的难度。而且，因为依赖关系简单，耦合小，修改代码不至于牵一发而动全身，代码改动比较集中，引入 bug 的风险也就减少了很多。同时，“高内聚、松耦合”的代码可测试性也更加好，容易 mock 或者很少需要 mock 外部依赖的模块或者类。\n4. 除此之外，代码“高内聚、松耦合”，也就意味着，代码结构清晰、分层和模块化合理、依赖关系简单、模块或类之间的耦合小，那代码整体的质量就不会差。即便某个具体的类或者模块设计得不怎么合理，代码质量不怎么高，影响的范围是非常有限的。我们可以聚焦于这个模块或者类，做相应的小型重构。而相对于代码结构的调整，这种改动范围比较集中的小型重构的难度就容易多了。\n\n\n\n### 代码是否需要“解耦”？\n\n1. 那现在问题来了，我们该怎么判断代码的耦合程度呢？或者说，怎么判断代码是否符合“高内聚、松耦合”呢？再或者说，如何判断系统是否需要解耦重构呢？\n2. 间接的衡量标准有很多，前面我们讲到了一些，比如，看修改代码会不会牵一发而动全身。除此之外，还有一个直接的衡量标准，也是我在阅读源码的时候经常会用到的，那就是把模块与模块之间、类与类之间的依赖关系画出来，根据依赖关系图的复杂性来判断是否需要解耦重构。\n3. 如果依赖关系复杂、混乱，那从代码结构上来讲，可读性和可维护性肯定不是太好，那我们就需要考虑是否可以通过解耦的方法，让依赖关系变得清晰、简单。当然，这种判断还是有比较强的主观色彩，但是可以作为一种参考和梳理依赖的手段，配合间接的衡量标准一块来使用。\n\n### 如何给代码“解耦”？\n\n>  封装与抽象\n\n封装和抽象作为两个非常通用的设计思想，可以应用在很多设计场景中，比如系统、模块、lib、组件、接口、类等等的设计。封装和抽象可以有效地隐藏实现的复杂性，隔离实现的易变性，给依赖的模块提供稳定且易用的抽象接口\n\n\n\n> 中间层\n\n引入中间层能简化模块或类之间的依赖关系。下面这张图是引入中间层前后的依赖关系对比图。在引入数据存储中间层之前，A、B、C 三个模块都要依赖内存一级缓存、Redis 二级缓存、DB 持久化存储三个模块。在引入中间层之后，三个模块只需要依赖数据存储一个模块即可。从图上可以看出，中间层的引入明显地简化了依赖关系，让代码结构更加清晰\n\n\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.0/design_patterns/design_ideas/0003.png\"/>\n\n\n\n除此之外，我们在进行重构的时候，引入中间层可以起到过渡的作用，能够让开发和重构同步进行，不互相干扰。比如，某个接口设计得有问题，我们需要修改它的定义，同时，所有调用这个接口的代码都要做相应的改动。如果新开发的代码也用到这个接口，那开发就跟重构冲突了。为了让重构能小步快跑，我们可以分下面四个阶段来完成接口的修改。\n\n\n\n- 第一阶段：引入一个中间层，包裹老的接口，提供新的接口定义。\n- 第二阶段：新开发的代码依赖中间层提供的新接口。\n- 第三阶段：将依赖老接口的代码改为调用新接口。\n- 第四阶段：确保所有的代码都调用新接口之后，删除掉老的接口。\n\n这样，每个阶段的开发工作量都不会很大，都可以在很短的时间内完成。重构跟开发冲突的概率也变小了。\n\n\n\n\n\n> 模块化\n\n模块化是构建复杂系统常用的手段。不仅在软件行业，在建筑、机械制造等行业，这个手段也非常有用。对于一个大型复杂系统来说，没有人能掌控所有的细节。之所以我们能搭建出如此复杂的系统，并且能维护得了，最主要的原因就是将系统划分成各个独立的模块，让不同的人负责不同的模块，这样即便在不了解全部细节的情况下，管理者也能协调各个模块，让整个系统有效运转。\n\n\n\n\n\n>  其他设计思想和原则\n\n“高内聚、松耦合”是一个非常重要的设计思想，能够有效提高代码的可读性和可维护性，缩小功能改动导致的代码改动范围。实际上，在前面的章节中，我们已经多次提到过这个设计思想。很多设计原则都以实现代码的“高内聚、松耦合”为目的。我们来一块总结回顾一下都有哪些原则。\n\n(这里没有讲的，在后面文章里)\n\n- 单一职责原则\n\n我们前面提到，内聚性和耦合性并非独立的。高内聚会让代码更加松耦合，而实现高内聚的重要指导原则就是单一职责原则。模块或者类的职责设计得单一，而不是大而全，那依赖它的类和它依赖的类就会比较少，代码耦合也就相应的降低了。\n\n\n\n- 基于接口而非实现编程\n\n基于接口而非实现编程能通过接口这样一个中间层，隔离变化和具体的实现。这样做的好处是，在有依赖关系的两个模块或类之间，一个模块或者类的改动，不会影响到另一个模块或类。实际上，这就相当于将一种强依赖关系（强耦合）解耦为了弱依赖关系（弱耦合）。依赖注入\n\n\n\n- 依赖注入\n\n跟基于接口而非实现编程思想类似，依赖注入也是将代码之间的强耦合变为弱耦合。尽管依赖注入无法将本应该有依赖关系的两个类，解耦为没有依赖关系，但可以让耦合关系没那么紧密，容易做到插拔替换\n\n\n\n- 多用组合少用继承\n\n我们知道，继承是一种强依赖关系，父类与子类高度耦合，且这种耦合关系非常脆弱，牵一发而动全身，父类的每一次改动都会影响所有的子类。相反，组合关系是一种弱依赖关系，这种关系更加灵活，所以，对于继承结构比较复杂的代码，利用组合来替换继承，也是一种解耦的有效手段。\n\n\n\n- 迪米特法则\n\n迪米特法则讲的是，不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。从定义上，我们明显可以看出，这条原则的目的就是为了实现代码的松耦合。至于如何应用这条原则来解耦代码，你可以回过头去阅读一下第 22 讲，这里我就不赘述了。除了上面讲到的这些设计思想和原则之外，还有一些设计模式也是为了解耦依赖，比如观察者模式，有关这一部分的内容，我们留在设计模式模块中慢慢讲解。\n\n\n\n","source":"_posts/2024-04-21-设计模式-01.设计思想.md","raw":"---\ntitle: 设计模式-01.设计思想\ntags:\n  - 设计模式\n  - 设计思想\ncategories:\n  - 设计模式\n  - 01.设计思想\nkeywords: 设计模式，设计思想\ndescription: 设计模式第一部分-常用设计思想。\ncover: 'https://npm.elemecdn.com/lql_static@latest/logo/design_patterns.jpg'\nabbrlink: c3dcce5d\ndate: 2024-04-21 23:22:58\n---\n\n# 设计思想\n\n> 1. 此系列文章非本人原创，是学习笔记。\n> 2. 设计模式系列以后会持续更新，包括已经发布的设计模式文章，因为后续还要再多看一下书，教程和开源项目等，继续润色文章。\n\n下面讲一些常见的设计思想\n\n## 基于接口而非实现编程\n\n这个原则非常重要，是一种非常有效的提高代码质量的手段，在平时的开发中特别经常被用到。\n\n### 如何解读原则中的“接口”二字？\n\n1. “基于接口而非实现编程”这条原则的英文描述是：“Program to an interface, not an implementation”。我们理解这条原则的时候，千万不要一开始就与具体的编程语言挂钩，局限在编程语言的“接口”语法中（比如 Java 中的 interface 接口语法）。这条原则最早出现于 1994 年 GoF 的《设计模式》这本书，它先于很多编程语言而诞生（比如 Java 语言），是一条比较抽象、泛化的设计思想。\n2. 实际上，理解这条原则的关键，就是理解其中的“接口”两个字。还记得我们上一节课讲的“接口”的定义吗？从本质上来看，“接口”就是一组“协议”或者“约定”，是功能提供者提供给使用者的一个“功能列表”。“接口”在不同的应用场景下会有不同的解读，比如服务端与客户端之间的“接口”，类库提供的“接口”，甚至是一组通信的协议都可以叫作“接口”。刚刚对“接口”的理解，都比较偏上层、偏抽象，与实际的写代码离得有点远。如果落实到具体的编码，“基于接口而非实现编程”这条原则中的“接口”，可以理解为编程语言中的接口或者抽象类。\n3. 前面我们提到，这条原则能非常有效地提高代码质量，之所以这么说，那是因为，应用这条原则，可以将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低耦合性，提高扩展性。\n4. 实际上，“基于接口而非实现编程”这条原则的另一个表述方式，是“基于抽象而非实现编程”。后者的表述方式其实更能体现这条原则的设计初衷。在软件开发中，最大的挑战之一就是需求的不断变化，这也是考验代码设计好坏的一个标准。**越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。好的代码设计，不仅能应对当下的需求，而且在将来需求发生变化的时候，仍然能够在不破坏原有代码设计的情况下灵活应对**。而抽象就是提高代码扩展性、灵活性、可维护性最有效的手段之一。\n\n\n\n### 如何将这条原则应用到实战中？\n\n假设我们的系统中有很多涉及图片处理和存储的业务逻辑。图片经过处理之后被上传到阿里云上。为了代码复用，我们封装了图片存储相关的代码逻辑，提供了一个统一的 AliyunImageStore 类，供整个系统来使用。具体的代码实现如下所示：\n\n```java\npublic class AliyunImageStore {\n  //...省略属性、构造函数等...\n  \n  public void createBucketIfNotExisting(String bucketName) {\n    // ...创建bucket代码逻辑...\n    // ...失败会抛出异常..\n  }\n  \n  public String generateAccessToken() {\n    // ...根据accesskey/secrectkey等生成access token\n  }\n  \n  public String uploadToAliyun(Image image, String bucketName, String accessToken) {\n    //...上传图片到阿里云...\n    //...返回图片存储在阿里云上的地址(url）...\n  }\n  \n  public Image downloadFromAliyun(String url, String accessToken) {\n    //...从阿里云下载图片...\n  }\n}\n\n// AliyunImageStore类的使用举例\npublic class ImageProcessingJob {\n  private static final String BUCKET_NAME = \"ai_images_bucket\";\n  //...省略其他无关代码...\n  \n  public void process() {\n    Image image = ...; //处理图片，并封装为Image对象\n    AliyunImageStore imageStore = new AliyunImageStore(/*省略参数*/);\n    imageStore.createBucketIfNotExisting(BUCKET_NAME);\n    String accessToken = imageStore.generateAccessToken();\n    imagestore.uploadToAliyun(image, BUCKET_NAME, accessToken);\n  }\n  \n}\n```\n\n\n\n1. 整个上传流程包含三个步骤：创建 bucket（你可以简单理解为存储目录）、生成 access token 访问凭证、携带 access token 上传图片到指定的 bucket 中。代码实现非常简单，类中的几个方法定义得都很干净，用起来也很清晰，乍看起来没有太大问题，完全能满足我们将图片存储在阿里云的业务需求。\n2. 不过，软件开发中唯一不变的就是变化。过了一段时间后，我们自建了私有云，不再将图片存储到阿里云了，而是将图片存储到自建私有云上。为了满足这样一个需求的变化，我们该如何修改代码呢？\n3. 我们需要重新设计实现一个存储图片到私有云的 PrivateImageStore 类，并用它替换掉项目中所有的 AliyunImageStore 类对象。这样的修改听起来并不复杂，只是简单替换而已，对整个代码的改动并不大。不过，我们经常说，“细节是魔鬼”。这句话在软件开发中特别适用。实际上，刚刚的设计实现方式，就隐藏了很多容易出问题的“魔鬼细节”，我们一块来看看都有哪些。\n4. 新的 PrivateImageStore 类需要设计实现哪些方法，才能在尽量最小化代码修改的情况下，替换掉 AliyunImageStore 类呢？这就要求我们必须将 AliyunImageStore 类中所定义的所有 public 方法，在 PrivateImageStore 类中都逐一定义并重新实现一遍。而这样做就会存在一些问题，我总结了下面两点。\n   - 首先，AliyunImageStore 类中有些函数命名暴露了实现细节，比如，uploadToAliyun() 和 downloadFromAliyun()。如果开发这个功能的同事没有接口意识、抽象思维，那这种暴露实现细节的命名方式就不足为奇了，毕竟最初我们只考虑将图片存储在阿里云上。而我们把这种包含“aliyun”字眼的方法，照抄到 PrivateImageStore 类中，显然是不合适的。如果我们在新类中重新命名 uploadToAliyun()、downloadFromAliyun() 这些方法，那就意味着，我们要修改项目中所有使用到这两个方法的代码，代码修改量可能就会很大。\n   - 其次，将图片存储到阿里云的流程，跟存储到私有云的流程，可能并不是完全一致的。比如，阿里云的图片上传和下载的过程中，需要生产 access token，而私有云不需要 access token。一方面，AliyunImageStore 中定义的 generateAccessToken() 方法不能照抄到 PrivateImageStore 中；另一方面，我们在使用 AliyunImageStore 上传、下载图片的时候，代码中用到了 generateAccessToken() 方法，如果要改为私有云的上传下载流程，这些代码都需要做调整。\n5. 那这两个问题该如何解决呢？解决这个问题的根本方法就是，在编写代码的时候，要遵从“基于接口而非实现编程”的原则，具体来讲，我们需要做到下面这 3 点。\n   1. 函数的命名不能暴露任何实现细节。比如，前面提到的 uploadToAliyun() 就不符合要求，应该改为去掉 aliyun 这样的字眼，改为更加抽象的命名方式，比如：upload()。\n   2. 封装具体的实现细节。比如，跟阿里云相关的特殊上传（或下载）流程不应该暴露给调用者。我们对上传（或下载）流程进行封装，对外提供一个包裹所有上传（或下载）细节的方法，给调用者使用。\n   3. 为实现类定义抽象的接口。具体的实现类都依赖统一的接口定义，遵从一致的上传功能协议。使用者依赖接口，而不是具体的实现类来编程。\n6. 我们按照这个思路，把代码重构一下。重构后的代码如下所示：\n\n```java\npublic interface ImageStore {\n  String upload(Image image, String bucketName);\n  Image download(String url);\n}\n\npublic class AliyunImageStore implements ImageStore {\n  //...省略属性、构造函数等...\n\n  public String upload(Image image, String bucketName) {\n    createBucketIfNotExisting(bucketName);\n    String accessToken = generateAccessToken();\n    //...上传图片到阿里云...\n    //...返回图片在阿里云上的地址(url)...\n  }\n\n  public Image download(String url) {\n    String accessToken = generateAccessToken();\n    //...从阿里云下载图片...\n  }\n\n  private void createBucketIfNotExisting(String bucketName) {\n    // ...创建bucket...\n    // ...失败会抛出异常..\n  }\n\n  private String generateAccessToken() {\n    // ...根据accesskey/secrectkey等生成access token\n  }\n}\n\n// 上传下载流程改变：私有云不需要支持access token\npublic class PrivateImageStore implements ImageStore  {\n  public String upload(Image image, String bucketName) {\n    createBucketIfNotExisting(bucketName);\n    //...上传图片到私有云...\n    //...返回图片的url...\n  }\n\n  public Image download(String url) {\n    //...从私有云下载图片...\n  }\n\n  private void createBucketIfNotExisting(String bucketName) {\n    // ...创建bucket...\n    // ...失败会抛出异常..\n  }\n}\n\n// ImageStore的使用举例\npublic class ImageProcessingJob {\n  private static final String BUCKET_NAME = \"ai_images_bucket\";\n  //...省略其他无关代码...\n  \n  public void process() {\n    Image image = ...;//处理图片，并封装为Image对象\n    ImageStore imageStore = new PrivateImageStore(...);\n    imagestore.upload(image, BUCKET_NAME);\n  }\n}\n```\n\n1. 除此之外，很多人在定义接口的时候，希望通过实现类来反推接口的定义。先把实现类写好，然后看实现类中有哪些方法，照抄到接口定义中。如果按照这种思考方式，就有可能导致接口定义不够抽象，依赖具体的实现。这样的接口设计就没有意义了。不过，如果你觉得这种思考方式更加顺畅，那也没问题，只是将实现类的方法搬移到接口定义中的时候，要有选择性的搬移，不要将跟具体实现相关的方法搬移到接口中，比如 AliyunImageStore 中的 generateAccessToken() 方法。\n2. 总结一下，我们在做软件开发的时候，一定要有抽象意识、封装意识、接口意识。在定义接口的时候，不要暴露任何实现细节。接口的定义只表明做什么，而不是怎么做。而且，在设计接口的时候，我们要多思考一下，这样的接口设计是否足够通用，是否能够做到在替换具体的接口实现的时候，不需要任何接口定义的改动。\n\n\n\n### 是否需要为每个类定义接口？\n\n1. 看了刚刚的讲解，你可能会有这样的疑问：为了满足这条原则，我是不是需要给每个实现类都定义对应的接口呢？在开发的时候，是不是任何代码都要只依赖接口，完全不依赖实现编程呢？\n2. 做任何事情都要讲求一个“度”，过度使用这条原则，非得给每个类都定义接口，接口满天飞，也会导致不必要的开发负担。至于什么时候，该为某个类定义接口，实现基于接口的编程，什么时候不需要定义接口，直接使用实现类编程，我们做权衡的根本依据，还是要回归到设计原则诞生的初衷上来。只要搞清楚了这条原则是为了解决什么样的问题而产生的，你就会发现，很多之前模棱两可的问题，都会变得豁然开朗。\n3. 前面我们也提到，这条原则的设计初衷是，将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低代码间的耦合性，提高代码的扩展性。\n4. 从这个设计初衷上来看，如果在我们的业务场景中，某个功能只有一种实现方式，未来也不可能被其他实现方式替换，那我们就没有必要为其设计接口，也没有必要基于接口编程，直接使用实现类就可以了。\n5. 除此之外，越是不稳定的系统，我们越是要在代码的扩展性、维护性上下功夫。相反，如果某个系统特别稳定，在开发完之后，基本上不需要做维护，那我们就没有必要为其扩展性，投入不必要的开发时间。\n\n\n\n## 多用组合少用继承\n\n在面向对象编程中，有一条非常经典的设计原则，那就是：组合优于继承，多用组合少用继承。为什么不推荐使用继承？组合相比继承有哪些优势？如何判断该用组合还是继承？今天，我们就围绕着这三个问题，来详细讲解一下这条设计原则。\n\n\n\n\n\n### 为什么不推荐使用继承？\n\n1. 继承是面向对象的四大特性之一，用来表示类之间的 is-a 关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。所以，对于是否应该在项目中使用继承，网上有很多争议。很多人觉得继承是一种反模式，应该尽量少用，甚至不用。为什么会有这样的争议？我们通过一个例子来解释一下。\n2. 假设我们要设计一个关于鸟的类。我们将“鸟类”这样一个抽象的事物概念，定义为一个抽象类 AbstractBird。所有更细分的鸟，比如麻雀、鸽子、乌鸦等，都继承这个抽象类。\n3. 我们知道，大部分鸟都会飞，那我们可不可以在 AbstractBird 抽象类中，定义一个 fly() 方法呢？答案是否定的。尽管大部分鸟都会飞，但也有特例，比如鸵鸟就不会飞。鸵鸟继承具有 fly() 方法的父类，那鸵鸟就具有“飞”这样的行为，这显然不符合我们对现实世界中事物的认识。当然，你可能会说，我在鸵鸟这个子类中重写（override）fly() 方法，让它抛出 UnSupportedMethodException 异常不就可以了吗？具体的代码实现如下所示：\n\n```java\npublic class AbstractBird {\n  //...省略其他属性和方法...\n  public void fly() { //... }\n}\n\npublic class Ostrich extends AbstractBird { //鸵鸟\n  //...省略其他属性和方法...\n  public void fly() {\n    throw new UnSupportedMethodException(\"I can't fly.'\");\n  }\n}\n```\n\n1. 这种设计思路虽然可以解决问题，但不够优美。因为除了鸵鸟之外，不会飞的鸟还有很多，比如企鹅。对于这些不会飞的鸟来说，我们都需要重写 fly() 方法，抛出异常。这样的设计，一方面，徒增了编码的工作量；另一方面，也违背了我们之后要讲的最小知识原则（Least Knowledge Principle，也叫最少知识原则或者迪米特法则），暴露不该暴露的接口给外部，增加了类使用过程中被误用的概率。\n2. 你可能又会说，那我们再通过 AbstractBird 类派生出两个更加细分的抽象类：会飞的鸟类 AbstractFlyableBird 和不会飞的鸟类 AbstractUnFlyableBird，让麻雀、乌鸦这些会飞的鸟都继承 AbstractFlyableBird，让鸵鸟、企鹅这些不会飞的鸟，都继承 AbstractUnFlyableBird 类，不就可以了吗？具体的继承关系如下图所示：\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.0/design_patterns/design_ideas/0001.png\"/>\n\n\n\n1. 从图中我们可以看出，继承关系变成了三层。不过，整体上来讲，目前的继承关系还比较简单，层次比较浅，也算是一种可以接受的设计思路。我们再继续加点难度。在刚刚这个场景中，我们只关注“鸟会不会飞”，但如果我们还关注“鸟会不会叫”，那这个时候，我们又该如何设计类之间的继承关系呢？\n\n2. 是否会飞？是否会叫？两个行为搭配起来会产生四种情况：会飞会叫、不会飞会叫、会飞不会叫、不会飞不会叫。如果我们继续沿用刚才的设计思路，那就需要再定义四个抽象类（AbstractFlyableTweetableBird、AbstractFlyableUnTweetableBird、AbstractUnFlyableTweetableBird、AbstractUnFlyableUnTweetableBird）。\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.0/design_patterns/design_ideas/0002.png\"/>\n\n\n\n1. 如果我们还需要考虑“是否会下蛋”这样一个行为，那估计就要组合爆炸了。类的继承层次会越来越深、继承关系会越来越复杂。而这种层次很深、很复杂的继承关系，一方面，会导致代码的可读性变差。因为我们要搞清楚某个类具有哪些方法、属性，必须阅读父类的代码、父类的父类的代码……一直追溯到最顶层父类的代码。另一方面，这也破坏了类的封装特性，将父类的实现细节暴露给了子类。子类的实现依赖父类的实现，两者高度耦合，一旦父类代码修改，就会影响所有子类的逻辑。\n2. 总之，继承最大的问题就在于：继承层次过深、继承关系过于复杂会影响到代码的可读性和可维护性。这也是为什么我们不推荐使用继承。那刚刚例子中继承存在的问题，我们又该如何来解决呢？你可以先自己思考一下，再听我下面的讲解。\n\n\n\n### 组合相比继承有哪些优势？\n\n1. 实际上，我们可以利用组合（composition）、接口、委托（delegation）三个技术手段，一块儿来解决刚刚继承存在的问题。\n2. 接口表示具有某种行为特性。针对“会飞”这样一个行为特性，我们可以定义一个 Flyable 接口，只让会飞的鸟去实现这个接口。对于会叫、会下蛋这些行为特性，我们可以类似地定义 Tweetable 接口、EggLayable 接口。我们将这个设计思路翻译成 Java 代码的话，就是下面这个样子：\n\n```java\npublic interface Flyable {\n  void fly();\n}\npublic interface Tweetable {\n  void tweet();\n}\npublic interface EggLayable {\n  void layEgg();\n}\npublic class Ostrich implements Tweetable, EggLayable {//鸵鸟\n  //... 省略其他属性和方法...\n  @Override\n  public void tweet() { //... }\n  @Override\n  public void layEgg() { //... }\n}\npublic class Sparrow impelents Flyable, Tweetable, EggLayable {//麻雀\n  //... 省略其他属性和方法...\n  @Override\n  public void fly() { //... }\n  @Override\n  public void tweet() { //... }\n  @Override\n  public void layEgg() { //... }\n}\n```\n\n1. 不过，我们知道，接口只声明方法，不定义实现。也就是说，每个会下蛋的鸟都要实现一遍 layEgg() 方法，并且实现逻辑是一样的，这就会导致代码重复的问题。那这个问题又该如何解决呢？\n2. 我们可以针对三个接口再定义三个实现类，它们分别是：实现了 fly() 方法的 FlyAbility 类、实现了 tweet() 方法的 TweetAbility 类、实现了 layEgg() 方法的 EggLayAbility 类。然后，通过组合和委托技术来消除代码重复。具体的代码实现如下所示：\n\n```java\npublic interface Flyable {\n  void fly()；\n}\npublic class FlyAbility implements Flyable {\n  @Override\n  public void fly() { //... }\n}\n//省略Tweetable/TweetAbility/EggLayable/EggLayAbility\n\npublic class Ostrich implements Tweetable, EggLayable {//鸵鸟\n  private TweetAbility tweetAbility = new TweetAbility(); //组合\n  private EggLayAbility eggLayAbility = new EggLayAbility(); //组合\n  //... 省略其他属性和方法...\n  @Override\n  public void tweet() {\n    tweetAbility.tweet(); // 委托\n  }\n  @Override\n  public void layEgg() {\n    eggLayAbility.layEgg(); // 委托\n  }\n}\n```\n\n\n\n我们知道继承主要有三个作用：表示 is-a 关系，支持多态特性，代码复用。而这三个作用都可以通过其他技术手段来达成。比如 is-a 关系，我们可以通过组合和接口的 has-a 关系来替代；多态特性我们可以利用接口来实现；代码复用我们可以通过组合和委托来实现。所以，从理论上讲，通过组合、接口、委托三个技术手段，我们完全可以替换掉继承，在项目中不用或者少用继承关系，特别是一些复杂的继承关系。\n\n\n\n### 如何判断该用组合还是继承？\n\n1. 尽管我们鼓励多用组合少用继承，但组合也并不是完美的，继承也并非一无是处。从上面的例子来看，继承改写成组合意味着要做更细粒度的类的拆分。这也就意味着，我们要定义更多的类和接口。类和接口的增多也就或多或少地增加代码的复杂程度和维护成本。所以，在实际的项目开发中，我们还是要根据具体的情况，来具体选择该用继承还是组合。\n2. 如果类之间的继承结构稳定（不会轻易改变），继承层次比较浅（比如，最多有两层继承关系），继承关系不复杂，我们就可以大胆地使用继承。反之，系统越不稳定，继承层次很深，继承关系复杂，我们就尽量使用组合来替代继承。\n3. 除此之外，还有一些设计模式会固定使用继承或者组合。比如，装饰者模式（decorator pattern）、策略模式（strategy pattern）、组合模式（composite pattern）等都使用了组合关系，而模板模式（template pattern）使用了继承关系。\n4. 前面我们讲到继承可以实现代码复用。利用继承特性，我们把相同的属性和方法，抽取出来，定义到父类中。子类复用父类中的属性和方法，达到代码复用的目的。但是，有的时候，从业务含义上，A 类和 B 类并不一定具有继承关系。比如，Crawler 类和 PageAnalyzer 类，它们都用到了 URL 拼接和分割的功能，但并不具有继承关系（既不是父子关系，也不是兄弟关系）。仅仅为了代码复用，生硬地抽象出一个父类出来，会影响到代码的可读性。如果不熟悉背后设计思路的同事，发现 Crawler 类和 PageAnalyzer 类继承同一个父类，而父类中定义的却只是 URL 相关的操作，会觉得这个代码写得莫名其妙，理解不了。这个时候，使用组合就更加合理、更加灵活。具体的代码实现如下所示：\n\n```java\npublic class Url {\n  //...省略属性和方法\n}\n\npublic class Crawler {\n  private Url url; // 组合\n  public Crawler() {\n    this.url = new Url();\n  }\n  //...\n}\n\npublic class PageAnalyzer {\n  private Url url; // 组合\n  public PageAnalyzer() {\n    this.url = new Url();\n  }\n  //..\n}\n```\n\n\n\n还有一些特殊的场景要求我们必须使用继承。如果你不能改变一个函数的入参类型，而入参又非接口，为了支持多态，只能采用继承来实现。比如下面这样一段代码，其中 FeignClient 是一个外部类，我们没有权限去修改这部分代码，但是我们希望能重写这个类在运行时执行的 encode() 函数。这个时候，我们只能采用继承来实现了。\n\n\n\n```java\npublic class FeignClient { // Feign Client框架代码\n  //...省略其他代码...\n  public void encode(String url) { //... }\n}\n\npublic void demofunction(FeignClient feignClient) {\n  //...\n  feignClient.encode(url);\n  //...\n}\n\npublic class CustomizedFeignClient extends FeignClient {\n  @Override\n  public void encode(String url) { //...重写encode的实现...}\n}\n\n// 调用\nFeignClient client = new CustomizedFeignClient();\ndemofunction(client);\n```\n\n尽管有些人说，要杜绝继承，100% 用组合代替继承，但是我的观点没那么极端！之所以“多用组合少用继承”这个口号喊得这么响，只是因为，长期以来，我们过度使用继承。还是那句话，组合并不完美，继承也不是一无是处。只要我们控制好它们的副作用、发挥它们各自的优势，在不同的场合下，恰当地选择使用继承还是组合，这才是我们所追求的境界。\n\n\n\n\n\n## 如何通过封装、抽象、模块化、中间层等解耦代码？\n\n### “解耦”为何如此重要？\n\n1. 软件设计与开发最重要的工作之一就是应对复杂性。人处理复杂性的能力是有限的。过于复杂的代码往往在可读性、可维护性上都不友好。那如何来控制代码的复杂性呢？手段有很多，我个人认为，最关键的就是解耦，保证代码松耦合、高内聚。如果说重构是保证代码质量不至于腐化到无可救药地步的有效手段，那么利用解耦的方法对代码重构，就是保证代码不至于复杂到无法控制的有效手段。\n2. 后文迪米特法则有介绍，什么是“高内聚、松耦合”。。实际上，“高内聚、松耦合”是一个比较通用的设计思想，不仅可以指导细粒度的类和类之间关系的设计，还能指导粗粒度的系统、架构、模块的设计。相对于编码规范，它能够在更高层次上提高代码的可读性和可维护性。\n3. 不管是阅读代码还是修改代码，“高内聚、松耦合”的特性可以让我们聚焦在某一模块或类中，不需要了解太多其他模块或类的代码，让我们的焦点不至于过于发散，降低了阅读和修改代码的难度。而且，因为依赖关系简单，耦合小，修改代码不至于牵一发而动全身，代码改动比较集中，引入 bug 的风险也就减少了很多。同时，“高内聚、松耦合”的代码可测试性也更加好，容易 mock 或者很少需要 mock 外部依赖的模块或者类。\n4. 除此之外，代码“高内聚、松耦合”，也就意味着，代码结构清晰、分层和模块化合理、依赖关系简单、模块或类之间的耦合小，那代码整体的质量就不会差。即便某个具体的类或者模块设计得不怎么合理，代码质量不怎么高，影响的范围是非常有限的。我们可以聚焦于这个模块或者类，做相应的小型重构。而相对于代码结构的调整，这种改动范围比较集中的小型重构的难度就容易多了。\n\n\n\n### 代码是否需要“解耦”？\n\n1. 那现在问题来了，我们该怎么判断代码的耦合程度呢？或者说，怎么判断代码是否符合“高内聚、松耦合”呢？再或者说，如何判断系统是否需要解耦重构呢？\n2. 间接的衡量标准有很多，前面我们讲到了一些，比如，看修改代码会不会牵一发而动全身。除此之外，还有一个直接的衡量标准，也是我在阅读源码的时候经常会用到的，那就是把模块与模块之间、类与类之间的依赖关系画出来，根据依赖关系图的复杂性来判断是否需要解耦重构。\n3. 如果依赖关系复杂、混乱，那从代码结构上来讲，可读性和可维护性肯定不是太好，那我们就需要考虑是否可以通过解耦的方法，让依赖关系变得清晰、简单。当然，这种判断还是有比较强的主观色彩，但是可以作为一种参考和梳理依赖的手段，配合间接的衡量标准一块来使用。\n\n### 如何给代码“解耦”？\n\n>  封装与抽象\n\n封装和抽象作为两个非常通用的设计思想，可以应用在很多设计场景中，比如系统、模块、lib、组件、接口、类等等的设计。封装和抽象可以有效地隐藏实现的复杂性，隔离实现的易变性，给依赖的模块提供稳定且易用的抽象接口\n\n\n\n> 中间层\n\n引入中间层能简化模块或类之间的依赖关系。下面这张图是引入中间层前后的依赖关系对比图。在引入数据存储中间层之前，A、B、C 三个模块都要依赖内存一级缓存、Redis 二级缓存、DB 持久化存储三个模块。在引入中间层之后，三个模块只需要依赖数据存储一个模块即可。从图上可以看出，中间层的引入明显地简化了依赖关系，让代码结构更加清晰\n\n\n\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.0/design_patterns/design_ideas/0003.png\"/>\n\n\n\n除此之外，我们在进行重构的时候，引入中间层可以起到过渡的作用，能够让开发和重构同步进行，不互相干扰。比如，某个接口设计得有问题，我们需要修改它的定义，同时，所有调用这个接口的代码都要做相应的改动。如果新开发的代码也用到这个接口，那开发就跟重构冲突了。为了让重构能小步快跑，我们可以分下面四个阶段来完成接口的修改。\n\n\n\n- 第一阶段：引入一个中间层，包裹老的接口，提供新的接口定义。\n- 第二阶段：新开发的代码依赖中间层提供的新接口。\n- 第三阶段：将依赖老接口的代码改为调用新接口。\n- 第四阶段：确保所有的代码都调用新接口之后，删除掉老的接口。\n\n这样，每个阶段的开发工作量都不会很大，都可以在很短的时间内完成。重构跟开发冲突的概率也变小了。\n\n\n\n\n\n> 模块化\n\n模块化是构建复杂系统常用的手段。不仅在软件行业，在建筑、机械制造等行业，这个手段也非常有用。对于一个大型复杂系统来说，没有人能掌控所有的细节。之所以我们能搭建出如此复杂的系统，并且能维护得了，最主要的原因就是将系统划分成各个独立的模块，让不同的人负责不同的模块，这样即便在不了解全部细节的情况下，管理者也能协调各个模块，让整个系统有效运转。\n\n\n\n\n\n>  其他设计思想和原则\n\n“高内聚、松耦合”是一个非常重要的设计思想，能够有效提高代码的可读性和可维护性，缩小功能改动导致的代码改动范围。实际上，在前面的章节中，我们已经多次提到过这个设计思想。很多设计原则都以实现代码的“高内聚、松耦合”为目的。我们来一块总结回顾一下都有哪些原则。\n\n(这里没有讲的，在后面文章里)\n\n- 单一职责原则\n\n我们前面提到，内聚性和耦合性并非独立的。高内聚会让代码更加松耦合，而实现高内聚的重要指导原则就是单一职责原则。模块或者类的职责设计得单一，而不是大而全，那依赖它的类和它依赖的类就会比较少，代码耦合也就相应的降低了。\n\n\n\n- 基于接口而非实现编程\n\n基于接口而非实现编程能通过接口这样一个中间层，隔离变化和具体的实现。这样做的好处是，在有依赖关系的两个模块或类之间，一个模块或者类的改动，不会影响到另一个模块或类。实际上，这就相当于将一种强依赖关系（强耦合）解耦为了弱依赖关系（弱耦合）。依赖注入\n\n\n\n- 依赖注入\n\n跟基于接口而非实现编程思想类似，依赖注入也是将代码之间的强耦合变为弱耦合。尽管依赖注入无法将本应该有依赖关系的两个类，解耦为没有依赖关系，但可以让耦合关系没那么紧密，容易做到插拔替换\n\n\n\n- 多用组合少用继承\n\n我们知道，继承是一种强依赖关系，父类与子类高度耦合，且这种耦合关系非常脆弱，牵一发而动全身，父类的每一次改动都会影响所有的子类。相反，组合关系是一种弱依赖关系，这种关系更加灵活，所以，对于继承结构比较复杂的代码，利用组合来替换继承，也是一种解耦的有效手段。\n\n\n\n- 迪米特法则\n\n迪米特法则讲的是，不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。从定义上，我们明显可以看出，这条原则的目的就是为了实现代码的松耦合。至于如何应用这条原则来解耦代码，你可以回过头去阅读一下第 22 讲，这里我就不赘述了。除了上面讲到的这些设计思想和原则之外，还有一些设计模式也是为了解耦依赖，比如观察者模式，有关这一部分的内容，我们留在设计模式模块中慢慢讲解。\n\n\n\n","slug":"2024-04-21-设计模式-01.设计思想","published":1,"updated":"2024-04-21T15:23:39.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv9oiyhj000kf0vd6hnufily","content":"<h1 id=\"设计思想\"><a href=\"#设计思想\" class=\"headerlink\" title=\"设计思想\"></a>设计思想</h1><blockquote>\n<ol>\n<li>此系列文章非本人原创，是学习笔记。</li>\n<li>设计模式系列以后会持续更新，包括已经发布的设计模式文章，因为后续还要再多看一下书，教程和开源项目等，继续润色文章。</li>\n</ol>\n</blockquote>\n<p>下面讲一些常见的设计思想</p>\n<h2 id=\"基于接口而非实现编程\"><a href=\"#基于接口而非实现编程\" class=\"headerlink\" title=\"基于接口而非实现编程\"></a>基于接口而非实现编程</h2><p>这个原则非常重要，是一种非常有效的提高代码质量的手段，在平时的开发中特别经常被用到。</p>\n<h3 id=\"如何解读原则中的“接口”二字？\"><a href=\"#如何解读原则中的“接口”二字？\" class=\"headerlink\" title=\"如何解读原则中的“接口”二字？\"></a>如何解读原则中的“接口”二字？</h3><ol>\n<li>“基于接口而非实现编程”这条原则的英文描述是：“Program to an interface, not an implementation”。我们理解这条原则的时候，千万不要一开始就与具体的编程语言挂钩，局限在编程语言的“接口”语法中（比如 Java 中的 interface 接口语法）。这条原则最早出现于 1994 年 GoF 的《设计模式》这本书，它先于很多编程语言而诞生（比如 Java 语言），是一条比较抽象、泛化的设计思想。</li>\n<li>实际上，理解这条原则的关键，就是理解其中的“接口”两个字。还记得我们上一节课讲的“接口”的定义吗？从本质上来看，“接口”就是一组“协议”或者“约定”，是功能提供者提供给使用者的一个“功能列表”。“接口”在不同的应用场景下会有不同的解读，比如服务端与客户端之间的“接口”，类库提供的“接口”，甚至是一组通信的协议都可以叫作“接口”。刚刚对“接口”的理解，都比较偏上层、偏抽象，与实际的写代码离得有点远。如果落实到具体的编码，“基于接口而非实现编程”这条原则中的“接口”，可以理解为编程语言中的接口或者抽象类。</li>\n<li>前面我们提到，这条原则能非常有效地提高代码质量，之所以这么说，那是因为，应用这条原则，可以将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低耦合性，提高扩展性。</li>\n<li>实际上，“基于接口而非实现编程”这条原则的另一个表述方式，是“基于抽象而非实现编程”。后者的表述方式其实更能体现这条原则的设计初衷。在软件开发中，最大的挑战之一就是需求的不断变化，这也是考验代码设计好坏的一个标准。<strong>越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。好的代码设计，不仅能应对当下的需求，而且在将来需求发生变化的时候，仍然能够在不破坏原有代码设计的情况下灵活应对</strong>。而抽象就是提高代码扩展性、灵活性、可维护性最有效的手段之一。</li>\n</ol>\n<h3 id=\"如何将这条原则应用到实战中？\"><a href=\"#如何将这条原则应用到实战中？\" class=\"headerlink\" title=\"如何将这条原则应用到实战中？\"></a>如何将这条原则应用到实战中？</h3><p>假设我们的系统中有很多涉及图片处理和存储的业务逻辑。图片经过处理之后被上传到阿里云上。为了代码复用，我们封装了图片存储相关的代码逻辑，提供了一个统一的 AliyunImageStore 类，供整个系统来使用。具体的代码实现如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliyunImageStore</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...省略属性、构造函数等...</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createBucketIfNotExisting</span><span class=\"params\">(String bucketName)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...创建bucket代码逻辑...</span></span><br><span class=\"line\">    <span class=\"comment\">// ...失败会抛出异常..</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">generateAccessToken</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...根据accesskey/secrectkey等生成access token</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">uploadToAliyun</span><span class=\"params\">(Image image, String bucketName, String accessToken)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...上传图片到阿里云...</span></span><br><span class=\"line\">    <span class=\"comment\">//...返回图片存储在阿里云上的地址(url）...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> Image <span class=\"title function_\">downloadFromAliyun</span><span class=\"params\">(String url, String accessToken)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...从阿里云下载图片...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AliyunImageStore类的使用举例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImageProcessingJob</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">BUCKET_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ai_images_bucket&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">//...省略其他无关代码...</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Image</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> ...; <span class=\"comment\">//处理图片，并封装为Image对象</span></span><br><span class=\"line\">    <span class=\"type\">AliyunImageStore</span> <span class=\"variable\">imageStore</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AliyunImageStore</span>(<span class=\"comment\">/*省略参数*/</span>);</span><br><span class=\"line\">    imageStore.createBucketIfNotExisting(BUCKET_NAME);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">accessToken</span> <span class=\"operator\">=</span> imageStore.generateAccessToken();</span><br><span class=\"line\">    imagestore.uploadToAliyun(image, BUCKET_NAME, accessToken);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>整个上传流程包含三个步骤：创建 bucket（你可以简单理解为存储目录）、生成 access token 访问凭证、携带 access token 上传图片到指定的 bucket 中。代码实现非常简单，类中的几个方法定义得都很干净，用起来也很清晰，乍看起来没有太大问题，完全能满足我们将图片存储在阿里云的业务需求。</li>\n<li>不过，软件开发中唯一不变的就是变化。过了一段时间后，我们自建了私有云，不再将图片存储到阿里云了，而是将图片存储到自建私有云上。为了满足这样一个需求的变化，我们该如何修改代码呢？</li>\n<li>我们需要重新设计实现一个存储图片到私有云的 PrivateImageStore 类，并用它替换掉项目中所有的 AliyunImageStore 类对象。这样的修改听起来并不复杂，只是简单替换而已，对整个代码的改动并不大。不过，我们经常说，“细节是魔鬼”。这句话在软件开发中特别适用。实际上，刚刚的设计实现方式，就隐藏了很多容易出问题的“魔鬼细节”，我们一块来看看都有哪些。</li>\n<li>新的 PrivateImageStore 类需要设计实现哪些方法，才能在尽量最小化代码修改的情况下，替换掉 AliyunImageStore 类呢？这就要求我们必须将 AliyunImageStore 类中所定义的所有 public 方法，在 PrivateImageStore 类中都逐一定义并重新实现一遍。而这样做就会存在一些问题，我总结了下面两点。<ul>\n<li>首先，AliyunImageStore 类中有些函数命名暴露了实现细节，比如，uploadToAliyun() 和 downloadFromAliyun()。如果开发这个功能的同事没有接口意识、抽象思维，那这种暴露实现细节的命名方式就不足为奇了，毕竟最初我们只考虑将图片存储在阿里云上。而我们把这种包含“aliyun”字眼的方法，照抄到 PrivateImageStore 类中，显然是不合适的。如果我们在新类中重新命名 uploadToAliyun()、downloadFromAliyun() 这些方法，那就意味着，我们要修改项目中所有使用到这两个方法的代码，代码修改量可能就会很大。</li>\n<li>其次，将图片存储到阿里云的流程，跟存储到私有云的流程，可能并不是完全一致的。比如，阿里云的图片上传和下载的过程中，需要生产 access token，而私有云不需要 access token。一方面，AliyunImageStore 中定义的 generateAccessToken() 方法不能照抄到 PrivateImageStore 中；另一方面，我们在使用 AliyunImageStore 上传、下载图片的时候，代码中用到了 generateAccessToken() 方法，如果要改为私有云的上传下载流程，这些代码都需要做调整。</li>\n</ul>\n</li>\n<li>那这两个问题该如何解决呢？解决这个问题的根本方法就是，在编写代码的时候，要遵从“基于接口而非实现编程”的原则，具体来讲，我们需要做到下面这 3 点。<ol>\n<li>函数的命名不能暴露任何实现细节。比如，前面提到的 uploadToAliyun() 就不符合要求，应该改为去掉 aliyun 这样的字眼，改为更加抽象的命名方式，比如：upload()。</li>\n<li>封装具体的实现细节。比如，跟阿里云相关的特殊上传（或下载）流程不应该暴露给调用者。我们对上传（或下载）流程进行封装，对外提供一个包裹所有上传（或下载）细节的方法，给调用者使用。</li>\n<li>为实现类定义抽象的接口。具体的实现类都依赖统一的接口定义，遵从一致的上传功能协议。使用者依赖接口，而不是具体的实现类来编程。</li>\n</ol>\n</li>\n<li>我们按照这个思路，把代码重构一下。重构后的代码如下所示：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ImageStore</span> &#123;</span><br><span class=\"line\">  String <span class=\"title function_\">upload</span><span class=\"params\">(Image image, String bucketName)</span>;</span><br><span class=\"line\">  Image <span class=\"title function_\">download</span><span class=\"params\">(String url)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliyunImageStore</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImageStore</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...省略属性、构造函数等...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">upload</span><span class=\"params\">(Image image, String bucketName)</span> &#123;</span><br><span class=\"line\">    createBucketIfNotExisting(bucketName);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">accessToken</span> <span class=\"operator\">=</span> generateAccessToken();</span><br><span class=\"line\">    <span class=\"comment\">//...上传图片到阿里云...</span></span><br><span class=\"line\">    <span class=\"comment\">//...返回图片在阿里云上的地址(url)...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Image <span class=\"title function_\">download</span><span class=\"params\">(String url)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">accessToken</span> <span class=\"operator\">=</span> generateAccessToken();</span><br><span class=\"line\">    <span class=\"comment\">//...从阿里云下载图片...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createBucketIfNotExisting</span><span class=\"params\">(String bucketName)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...创建bucket...</span></span><br><span class=\"line\">    <span class=\"comment\">// ...失败会抛出异常..</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String <span class=\"title function_\">generateAccessToken</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...根据accesskey/secrectkey等生成access token</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上传下载流程改变：私有云不需要支持access token</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PrivateImageStore</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImageStore</span>  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">upload</span><span class=\"params\">(Image image, String bucketName)</span> &#123;</span><br><span class=\"line\">    createBucketIfNotExisting(bucketName);</span><br><span class=\"line\">    <span class=\"comment\">//...上传图片到私有云...</span></span><br><span class=\"line\">    <span class=\"comment\">//...返回图片的url...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Image <span class=\"title function_\">download</span><span class=\"params\">(String url)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...从私有云下载图片...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createBucketIfNotExisting</span><span class=\"params\">(String bucketName)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...创建bucket...</span></span><br><span class=\"line\">    <span class=\"comment\">// ...失败会抛出异常..</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ImageStore的使用举例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImageProcessingJob</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">BUCKET_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ai_images_bucket&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">//...省略其他无关代码...</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Image</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> ...;<span class=\"comment\">//处理图片，并封装为Image对象</span></span><br><span class=\"line\">    <span class=\"type\">ImageStore</span> <span class=\"variable\">imageStore</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrivateImageStore</span>(...);</span><br><span class=\"line\">    imagestore.upload(image, BUCKET_NAME);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>除此之外，很多人在定义接口的时候，希望通过实现类来反推接口的定义。先把实现类写好，然后看实现类中有哪些方法，照抄到接口定义中。如果按照这种思考方式，就有可能导致接口定义不够抽象，依赖具体的实现。这样的接口设计就没有意义了。不过，如果你觉得这种思考方式更加顺畅，那也没问题，只是将实现类的方法搬移到接口定义中的时候，要有选择性的搬移，不要将跟具体实现相关的方法搬移到接口中，比如 AliyunImageStore 中的 generateAccessToken() 方法。</li>\n<li>总结一下，我们在做软件开发的时候，一定要有抽象意识、封装意识、接口意识。在定义接口的时候，不要暴露任何实现细节。接口的定义只表明做什么，而不是怎么做。而且，在设计接口的时候，我们要多思考一下，这样的接口设计是否足够通用，是否能够做到在替换具体的接口实现的时候，不需要任何接口定义的改动。</li>\n</ol>\n<h3 id=\"是否需要为每个类定义接口？\"><a href=\"#是否需要为每个类定义接口？\" class=\"headerlink\" title=\"是否需要为每个类定义接口？\"></a>是否需要为每个类定义接口？</h3><ol>\n<li>看了刚刚的讲解，你可能会有这样的疑问：为了满足这条原则，我是不是需要给每个实现类都定义对应的接口呢？在开发的时候，是不是任何代码都要只依赖接口，完全不依赖实现编程呢？</li>\n<li>做任何事情都要讲求一个“度”，过度使用这条原则，非得给每个类都定义接口，接口满天飞，也会导致不必要的开发负担。至于什么时候，该为某个类定义接口，实现基于接口的编程，什么时候不需要定义接口，直接使用实现类编程，我们做权衡的根本依据，还是要回归到设计原则诞生的初衷上来。只要搞清楚了这条原则是为了解决什么样的问题而产生的，你就会发现，很多之前模棱两可的问题，都会变得豁然开朗。</li>\n<li>前面我们也提到，这条原则的设计初衷是，将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低代码间的耦合性，提高代码的扩展性。</li>\n<li>从这个设计初衷上来看，如果在我们的业务场景中，某个功能只有一种实现方式，未来也不可能被其他实现方式替换，那我们就没有必要为其设计接口，也没有必要基于接口编程，直接使用实现类就可以了。</li>\n<li>除此之外，越是不稳定的系统，我们越是要在代码的扩展性、维护性上下功夫。相反，如果某个系统特别稳定，在开发完之后，基本上不需要做维护，那我们就没有必要为其扩展性，投入不必要的开发时间。</li>\n</ol>\n<h2 id=\"多用组合少用继承\"><a href=\"#多用组合少用继承\" class=\"headerlink\" title=\"多用组合少用继承\"></a>多用组合少用继承</h2><p>在面向对象编程中，有一条非常经典的设计原则，那就是：组合优于继承，多用组合少用继承。为什么不推荐使用继承？组合相比继承有哪些优势？如何判断该用组合还是继承？今天，我们就围绕着这三个问题，来详细讲解一下这条设计原则。</p>\n<h3 id=\"为什么不推荐使用继承？\"><a href=\"#为什么不推荐使用继承？\" class=\"headerlink\" title=\"为什么不推荐使用继承？\"></a>为什么不推荐使用继承？</h3><ol>\n<li>继承是面向对象的四大特性之一，用来表示类之间的 is-a 关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。所以，对于是否应该在项目中使用继承，网上有很多争议。很多人觉得继承是一种反模式，应该尽量少用，甚至不用。为什么会有这样的争议？我们通过一个例子来解释一下。</li>\n<li>假设我们要设计一个关于鸟的类。我们将“鸟类”这样一个抽象的事物概念，定义为一个抽象类 AbstractBird。所有更细分的鸟，比如麻雀、鸽子、乌鸦等，都继承这个抽象类。</li>\n<li>我们知道，大部分鸟都会飞，那我们可不可以在 AbstractBird 抽象类中，定义一个 fly() 方法呢？答案是否定的。尽管大部分鸟都会飞，但也有特例，比如鸵鸟就不会飞。鸵鸟继承具有 fly() 方法的父类，那鸵鸟就具有“飞”这样的行为，这显然不符合我们对现实世界中事物的认识。当然，你可能会说，我在鸵鸟这个子类中重写（override）fly() 方法，让它抛出 UnSupportedMethodException 异常不就可以了吗？具体的代码实现如下所示：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractBird</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...省略其他属性和方法...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Ostrich</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBird</span> &#123; <span class=\"comment\">//鸵鸟</span></span><br><span class=\"line\">  <span class=\"comment\">//...省略其他属性和方法...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnSupportedMethodException</span>(<span class=\"string\">&quot;I can&#x27;t fly.&#x27;&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>这种设计思路虽然可以解决问题，但不够优美。因为除了鸵鸟之外，不会飞的鸟还有很多，比如企鹅。对于这些不会飞的鸟来说，我们都需要重写 fly() 方法，抛出异常。这样的设计，一方面，徒增了编码的工作量；另一方面，也违背了我们之后要讲的最小知识原则（Least Knowledge Principle，也叫最少知识原则或者迪米特法则），暴露不该暴露的接口给外部，增加了类使用过程中被误用的概率。</li>\n<li>你可能又会说，那我们再通过 AbstractBird 类派生出两个更加细分的抽象类：会飞的鸟类 AbstractFlyableBird 和不会飞的鸟类 AbstractUnFlyableBird，让麻雀、乌鸦这些会飞的鸟都继承 AbstractFlyableBird，让鸵鸟、企鹅这些不会飞的鸟，都继承 AbstractUnFlyableBird 类，不就可以了吗？具体的继承关系如下图所示：</li>\n</ol>\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.0/design_patterns/design_ideas/0001.png\"/>\n\n\n\n<ol>\n<li><p>从图中我们可以看出，继承关系变成了三层。不过，整体上来讲，目前的继承关系还比较简单，层次比较浅，也算是一种可以接受的设计思路。我们再继续加点难度。在刚刚这个场景中，我们只关注“鸟会不会飞”，但如果我们还关注“鸟会不会叫”，那这个时候，我们又该如何设计类之间的继承关系呢？</p>\n</li>\n<li><p>是否会飞？是否会叫？两个行为搭配起来会产生四种情况：会飞会叫、不会飞会叫、会飞不会叫、不会飞不会叫。如果我们继续沿用刚才的设计思路，那就需要再定义四个抽象类（AbstractFlyableTweetableBird、AbstractFlyableUnTweetableBird、AbstractUnFlyableTweetableBird、AbstractUnFlyableUnTweetableBird）。</p>\n</li>\n</ol>\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.0/design_patterns/design_ideas/0002.png\"/>\n\n\n\n<ol>\n<li>如果我们还需要考虑“是否会下蛋”这样一个行为，那估计就要组合爆炸了。类的继承层次会越来越深、继承关系会越来越复杂。而这种层次很深、很复杂的继承关系，一方面，会导致代码的可读性变差。因为我们要搞清楚某个类具有哪些方法、属性，必须阅读父类的代码、父类的父类的代码……一直追溯到最顶层父类的代码。另一方面，这也破坏了类的封装特性，将父类的实现细节暴露给了子类。子类的实现依赖父类的实现，两者高度耦合，一旦父类代码修改，就会影响所有子类的逻辑。</li>\n<li>总之，继承最大的问题就在于：继承层次过深、继承关系过于复杂会影响到代码的可读性和可维护性。这也是为什么我们不推荐使用继承。那刚刚例子中继承存在的问题，我们又该如何来解决呢？你可以先自己思考一下，再听我下面的讲解。</li>\n</ol>\n<h3 id=\"组合相比继承有哪些优势？\"><a href=\"#组合相比继承有哪些优势？\" class=\"headerlink\" title=\"组合相比继承有哪些优势？\"></a>组合相比继承有哪些优势？</h3><ol>\n<li>实际上，我们可以利用组合（composition）、接口、委托（delegation）三个技术手段，一块儿来解决刚刚继承存在的问题。</li>\n<li>接口表示具有某种行为特性。针对“会飞”这样一个行为特性，我们可以定义一个 Flyable 接口，只让会飞的鸟去实现这个接口。对于会叫、会下蛋这些行为特性，我们可以类似地定义 Tweetable 接口、EggLayable 接口。我们将这个设计思路翻译成 Java 代码的话，就是下面这个样子：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Flyable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Tweetable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">tweet</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">EggLayable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">layEgg</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Ostrich</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Tweetable</span>, EggLayable &#123;<span class=\"comment\">//鸵鸟</span></span><br><span class=\"line\">  <span class=\"comment\">//... 省略其他属性和方法...</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tweet</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">layEgg</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sparrow</span> impelents Flyable, Tweetable, EggLayable &#123;<span class=\"comment\">//麻雀</span></span><br><span class=\"line\">  <span class=\"comment\">//... 省略其他属性和方法...</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tweet</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">layEgg</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>不过，我们知道，接口只声明方法，不定义实现。也就是说，每个会下蛋的鸟都要实现一遍 layEgg() 方法，并且实现逻辑是一样的，这就会导致代码重复的问题。那这个问题又该如何解决呢？</li>\n<li>我们可以针对三个接口再定义三个实现类，它们分别是：实现了 fly() 方法的 FlyAbility 类、实现了 tweet() 方法的 TweetAbility 类、实现了 layEgg() 方法的 EggLayAbility 类。然后，通过组合和委托技术来消除代码重复。具体的代码实现如下所示：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Flyable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlyAbility</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Flyable</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//省略Tweetable/TweetAbility/EggLayable/EggLayAbility</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Ostrich</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Tweetable</span>, EggLayable &#123;<span class=\"comment\">//鸵鸟</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">TweetAbility</span> <span class=\"variable\">tweetAbility</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TweetAbility</span>(); <span class=\"comment\">//组合</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">EggLayAbility</span> <span class=\"variable\">eggLayAbility</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EggLayAbility</span>(); <span class=\"comment\">//组合</span></span><br><span class=\"line\">  <span class=\"comment\">//... 省略其他属性和方法...</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tweet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    tweetAbility.tweet(); <span class=\"comment\">// 委托</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">layEgg</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    eggLayAbility.layEgg(); <span class=\"comment\">// 委托</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们知道继承主要有三个作用：表示 is-a 关系，支持多态特性，代码复用。而这三个作用都可以通过其他技术手段来达成。比如 is-a 关系，我们可以通过组合和接口的 has-a 关系来替代；多态特性我们可以利用接口来实现；代码复用我们可以通过组合和委托来实现。所以，从理论上讲，通过组合、接口、委托三个技术手段，我们完全可以替换掉继承，在项目中不用或者少用继承关系，特别是一些复杂的继承关系。</p>\n<h3 id=\"如何判断该用组合还是继承？\"><a href=\"#如何判断该用组合还是继承？\" class=\"headerlink\" title=\"如何判断该用组合还是继承？\"></a>如何判断该用组合还是继承？</h3><ol>\n<li>尽管我们鼓励多用组合少用继承，但组合也并不是完美的，继承也并非一无是处。从上面的例子来看，继承改写成组合意味着要做更细粒度的类的拆分。这也就意味着，我们要定义更多的类和接口。类和接口的增多也就或多或少地增加代码的复杂程度和维护成本。所以，在实际的项目开发中，我们还是要根据具体的情况，来具体选择该用继承还是组合。</li>\n<li>如果类之间的继承结构稳定（不会轻易改变），继承层次比较浅（比如，最多有两层继承关系），继承关系不复杂，我们就可以大胆地使用继承。反之，系统越不稳定，继承层次很深，继承关系复杂，我们就尽量使用组合来替代继承。</li>\n<li>除此之外，还有一些设计模式会固定使用继承或者组合。比如，装饰者模式（decorator pattern）、策略模式（strategy pattern）、组合模式（composite pattern）等都使用了组合关系，而模板模式（template pattern）使用了继承关系。</li>\n<li>前面我们讲到继承可以实现代码复用。利用继承特性，我们把相同的属性和方法，抽取出来，定义到父类中。子类复用父类中的属性和方法，达到代码复用的目的。但是，有的时候，从业务含义上，A 类和 B 类并不一定具有继承关系。比如，Crawler 类和 PageAnalyzer 类，它们都用到了 URL 拼接和分割的功能，但并不具有继承关系（既不是父子关系，也不是兄弟关系）。仅仅为了代码复用，生硬地抽象出一个父类出来，会影响到代码的可读性。如果不熟悉背后设计思路的同事，发现 Crawler 类和 PageAnalyzer 类继承同一个父类，而父类中定义的却只是 URL 相关的操作，会觉得这个代码写得莫名其妙，理解不了。这个时候，使用组合就更加合理、更加灵活。具体的代码实现如下所示：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Url</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...省略属性和方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Crawler</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Url url; <span class=\"comment\">// 组合</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Crawler</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.url = <span class=\"keyword\">new</span> <span class=\"title class_\">Url</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageAnalyzer</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Url url; <span class=\"comment\">// 组合</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">PageAnalyzer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.url = <span class=\"keyword\">new</span> <span class=\"title class_\">Url</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>还有一些特殊的场景要求我们必须使用继承。如果你不能改变一个函数的入参类型，而入参又非接口，为了支持多态，只能采用继承来实现。比如下面这样一段代码，其中 FeignClient 是一个外部类，我们没有权限去修改这部分代码，但是我们希望能重写这个类在运行时执行的 encode() 函数。这个时候，我们只能采用继承来实现了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FeignClient</span> &#123; <span class=\"comment\">// Feign Client框架代码</span></span><br><span class=\"line\">  <span class=\"comment\">//...省略其他代码...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">encode</span><span class=\"params\">(String url)</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demofunction</span><span class=\"params\">(FeignClient feignClient)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  feignClient.encode(url);</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomizedFeignClient</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FeignClient</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">encode</span><span class=\"params\">(String url)</span> &#123; <span class=\"comment\">//...重写encode的实现...&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\"><span class=\"type\">FeignClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CustomizedFeignClient</span>();</span><br><span class=\"line\">demofunction(client);</span><br></pre></td></tr></table></figure>\n\n<p>尽管有些人说，要杜绝继承，100% 用组合代替继承，但是我的观点没那么极端！之所以“多用组合少用继承”这个口号喊得这么响，只是因为，长期以来，我们过度使用继承。还是那句话，组合并不完美，继承也不是一无是处。只要我们控制好它们的副作用、发挥它们各自的优势，在不同的场合下，恰当地选择使用继承还是组合，这才是我们所追求的境界。</p>\n<h2 id=\"如何通过封装、抽象、模块化、中间层等解耦代码？\"><a href=\"#如何通过封装、抽象、模块化、中间层等解耦代码？\" class=\"headerlink\" title=\"如何通过封装、抽象、模块化、中间层等解耦代码？\"></a>如何通过封装、抽象、模块化、中间层等解耦代码？</h2><h3 id=\"“解耦”为何如此重要？\"><a href=\"#“解耦”为何如此重要？\" class=\"headerlink\" title=\"“解耦”为何如此重要？\"></a>“解耦”为何如此重要？</h3><ol>\n<li>软件设计与开发最重要的工作之一就是应对复杂性。人处理复杂性的能力是有限的。过于复杂的代码往往在可读性、可维护性上都不友好。那如何来控制代码的复杂性呢？手段有很多，我个人认为，最关键的就是解耦，保证代码松耦合、高内聚。如果说重构是保证代码质量不至于腐化到无可救药地步的有效手段，那么利用解耦的方法对代码重构，就是保证代码不至于复杂到无法控制的有效手段。</li>\n<li>后文迪米特法则有介绍，什么是“高内聚、松耦合”。。实际上，“高内聚、松耦合”是一个比较通用的设计思想，不仅可以指导细粒度的类和类之间关系的设计，还能指导粗粒度的系统、架构、模块的设计。相对于编码规范，它能够在更高层次上提高代码的可读性和可维护性。</li>\n<li>不管是阅读代码还是修改代码，“高内聚、松耦合”的特性可以让我们聚焦在某一模块或类中，不需要了解太多其他模块或类的代码，让我们的焦点不至于过于发散，降低了阅读和修改代码的难度。而且，因为依赖关系简单，耦合小，修改代码不至于牵一发而动全身，代码改动比较集中，引入 bug 的风险也就减少了很多。同时，“高内聚、松耦合”的代码可测试性也更加好，容易 mock 或者很少需要 mock 外部依赖的模块或者类。</li>\n<li>除此之外，代码“高内聚、松耦合”，也就意味着，代码结构清晰、分层和模块化合理、依赖关系简单、模块或类之间的耦合小，那代码整体的质量就不会差。即便某个具体的类或者模块设计得不怎么合理，代码质量不怎么高，影响的范围是非常有限的。我们可以聚焦于这个模块或者类，做相应的小型重构。而相对于代码结构的调整，这种改动范围比较集中的小型重构的难度就容易多了。</li>\n</ol>\n<h3 id=\"代码是否需要“解耦”？\"><a href=\"#代码是否需要“解耦”？\" class=\"headerlink\" title=\"代码是否需要“解耦”？\"></a>代码是否需要“解耦”？</h3><ol>\n<li>那现在问题来了，我们该怎么判断代码的耦合程度呢？或者说，怎么判断代码是否符合“高内聚、松耦合”呢？再或者说，如何判断系统是否需要解耦重构呢？</li>\n<li>间接的衡量标准有很多，前面我们讲到了一些，比如，看修改代码会不会牵一发而动全身。除此之外，还有一个直接的衡量标准，也是我在阅读源码的时候经常会用到的，那就是把模块与模块之间、类与类之间的依赖关系画出来，根据依赖关系图的复杂性来判断是否需要解耦重构。</li>\n<li>如果依赖关系复杂、混乱，那从代码结构上来讲，可读性和可维护性肯定不是太好，那我们就需要考虑是否可以通过解耦的方法，让依赖关系变得清晰、简单。当然，这种判断还是有比较强的主观色彩，但是可以作为一种参考和梳理依赖的手段，配合间接的衡量标准一块来使用。</li>\n</ol>\n<h3 id=\"如何给代码“解耦”？\"><a href=\"#如何给代码“解耦”？\" class=\"headerlink\" title=\"如何给代码“解耦”？\"></a>如何给代码“解耦”？</h3><blockquote>\n<p> 封装与抽象</p>\n</blockquote>\n<p>封装和抽象作为两个非常通用的设计思想，可以应用在很多设计场景中，比如系统、模块、lib、组件、接口、类等等的设计。封装和抽象可以有效地隐藏实现的复杂性，隔离实现的易变性，给依赖的模块提供稳定且易用的抽象接口</p>\n<blockquote>\n<p>中间层</p>\n</blockquote>\n<p>引入中间层能简化模块或类之间的依赖关系。下面这张图是引入中间层前后的依赖关系对比图。在引入数据存储中间层之前，A、B、C 三个模块都要依赖内存一级缓存、Redis 二级缓存、DB 持久化存储三个模块。在引入中间层之后，三个模块只需要依赖数据存储一个模块即可。从图上可以看出，中间层的引入明显地简化了依赖关系，让代码结构更加清晰</p>\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.0/design_patterns/design_ideas/0003.png\"/>\n\n\n\n<p>除此之外，我们在进行重构的时候，引入中间层可以起到过渡的作用，能够让开发和重构同步进行，不互相干扰。比如，某个接口设计得有问题，我们需要修改它的定义，同时，所有调用这个接口的代码都要做相应的改动。如果新开发的代码也用到这个接口，那开发就跟重构冲突了。为了让重构能小步快跑，我们可以分下面四个阶段来完成接口的修改。</p>\n<ul>\n<li>第一阶段：引入一个中间层，包裹老的接口，提供新的接口定义。</li>\n<li>第二阶段：新开发的代码依赖中间层提供的新接口。</li>\n<li>第三阶段：将依赖老接口的代码改为调用新接口。</li>\n<li>第四阶段：确保所有的代码都调用新接口之后，删除掉老的接口。</li>\n</ul>\n<p>这样，每个阶段的开发工作量都不会很大，都可以在很短的时间内完成。重构跟开发冲突的概率也变小了。</p>\n<blockquote>\n<p>模块化</p>\n</blockquote>\n<p>模块化是构建复杂系统常用的手段。不仅在软件行业，在建筑、机械制造等行业，这个手段也非常有用。对于一个大型复杂系统来说，没有人能掌控所有的细节。之所以我们能搭建出如此复杂的系统，并且能维护得了，最主要的原因就是将系统划分成各个独立的模块，让不同的人负责不同的模块，这样即便在不了解全部细节的情况下，管理者也能协调各个模块，让整个系统有效运转。</p>\n<blockquote>\n<p> 其他设计思想和原则</p>\n</blockquote>\n<p>“高内聚、松耦合”是一个非常重要的设计思想，能够有效提高代码的可读性和可维护性，缩小功能改动导致的代码改动范围。实际上，在前面的章节中，我们已经多次提到过这个设计思想。很多设计原则都以实现代码的“高内聚、松耦合”为目的。我们来一块总结回顾一下都有哪些原则。</p>\n<p>(这里没有讲的，在后面文章里)</p>\n<ul>\n<li>单一职责原则</li>\n</ul>\n<p>我们前面提到，内聚性和耦合性并非独立的。高内聚会让代码更加松耦合，而实现高内聚的重要指导原则就是单一职责原则。模块或者类的职责设计得单一，而不是大而全，那依赖它的类和它依赖的类就会比较少，代码耦合也就相应的降低了。</p>\n<ul>\n<li>基于接口而非实现编程</li>\n</ul>\n<p>基于接口而非实现编程能通过接口这样一个中间层，隔离变化和具体的实现。这样做的好处是，在有依赖关系的两个模块或类之间，一个模块或者类的改动，不会影响到另一个模块或类。实际上，这就相当于将一种强依赖关系（强耦合）解耦为了弱依赖关系（弱耦合）。依赖注入</p>\n<ul>\n<li>依赖注入</li>\n</ul>\n<p>跟基于接口而非实现编程思想类似，依赖注入也是将代码之间的强耦合变为弱耦合。尽管依赖注入无法将本应该有依赖关系的两个类，解耦为没有依赖关系，但可以让耦合关系没那么紧密，容易做到插拔替换</p>\n<ul>\n<li>多用组合少用继承</li>\n</ul>\n<p>我们知道，继承是一种强依赖关系，父类与子类高度耦合，且这种耦合关系非常脆弱，牵一发而动全身，父类的每一次改动都会影响所有的子类。相反，组合关系是一种弱依赖关系，这种关系更加灵活，所以，对于继承结构比较复杂的代码，利用组合来替换继承，也是一种解耦的有效手段。</p>\n<ul>\n<li>迪米特法则</li>\n</ul>\n<p>迪米特法则讲的是，不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。从定义上，我们明显可以看出，这条原则的目的就是为了实现代码的松耦合。至于如何应用这条原则来解耦代码，你可以回过头去阅读一下第 22 讲，这里我就不赘述了。除了上面讲到的这些设计思想和原则之外，还有一些设计模式也是为了解耦依赖，比如观察者模式，有关这一部分的内容，我们留在设计模式模块中慢慢讲解。</p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"设计思想\"><a href=\"#设计思想\" class=\"headerlink\" title=\"设计思想\"></a>设计思想</h1><blockquote>\n<ol>\n<li>此系列文章非本人原创，是学习笔记。</li>\n<li>设计模式系列以后会持续更新，包括已经发布的设计模式文章，因为后续还要再多看一下书，教程和开源项目等，继续润色文章。</li>\n</ol>\n</blockquote>\n<p>下面讲一些常见的设计思想</p>\n<h2 id=\"基于接口而非实现编程\"><a href=\"#基于接口而非实现编程\" class=\"headerlink\" title=\"基于接口而非实现编程\"></a>基于接口而非实现编程</h2><p>这个原则非常重要，是一种非常有效的提高代码质量的手段，在平时的开发中特别经常被用到。</p>\n<h3 id=\"如何解读原则中的“接口”二字？\"><a href=\"#如何解读原则中的“接口”二字？\" class=\"headerlink\" title=\"如何解读原则中的“接口”二字？\"></a>如何解读原则中的“接口”二字？</h3><ol>\n<li>“基于接口而非实现编程”这条原则的英文描述是：“Program to an interface, not an implementation”。我们理解这条原则的时候，千万不要一开始就与具体的编程语言挂钩，局限在编程语言的“接口”语法中（比如 Java 中的 interface 接口语法）。这条原则最早出现于 1994 年 GoF 的《设计模式》这本书，它先于很多编程语言而诞生（比如 Java 语言），是一条比较抽象、泛化的设计思想。</li>\n<li>实际上，理解这条原则的关键，就是理解其中的“接口”两个字。还记得我们上一节课讲的“接口”的定义吗？从本质上来看，“接口”就是一组“协议”或者“约定”，是功能提供者提供给使用者的一个“功能列表”。“接口”在不同的应用场景下会有不同的解读，比如服务端与客户端之间的“接口”，类库提供的“接口”，甚至是一组通信的协议都可以叫作“接口”。刚刚对“接口”的理解，都比较偏上层、偏抽象，与实际的写代码离得有点远。如果落实到具体的编码，“基于接口而非实现编程”这条原则中的“接口”，可以理解为编程语言中的接口或者抽象类。</li>\n<li>前面我们提到，这条原则能非常有效地提高代码质量，之所以这么说，那是因为，应用这条原则，可以将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低耦合性，提高扩展性。</li>\n<li>实际上，“基于接口而非实现编程”这条原则的另一个表述方式，是“基于抽象而非实现编程”。后者的表述方式其实更能体现这条原则的设计初衷。在软件开发中，最大的挑战之一就是需求的不断变化，这也是考验代码设计好坏的一个标准。<strong>越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。好的代码设计，不仅能应对当下的需求，而且在将来需求发生变化的时候，仍然能够在不破坏原有代码设计的情况下灵活应对</strong>。而抽象就是提高代码扩展性、灵活性、可维护性最有效的手段之一。</li>\n</ol>\n<h3 id=\"如何将这条原则应用到实战中？\"><a href=\"#如何将这条原则应用到实战中？\" class=\"headerlink\" title=\"如何将这条原则应用到实战中？\"></a>如何将这条原则应用到实战中？</h3><p>假设我们的系统中有很多涉及图片处理和存储的业务逻辑。图片经过处理之后被上传到阿里云上。为了代码复用，我们封装了图片存储相关的代码逻辑，提供了一个统一的 AliyunImageStore 类，供整个系统来使用。具体的代码实现如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliyunImageStore</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...省略属性、构造函数等...</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createBucketIfNotExisting</span><span class=\"params\">(String bucketName)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...创建bucket代码逻辑...</span></span><br><span class=\"line\">    <span class=\"comment\">// ...失败会抛出异常..</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">generateAccessToken</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...根据accesskey/secrectkey等生成access token</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">uploadToAliyun</span><span class=\"params\">(Image image, String bucketName, String accessToken)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...上传图片到阿里云...</span></span><br><span class=\"line\">    <span class=\"comment\">//...返回图片存储在阿里云上的地址(url）...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> Image <span class=\"title function_\">downloadFromAliyun</span><span class=\"params\">(String url, String accessToken)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...从阿里云下载图片...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AliyunImageStore类的使用举例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImageProcessingJob</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">BUCKET_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ai_images_bucket&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">//...省略其他无关代码...</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Image</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> ...; <span class=\"comment\">//处理图片，并封装为Image对象</span></span><br><span class=\"line\">    <span class=\"type\">AliyunImageStore</span> <span class=\"variable\">imageStore</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AliyunImageStore</span>(<span class=\"comment\">/*省略参数*/</span>);</span><br><span class=\"line\">    imageStore.createBucketIfNotExisting(BUCKET_NAME);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">accessToken</span> <span class=\"operator\">=</span> imageStore.generateAccessToken();</span><br><span class=\"line\">    imagestore.uploadToAliyun(image, BUCKET_NAME, accessToken);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>整个上传流程包含三个步骤：创建 bucket（你可以简单理解为存储目录）、生成 access token 访问凭证、携带 access token 上传图片到指定的 bucket 中。代码实现非常简单，类中的几个方法定义得都很干净，用起来也很清晰，乍看起来没有太大问题，完全能满足我们将图片存储在阿里云的业务需求。</li>\n<li>不过，软件开发中唯一不变的就是变化。过了一段时间后，我们自建了私有云，不再将图片存储到阿里云了，而是将图片存储到自建私有云上。为了满足这样一个需求的变化，我们该如何修改代码呢？</li>\n<li>我们需要重新设计实现一个存储图片到私有云的 PrivateImageStore 类，并用它替换掉项目中所有的 AliyunImageStore 类对象。这样的修改听起来并不复杂，只是简单替换而已，对整个代码的改动并不大。不过，我们经常说，“细节是魔鬼”。这句话在软件开发中特别适用。实际上，刚刚的设计实现方式，就隐藏了很多容易出问题的“魔鬼细节”，我们一块来看看都有哪些。</li>\n<li>新的 PrivateImageStore 类需要设计实现哪些方法，才能在尽量最小化代码修改的情况下，替换掉 AliyunImageStore 类呢？这就要求我们必须将 AliyunImageStore 类中所定义的所有 public 方法，在 PrivateImageStore 类中都逐一定义并重新实现一遍。而这样做就会存在一些问题，我总结了下面两点。<ul>\n<li>首先，AliyunImageStore 类中有些函数命名暴露了实现细节，比如，uploadToAliyun() 和 downloadFromAliyun()。如果开发这个功能的同事没有接口意识、抽象思维，那这种暴露实现细节的命名方式就不足为奇了，毕竟最初我们只考虑将图片存储在阿里云上。而我们把这种包含“aliyun”字眼的方法，照抄到 PrivateImageStore 类中，显然是不合适的。如果我们在新类中重新命名 uploadToAliyun()、downloadFromAliyun() 这些方法，那就意味着，我们要修改项目中所有使用到这两个方法的代码，代码修改量可能就会很大。</li>\n<li>其次，将图片存储到阿里云的流程，跟存储到私有云的流程，可能并不是完全一致的。比如，阿里云的图片上传和下载的过程中，需要生产 access token，而私有云不需要 access token。一方面，AliyunImageStore 中定义的 generateAccessToken() 方法不能照抄到 PrivateImageStore 中；另一方面，我们在使用 AliyunImageStore 上传、下载图片的时候，代码中用到了 generateAccessToken() 方法，如果要改为私有云的上传下载流程，这些代码都需要做调整。</li>\n</ul>\n</li>\n<li>那这两个问题该如何解决呢？解决这个问题的根本方法就是，在编写代码的时候，要遵从“基于接口而非实现编程”的原则，具体来讲，我们需要做到下面这 3 点。<ol>\n<li>函数的命名不能暴露任何实现细节。比如，前面提到的 uploadToAliyun() 就不符合要求，应该改为去掉 aliyun 这样的字眼，改为更加抽象的命名方式，比如：upload()。</li>\n<li>封装具体的实现细节。比如，跟阿里云相关的特殊上传（或下载）流程不应该暴露给调用者。我们对上传（或下载）流程进行封装，对外提供一个包裹所有上传（或下载）细节的方法，给调用者使用。</li>\n<li>为实现类定义抽象的接口。具体的实现类都依赖统一的接口定义，遵从一致的上传功能协议。使用者依赖接口，而不是具体的实现类来编程。</li>\n</ol>\n</li>\n<li>我们按照这个思路，把代码重构一下。重构后的代码如下所示：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ImageStore</span> &#123;</span><br><span class=\"line\">  String <span class=\"title function_\">upload</span><span class=\"params\">(Image image, String bucketName)</span>;</span><br><span class=\"line\">  Image <span class=\"title function_\">download</span><span class=\"params\">(String url)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliyunImageStore</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImageStore</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...省略属性、构造函数等...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">upload</span><span class=\"params\">(Image image, String bucketName)</span> &#123;</span><br><span class=\"line\">    createBucketIfNotExisting(bucketName);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">accessToken</span> <span class=\"operator\">=</span> generateAccessToken();</span><br><span class=\"line\">    <span class=\"comment\">//...上传图片到阿里云...</span></span><br><span class=\"line\">    <span class=\"comment\">//...返回图片在阿里云上的地址(url)...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Image <span class=\"title function_\">download</span><span class=\"params\">(String url)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">accessToken</span> <span class=\"operator\">=</span> generateAccessToken();</span><br><span class=\"line\">    <span class=\"comment\">//...从阿里云下载图片...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createBucketIfNotExisting</span><span class=\"params\">(String bucketName)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...创建bucket...</span></span><br><span class=\"line\">    <span class=\"comment\">// ...失败会抛出异常..</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String <span class=\"title function_\">generateAccessToken</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...根据accesskey/secrectkey等生成access token</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上传下载流程改变：私有云不需要支持access token</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PrivateImageStore</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImageStore</span>  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">upload</span><span class=\"params\">(Image image, String bucketName)</span> &#123;</span><br><span class=\"line\">    createBucketIfNotExisting(bucketName);</span><br><span class=\"line\">    <span class=\"comment\">//...上传图片到私有云...</span></span><br><span class=\"line\">    <span class=\"comment\">//...返回图片的url...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Image <span class=\"title function_\">download</span><span class=\"params\">(String url)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...从私有云下载图片...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createBucketIfNotExisting</span><span class=\"params\">(String bucketName)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...创建bucket...</span></span><br><span class=\"line\">    <span class=\"comment\">// ...失败会抛出异常..</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ImageStore的使用举例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImageProcessingJob</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">BUCKET_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ai_images_bucket&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">//...省略其他无关代码...</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Image</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> ...;<span class=\"comment\">//处理图片，并封装为Image对象</span></span><br><span class=\"line\">    <span class=\"type\">ImageStore</span> <span class=\"variable\">imageStore</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrivateImageStore</span>(...);</span><br><span class=\"line\">    imagestore.upload(image, BUCKET_NAME);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>除此之外，很多人在定义接口的时候，希望通过实现类来反推接口的定义。先把实现类写好，然后看实现类中有哪些方法，照抄到接口定义中。如果按照这种思考方式，就有可能导致接口定义不够抽象，依赖具体的实现。这样的接口设计就没有意义了。不过，如果你觉得这种思考方式更加顺畅，那也没问题，只是将实现类的方法搬移到接口定义中的时候，要有选择性的搬移，不要将跟具体实现相关的方法搬移到接口中，比如 AliyunImageStore 中的 generateAccessToken() 方法。</li>\n<li>总结一下，我们在做软件开发的时候，一定要有抽象意识、封装意识、接口意识。在定义接口的时候，不要暴露任何实现细节。接口的定义只表明做什么，而不是怎么做。而且，在设计接口的时候，我们要多思考一下，这样的接口设计是否足够通用，是否能够做到在替换具体的接口实现的时候，不需要任何接口定义的改动。</li>\n</ol>\n<h3 id=\"是否需要为每个类定义接口？\"><a href=\"#是否需要为每个类定义接口？\" class=\"headerlink\" title=\"是否需要为每个类定义接口？\"></a>是否需要为每个类定义接口？</h3><ol>\n<li>看了刚刚的讲解，你可能会有这样的疑问：为了满足这条原则，我是不是需要给每个实现类都定义对应的接口呢？在开发的时候，是不是任何代码都要只依赖接口，完全不依赖实现编程呢？</li>\n<li>做任何事情都要讲求一个“度”，过度使用这条原则，非得给每个类都定义接口，接口满天飞，也会导致不必要的开发负担。至于什么时候，该为某个类定义接口，实现基于接口的编程，什么时候不需要定义接口，直接使用实现类编程，我们做权衡的根本依据，还是要回归到设计原则诞生的初衷上来。只要搞清楚了这条原则是为了解决什么样的问题而产生的，你就会发现，很多之前模棱两可的问题，都会变得豁然开朗。</li>\n<li>前面我们也提到，这条原则的设计初衷是，将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。上游系统面向接口而非实现编程，不依赖不稳定的实现细节，这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低代码间的耦合性，提高代码的扩展性。</li>\n<li>从这个设计初衷上来看，如果在我们的业务场景中，某个功能只有一种实现方式，未来也不可能被其他实现方式替换，那我们就没有必要为其设计接口，也没有必要基于接口编程，直接使用实现类就可以了。</li>\n<li>除此之外，越是不稳定的系统，我们越是要在代码的扩展性、维护性上下功夫。相反，如果某个系统特别稳定，在开发完之后，基本上不需要做维护，那我们就没有必要为其扩展性，投入不必要的开发时间。</li>\n</ol>\n<h2 id=\"多用组合少用继承\"><a href=\"#多用组合少用继承\" class=\"headerlink\" title=\"多用组合少用继承\"></a>多用组合少用继承</h2><p>在面向对象编程中，有一条非常经典的设计原则，那就是：组合优于继承，多用组合少用继承。为什么不推荐使用继承？组合相比继承有哪些优势？如何判断该用组合还是继承？今天，我们就围绕着这三个问题，来详细讲解一下这条设计原则。</p>\n<h3 id=\"为什么不推荐使用继承？\"><a href=\"#为什么不推荐使用继承？\" class=\"headerlink\" title=\"为什么不推荐使用继承？\"></a>为什么不推荐使用继承？</h3><ol>\n<li>继承是面向对象的四大特性之一，用来表示类之间的 is-a 关系，可以解决代码复用的问题。虽然继承有诸多作用，但继承层次过深、过复杂，也会影响到代码的可维护性。所以，对于是否应该在项目中使用继承，网上有很多争议。很多人觉得继承是一种反模式，应该尽量少用，甚至不用。为什么会有这样的争议？我们通过一个例子来解释一下。</li>\n<li>假设我们要设计一个关于鸟的类。我们将“鸟类”这样一个抽象的事物概念，定义为一个抽象类 AbstractBird。所有更细分的鸟，比如麻雀、鸽子、乌鸦等，都继承这个抽象类。</li>\n<li>我们知道，大部分鸟都会飞，那我们可不可以在 AbstractBird 抽象类中，定义一个 fly() 方法呢？答案是否定的。尽管大部分鸟都会飞，但也有特例，比如鸵鸟就不会飞。鸵鸟继承具有 fly() 方法的父类，那鸵鸟就具有“飞”这样的行为，这显然不符合我们对现实世界中事物的认识。当然，你可能会说，我在鸵鸟这个子类中重写（override）fly() 方法，让它抛出 UnSupportedMethodException 异常不就可以了吗？具体的代码实现如下所示：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractBird</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...省略其他属性和方法...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Ostrich</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBird</span> &#123; <span class=\"comment\">//鸵鸟</span></span><br><span class=\"line\">  <span class=\"comment\">//...省略其他属性和方法...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnSupportedMethodException</span>(<span class=\"string\">&quot;I can&#x27;t fly.&#x27;&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>这种设计思路虽然可以解决问题，但不够优美。因为除了鸵鸟之外，不会飞的鸟还有很多，比如企鹅。对于这些不会飞的鸟来说，我们都需要重写 fly() 方法，抛出异常。这样的设计，一方面，徒增了编码的工作量；另一方面，也违背了我们之后要讲的最小知识原则（Least Knowledge Principle，也叫最少知识原则或者迪米特法则），暴露不该暴露的接口给外部，增加了类使用过程中被误用的概率。</li>\n<li>你可能又会说，那我们再通过 AbstractBird 类派生出两个更加细分的抽象类：会飞的鸟类 AbstractFlyableBird 和不会飞的鸟类 AbstractUnFlyableBird，让麻雀、乌鸦这些会飞的鸟都继承 AbstractFlyableBird，让鸵鸟、企鹅这些不会飞的鸟，都继承 AbstractUnFlyableBird 类，不就可以了吗？具体的继承关系如下图所示：</li>\n</ol>\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.0/design_patterns/design_ideas/0001.png\"/>\n\n\n\n<ol>\n<li><p>从图中我们可以看出，继承关系变成了三层。不过，整体上来讲，目前的继承关系还比较简单，层次比较浅，也算是一种可以接受的设计思路。我们再继续加点难度。在刚刚这个场景中，我们只关注“鸟会不会飞”，但如果我们还关注“鸟会不会叫”，那这个时候，我们又该如何设计类之间的继承关系呢？</p>\n</li>\n<li><p>是否会飞？是否会叫？两个行为搭配起来会产生四种情况：会飞会叫、不会飞会叫、会飞不会叫、不会飞不会叫。如果我们继续沿用刚才的设计思路，那就需要再定义四个抽象类（AbstractFlyableTweetableBird、AbstractFlyableUnTweetableBird、AbstractUnFlyableTweetableBird、AbstractUnFlyableUnTweetableBird）。</p>\n</li>\n</ol>\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.0/design_patterns/design_ideas/0002.png\"/>\n\n\n\n<ol>\n<li>如果我们还需要考虑“是否会下蛋”这样一个行为，那估计就要组合爆炸了。类的继承层次会越来越深、继承关系会越来越复杂。而这种层次很深、很复杂的继承关系，一方面，会导致代码的可读性变差。因为我们要搞清楚某个类具有哪些方法、属性，必须阅读父类的代码、父类的父类的代码……一直追溯到最顶层父类的代码。另一方面，这也破坏了类的封装特性，将父类的实现细节暴露给了子类。子类的实现依赖父类的实现，两者高度耦合，一旦父类代码修改，就会影响所有子类的逻辑。</li>\n<li>总之，继承最大的问题就在于：继承层次过深、继承关系过于复杂会影响到代码的可读性和可维护性。这也是为什么我们不推荐使用继承。那刚刚例子中继承存在的问题，我们又该如何来解决呢？你可以先自己思考一下，再听我下面的讲解。</li>\n</ol>\n<h3 id=\"组合相比继承有哪些优势？\"><a href=\"#组合相比继承有哪些优势？\" class=\"headerlink\" title=\"组合相比继承有哪些优势？\"></a>组合相比继承有哪些优势？</h3><ol>\n<li>实际上，我们可以利用组合（composition）、接口、委托（delegation）三个技术手段，一块儿来解决刚刚继承存在的问题。</li>\n<li>接口表示具有某种行为特性。针对“会飞”这样一个行为特性，我们可以定义一个 Flyable 接口，只让会飞的鸟去实现这个接口。对于会叫、会下蛋这些行为特性，我们可以类似地定义 Tweetable 接口、EggLayable 接口。我们将这个设计思路翻译成 Java 代码的话，就是下面这个样子：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Flyable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Tweetable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">tweet</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">EggLayable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">layEgg</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Ostrich</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Tweetable</span>, EggLayable &#123;<span class=\"comment\">//鸵鸟</span></span><br><span class=\"line\">  <span class=\"comment\">//... 省略其他属性和方法...</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tweet</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">layEgg</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sparrow</span> impelents Flyable, Tweetable, EggLayable &#123;<span class=\"comment\">//麻雀</span></span><br><span class=\"line\">  <span class=\"comment\">//... 省略其他属性和方法...</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tweet</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">layEgg</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>不过，我们知道，接口只声明方法，不定义实现。也就是说，每个会下蛋的鸟都要实现一遍 layEgg() 方法，并且实现逻辑是一样的，这就会导致代码重复的问题。那这个问题又该如何解决呢？</li>\n<li>我们可以针对三个接口再定义三个实现类，它们分别是：实现了 fly() 方法的 FlyAbility 类、实现了 tweet() 方法的 TweetAbility 类、实现了 layEgg() 方法的 EggLayAbility 类。然后，通过组合和委托技术来消除代码重复。具体的代码实现如下所示：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Flyable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span>；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlyAbility</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Flyable</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fly</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//省略Tweetable/TweetAbility/EggLayable/EggLayAbility</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Ostrich</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Tweetable</span>, EggLayable &#123;<span class=\"comment\">//鸵鸟</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">TweetAbility</span> <span class=\"variable\">tweetAbility</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TweetAbility</span>(); <span class=\"comment\">//组合</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">EggLayAbility</span> <span class=\"variable\">eggLayAbility</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EggLayAbility</span>(); <span class=\"comment\">//组合</span></span><br><span class=\"line\">  <span class=\"comment\">//... 省略其他属性和方法...</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tweet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    tweetAbility.tweet(); <span class=\"comment\">// 委托</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">layEgg</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    eggLayAbility.layEgg(); <span class=\"comment\">// 委托</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们知道继承主要有三个作用：表示 is-a 关系，支持多态特性，代码复用。而这三个作用都可以通过其他技术手段来达成。比如 is-a 关系，我们可以通过组合和接口的 has-a 关系来替代；多态特性我们可以利用接口来实现；代码复用我们可以通过组合和委托来实现。所以，从理论上讲，通过组合、接口、委托三个技术手段，我们完全可以替换掉继承，在项目中不用或者少用继承关系，特别是一些复杂的继承关系。</p>\n<h3 id=\"如何判断该用组合还是继承？\"><a href=\"#如何判断该用组合还是继承？\" class=\"headerlink\" title=\"如何判断该用组合还是继承？\"></a>如何判断该用组合还是继承？</h3><ol>\n<li>尽管我们鼓励多用组合少用继承，但组合也并不是完美的，继承也并非一无是处。从上面的例子来看，继承改写成组合意味着要做更细粒度的类的拆分。这也就意味着，我们要定义更多的类和接口。类和接口的增多也就或多或少地增加代码的复杂程度和维护成本。所以，在实际的项目开发中，我们还是要根据具体的情况，来具体选择该用继承还是组合。</li>\n<li>如果类之间的继承结构稳定（不会轻易改变），继承层次比较浅（比如，最多有两层继承关系），继承关系不复杂，我们就可以大胆地使用继承。反之，系统越不稳定，继承层次很深，继承关系复杂，我们就尽量使用组合来替代继承。</li>\n<li>除此之外，还有一些设计模式会固定使用继承或者组合。比如，装饰者模式（decorator pattern）、策略模式（strategy pattern）、组合模式（composite pattern）等都使用了组合关系，而模板模式（template pattern）使用了继承关系。</li>\n<li>前面我们讲到继承可以实现代码复用。利用继承特性，我们把相同的属性和方法，抽取出来，定义到父类中。子类复用父类中的属性和方法，达到代码复用的目的。但是，有的时候，从业务含义上，A 类和 B 类并不一定具有继承关系。比如，Crawler 类和 PageAnalyzer 类，它们都用到了 URL 拼接和分割的功能，但并不具有继承关系（既不是父子关系，也不是兄弟关系）。仅仅为了代码复用，生硬地抽象出一个父类出来，会影响到代码的可读性。如果不熟悉背后设计思路的同事，发现 Crawler 类和 PageAnalyzer 类继承同一个父类，而父类中定义的却只是 URL 相关的操作，会觉得这个代码写得莫名其妙，理解不了。这个时候，使用组合就更加合理、更加灵活。具体的代码实现如下所示：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Url</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...省略属性和方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Crawler</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Url url; <span class=\"comment\">// 组合</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Crawler</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.url = <span class=\"keyword\">new</span> <span class=\"title class_\">Url</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageAnalyzer</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Url url; <span class=\"comment\">// 组合</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">PageAnalyzer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.url = <span class=\"keyword\">new</span> <span class=\"title class_\">Url</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>还有一些特殊的场景要求我们必须使用继承。如果你不能改变一个函数的入参类型，而入参又非接口，为了支持多态，只能采用继承来实现。比如下面这样一段代码，其中 FeignClient 是一个外部类，我们没有权限去修改这部分代码，但是我们希望能重写这个类在运行时执行的 encode() 函数。这个时候，我们只能采用继承来实现了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FeignClient</span> &#123; <span class=\"comment\">// Feign Client框架代码</span></span><br><span class=\"line\">  <span class=\"comment\">//...省略其他代码...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">encode</span><span class=\"params\">(String url)</span> &#123; <span class=\"comment\">//... &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">demofunction</span><span class=\"params\">(FeignClient feignClient)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  feignClient.encode(url);</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomizedFeignClient</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FeignClient</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">encode</span><span class=\"params\">(String url)</span> &#123; <span class=\"comment\">//...重写encode的实现...&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\"><span class=\"type\">FeignClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CustomizedFeignClient</span>();</span><br><span class=\"line\">demofunction(client);</span><br></pre></td></tr></table></figure>\n\n<p>尽管有些人说，要杜绝继承，100% 用组合代替继承，但是我的观点没那么极端！之所以“多用组合少用继承”这个口号喊得这么响，只是因为，长期以来，我们过度使用继承。还是那句话，组合并不完美，继承也不是一无是处。只要我们控制好它们的副作用、发挥它们各自的优势，在不同的场合下，恰当地选择使用继承还是组合，这才是我们所追求的境界。</p>\n<h2 id=\"如何通过封装、抽象、模块化、中间层等解耦代码？\"><a href=\"#如何通过封装、抽象、模块化、中间层等解耦代码？\" class=\"headerlink\" title=\"如何通过封装、抽象、模块化、中间层等解耦代码？\"></a>如何通过封装、抽象、模块化、中间层等解耦代码？</h2><h3 id=\"“解耦”为何如此重要？\"><a href=\"#“解耦”为何如此重要？\" class=\"headerlink\" title=\"“解耦”为何如此重要？\"></a>“解耦”为何如此重要？</h3><ol>\n<li>软件设计与开发最重要的工作之一就是应对复杂性。人处理复杂性的能力是有限的。过于复杂的代码往往在可读性、可维护性上都不友好。那如何来控制代码的复杂性呢？手段有很多，我个人认为，最关键的就是解耦，保证代码松耦合、高内聚。如果说重构是保证代码质量不至于腐化到无可救药地步的有效手段，那么利用解耦的方法对代码重构，就是保证代码不至于复杂到无法控制的有效手段。</li>\n<li>后文迪米特法则有介绍，什么是“高内聚、松耦合”。。实际上，“高内聚、松耦合”是一个比较通用的设计思想，不仅可以指导细粒度的类和类之间关系的设计，还能指导粗粒度的系统、架构、模块的设计。相对于编码规范，它能够在更高层次上提高代码的可读性和可维护性。</li>\n<li>不管是阅读代码还是修改代码，“高内聚、松耦合”的特性可以让我们聚焦在某一模块或类中，不需要了解太多其他模块或类的代码，让我们的焦点不至于过于发散，降低了阅读和修改代码的难度。而且，因为依赖关系简单，耦合小，修改代码不至于牵一发而动全身，代码改动比较集中，引入 bug 的风险也就减少了很多。同时，“高内聚、松耦合”的代码可测试性也更加好，容易 mock 或者很少需要 mock 外部依赖的模块或者类。</li>\n<li>除此之外，代码“高内聚、松耦合”，也就意味着，代码结构清晰、分层和模块化合理、依赖关系简单、模块或类之间的耦合小，那代码整体的质量就不会差。即便某个具体的类或者模块设计得不怎么合理，代码质量不怎么高，影响的范围是非常有限的。我们可以聚焦于这个模块或者类，做相应的小型重构。而相对于代码结构的调整，这种改动范围比较集中的小型重构的难度就容易多了。</li>\n</ol>\n<h3 id=\"代码是否需要“解耦”？\"><a href=\"#代码是否需要“解耦”？\" class=\"headerlink\" title=\"代码是否需要“解耦”？\"></a>代码是否需要“解耦”？</h3><ol>\n<li>那现在问题来了，我们该怎么判断代码的耦合程度呢？或者说，怎么判断代码是否符合“高内聚、松耦合”呢？再或者说，如何判断系统是否需要解耦重构呢？</li>\n<li>间接的衡量标准有很多，前面我们讲到了一些，比如，看修改代码会不会牵一发而动全身。除此之外，还有一个直接的衡量标准，也是我在阅读源码的时候经常会用到的，那就是把模块与模块之间、类与类之间的依赖关系画出来，根据依赖关系图的复杂性来判断是否需要解耦重构。</li>\n<li>如果依赖关系复杂、混乱，那从代码结构上来讲，可读性和可维护性肯定不是太好，那我们就需要考虑是否可以通过解耦的方法，让依赖关系变得清晰、简单。当然，这种判断还是有比较强的主观色彩，但是可以作为一种参考和梳理依赖的手段，配合间接的衡量标准一块来使用。</li>\n</ol>\n<h3 id=\"如何给代码“解耦”？\"><a href=\"#如何给代码“解耦”？\" class=\"headerlink\" title=\"如何给代码“解耦”？\"></a>如何给代码“解耦”？</h3><blockquote>\n<p> 封装与抽象</p>\n</blockquote>\n<p>封装和抽象作为两个非常通用的设计思想，可以应用在很多设计场景中，比如系统、模块、lib、组件、接口、类等等的设计。封装和抽象可以有效地隐藏实现的复杂性，隔离实现的易变性，给依赖的模块提供稳定且易用的抽象接口</p>\n<blockquote>\n<p>中间层</p>\n</blockquote>\n<p>引入中间层能简化模块或类之间的依赖关系。下面这张图是引入中间层前后的依赖关系对比图。在引入数据存储中间层之前，A、B、C 三个模块都要依赖内存一级缓存、Redis 二级缓存、DB 持久化存储三个模块。在引入中间层之后，三个模块只需要依赖数据存储一个模块即可。从图上可以看出，中间层的引入明显地简化了依赖关系，让代码结构更加清晰</p>\n<img src=\"https://npm.elemecdn.com/youthlql@1.0.0/design_patterns/design_ideas/0003.png\"/>\n\n\n\n<p>除此之外，我们在进行重构的时候，引入中间层可以起到过渡的作用，能够让开发和重构同步进行，不互相干扰。比如，某个接口设计得有问题，我们需要修改它的定义，同时，所有调用这个接口的代码都要做相应的改动。如果新开发的代码也用到这个接口，那开发就跟重构冲突了。为了让重构能小步快跑，我们可以分下面四个阶段来完成接口的修改。</p>\n<ul>\n<li>第一阶段：引入一个中间层，包裹老的接口，提供新的接口定义。</li>\n<li>第二阶段：新开发的代码依赖中间层提供的新接口。</li>\n<li>第三阶段：将依赖老接口的代码改为调用新接口。</li>\n<li>第四阶段：确保所有的代码都调用新接口之后，删除掉老的接口。</li>\n</ul>\n<p>这样，每个阶段的开发工作量都不会很大，都可以在很短的时间内完成。重构跟开发冲突的概率也变小了。</p>\n<blockquote>\n<p>模块化</p>\n</blockquote>\n<p>模块化是构建复杂系统常用的手段。不仅在软件行业，在建筑、机械制造等行业，这个手段也非常有用。对于一个大型复杂系统来说，没有人能掌控所有的细节。之所以我们能搭建出如此复杂的系统，并且能维护得了，最主要的原因就是将系统划分成各个独立的模块，让不同的人负责不同的模块，这样即便在不了解全部细节的情况下，管理者也能协调各个模块，让整个系统有效运转。</p>\n<blockquote>\n<p> 其他设计思想和原则</p>\n</blockquote>\n<p>“高内聚、松耦合”是一个非常重要的设计思想，能够有效提高代码的可读性和可维护性，缩小功能改动导致的代码改动范围。实际上，在前面的章节中，我们已经多次提到过这个设计思想。很多设计原则都以实现代码的“高内聚、松耦合”为目的。我们来一块总结回顾一下都有哪些原则。</p>\n<p>(这里没有讲的，在后面文章里)</p>\n<ul>\n<li>单一职责原则</li>\n</ul>\n<p>我们前面提到，内聚性和耦合性并非独立的。高内聚会让代码更加松耦合，而实现高内聚的重要指导原则就是单一职责原则。模块或者类的职责设计得单一，而不是大而全，那依赖它的类和它依赖的类就会比较少，代码耦合也就相应的降低了。</p>\n<ul>\n<li>基于接口而非实现编程</li>\n</ul>\n<p>基于接口而非实现编程能通过接口这样一个中间层，隔离变化和具体的实现。这样做的好处是，在有依赖关系的两个模块或类之间，一个模块或者类的改动，不会影响到另一个模块或类。实际上，这就相当于将一种强依赖关系（强耦合）解耦为了弱依赖关系（弱耦合）。依赖注入</p>\n<ul>\n<li>依赖注入</li>\n</ul>\n<p>跟基于接口而非实现编程思想类似，依赖注入也是将代码之间的强耦合变为弱耦合。尽管依赖注入无法将本应该有依赖关系的两个类，解耦为没有依赖关系，但可以让耦合关系没那么紧密，容易做到插拔替换</p>\n<ul>\n<li>多用组合少用继承</li>\n</ul>\n<p>我们知道，继承是一种强依赖关系，父类与子类高度耦合，且这种耦合关系非常脆弱，牵一发而动全身，父类的每一次改动都会影响所有的子类。相反，组合关系是一种弱依赖关系，这种关系更加灵活，所以，对于继承结构比较复杂的代码，利用组合来替换继承，也是一种解耦的有效手段。</p>\n<ul>\n<li>迪米特法则</li>\n</ul>\n<p>迪米特法则讲的是，不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。从定义上，我们明显可以看出，这条原则的目的就是为了实现代码的松耦合。至于如何应用这条原则来解耦代码，你可以回过头去阅读一下第 22 讲，这里我就不赘述了。除了上面讲到的这些设计思想和原则之外，还有一些设计模式也是为了解耦依赖，比如观察者模式，有关这一部分的内容，我们留在设计模式模块中慢慢讲解。</p>\n"},{"title":"单节点单硬盘部署MinIO","date":"2024-04-13T13:56:39.000Z","cover":"../img/minio/minio.svg","_content":"# 一、新建目录\n``` Shell\ncd /use/local\nmkdir minio\n```\n# 二、新建日志文件\n``` Shell\ncd ./minio\ntouch minio.log\n```\n# 三、下载minio文件\n``` Java\nwget https://dl.minio.io/server/minio/release/linux-amd64/minio\n```\n# 四、给minio文件赋予777权限，可写可读都执行\n``` Shell\nchmod 777 minio\n```\n# 五、设置环境变量\n``` Shell\nvim /etc/profile\n\n# 在文件末尾添加一下内容\n# minio环境变量\nexport MINIO_ROOT_USER=myminioadmin\nexport MINIO_ROOT_PASSWORD=minio-secret-key-change-me\n```\n# 六、生效环境变量\n``` Shell\nsource /etc/profile\n```\n# 七、编写minio启动Shell脚本\n``` Shell\nvim startup.sh\n\n# 添加一下内容\nnohup /usr/local/minio/minio server  /usr/local/minio/data --console-address \":35555\" > /usr/local/minio/minio.log 2>&1 &\n```\n# 八、编写minio停止sh脚本\n``` Shell\nvim stop.sh\n\n# 添加以下内容\n#!/bin/bash\n\n# 查找 MinIO 进程的 PID\nminio_pid=$(ps aux | grep '/usr/local/minio/minio server' | grep -v 'grep' | awk '{print $2}')\n\n# 如果找到了 MinIO 进程的 PID，则终止该进程\nif [ -n \"$minio_pid\" ]; then\n    echo \"Stopping MinIO server...\"\n    kill $minio_pid\nelse\n    echo \"MinIO server is not running.\"\nfi\n```\n# 九、开发端口\n``` Shell\nfirewall-cmd --zone=public --add-port=9000/tcp --permanent\nfirewall-cmd --zone=public --add-port=35555/tcp --permanent\nfirewall-cmd –reload\n```\n# 十、启动或者停止脚本\n``` Shell\n# 启动脚本\nsh startup.sh\n\n# 停止脚本\nsh stop.sh\n\n``` \n# 十一、访问minio console\n``` java\n控制台：http://ip:35555\nAPI：http://ip:9000\n```\n# 十二、注意事项\n无法访问可查看minio.log文件或者重启服务器\n``` Shell\nshutdown -r now\n```","source":"_posts/2024-04-13-单节点单硬盘部署MinIO.md","raw":"---\ntitle: 单节点单硬盘部署MinIO\ndate: 2024-04-13 21:56:39\ncover: ../img/minio/minio.svg\ntags: [ Java,对象储存,Minio ]\ncategories:\n  - Minio\n---\n# 一、新建目录\n``` Shell\ncd /use/local\nmkdir minio\n```\n# 二、新建日志文件\n``` Shell\ncd ./minio\ntouch minio.log\n```\n# 三、下载minio文件\n``` Java\nwget https://dl.minio.io/server/minio/release/linux-amd64/minio\n```\n# 四、给minio文件赋予777权限，可写可读都执行\n``` Shell\nchmod 777 minio\n```\n# 五、设置环境变量\n``` Shell\nvim /etc/profile\n\n# 在文件末尾添加一下内容\n# minio环境变量\nexport MINIO_ROOT_USER=myminioadmin\nexport MINIO_ROOT_PASSWORD=minio-secret-key-change-me\n```\n# 六、生效环境变量\n``` Shell\nsource /etc/profile\n```\n# 七、编写minio启动Shell脚本\n``` Shell\nvim startup.sh\n\n# 添加一下内容\nnohup /usr/local/minio/minio server  /usr/local/minio/data --console-address \":35555\" > /usr/local/minio/minio.log 2>&1 &\n```\n# 八、编写minio停止sh脚本\n``` Shell\nvim stop.sh\n\n# 添加以下内容\n#!/bin/bash\n\n# 查找 MinIO 进程的 PID\nminio_pid=$(ps aux | grep '/usr/local/minio/minio server' | grep -v 'grep' | awk '{print $2}')\n\n# 如果找到了 MinIO 进程的 PID，则终止该进程\nif [ -n \"$minio_pid\" ]; then\n    echo \"Stopping MinIO server...\"\n    kill $minio_pid\nelse\n    echo \"MinIO server is not running.\"\nfi\n```\n# 九、开发端口\n``` Shell\nfirewall-cmd --zone=public --add-port=9000/tcp --permanent\nfirewall-cmd --zone=public --add-port=35555/tcp --permanent\nfirewall-cmd –reload\n```\n# 十、启动或者停止脚本\n``` Shell\n# 启动脚本\nsh startup.sh\n\n# 停止脚本\nsh stop.sh\n\n``` \n# 十一、访问minio console\n``` java\n控制台：http://ip:35555\nAPI：http://ip:9000\n```\n# 十二、注意事项\n无法访问可查看minio.log文件或者重启服务器\n``` Shell\nshutdown -r now\n```","slug":"2024-04-13-单节点单硬盘部署MinIO","published":1,"updated":"2024-04-13T14:27:28.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv9oiyhl000lf0vd6wwd11w2","content":"<h1 id=\"一、新建目录\"><a href=\"#一、新建目录\" class=\"headerlink\" title=\"一、新建目录\"></a>一、新建目录</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /use/local</span><br><span class=\"line\">mkdir minio</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、新建日志文件\"><a href=\"#二、新建日志文件\" class=\"headerlink\" title=\"二、新建日志文件\"></a>二、新建日志文件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./minio</span><br><span class=\"line\">touch minio.log</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、下载minio文件\"><a href=\"#三、下载minio文件\" class=\"headerlink\" title=\"三、下载minio文件\"></a>三、下载minio文件</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"comment\">//dl.minio.io/server/minio/release/linux-amd64/minio</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"四、给minio文件赋予777权限，可写可读都执行\"><a href=\"#四、给minio文件赋予777权限，可写可读都执行\" class=\"headerlink\" title=\"四、给minio文件赋予777权限，可写可读都执行\"></a>四、给minio文件赋予777权限，可写可读都执行</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 minio</span><br></pre></td></tr></table></figure>\n<h1 id=\"五、设置环境变量\"><a href=\"#五、设置环境变量\" class=\"headerlink\" title=\"五、设置环境变量\"></a>五、设置环境变量</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在文件末尾添加一下内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">minio环境变量</span></span><br><span class=\"line\">export MINIO_ROOT_USER=myminioadmin</span><br><span class=\"line\">export MINIO_ROOT_PASSWORD=minio-secret-key-change-me</span><br></pre></td></tr></table></figure>\n<h1 id=\"六、生效环境变量\"><a href=\"#六、生效环境变量\" class=\"headerlink\" title=\"六、生效环境变量\"></a>六、生效环境变量</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<h1 id=\"七、编写minio启动Shell脚本\"><a href=\"#七、编写minio启动Shell脚本\" class=\"headerlink\" title=\"七、编写minio启动Shell脚本\"></a>七、编写minio启动Shell脚本</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim startup.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加一下内容</span></span><br><span class=\"line\">nohup /usr/local/minio/minio server  /usr/local/minio/data --console-address &quot;:35555&quot; &gt; /usr/local/minio/minio.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<h1 id=\"八、编写minio停止sh脚本\"><a href=\"#八、编写minio停止sh脚本\" class=\"headerlink\" title=\"八、编写minio停止sh脚本\"></a>八、编写minio停止sh脚本</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim stop.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加以下内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查找 MinIO 进程的 PID</span></span><br><span class=\"line\">minio_pid=$(ps aux | grep &#x27;/usr/local/minio/minio server&#x27; | grep -v &#x27;grep&#x27; | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果找到了 MinIO 进程的 PID，则终止该进程</span></span><br><span class=\"line\">if [ -n &quot;$minio_pid&quot; ]; then</span><br><span class=\"line\">    echo &quot;Stopping MinIO server...&quot;</span><br><span class=\"line\">    kill $minio_pid</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;MinIO server is not running.&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h1 id=\"九、开发端口\"><a href=\"#九、开发端口\" class=\"headerlink\" title=\"九、开发端口\"></a>九、开发端口</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=9000/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=35555/tcp --permanent</span><br><span class=\"line\">firewall-cmd –reload</span><br></pre></td></tr></table></figure>\n<h1 id=\"十、启动或者停止脚本\"><a href=\"#十、启动或者停止脚本\" class=\"headerlink\" title=\"十、启动或者停止脚本\"></a>十、启动或者停止脚本</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动脚本</span></span><br><span class=\"line\">sh startup.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">停止脚本</span></span><br><span class=\"line\">sh stop.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"十一、访问minio-console\"><a href=\"#十一、访问minio-console\" class=\"headerlink\" title=\"十一、访问minio console\"></a>十一、访问minio console</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">控制台：http:<span class=\"comment\">//ip:35555</span></span><br><span class=\"line\">API：http:<span class=\"comment\">//ip:9000</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"十二、注意事项\"><a href=\"#十二、注意事项\" class=\"headerlink\" title=\"十二、注意事项\"></a>十二、注意事项</h1><p>无法访问可查看minio.log文件或者重启服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown -r now</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"一、新建目录\"><a href=\"#一、新建目录\" class=\"headerlink\" title=\"一、新建目录\"></a>一、新建目录</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /use/local</span><br><span class=\"line\">mkdir minio</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、新建日志文件\"><a href=\"#二、新建日志文件\" class=\"headerlink\" title=\"二、新建日志文件\"></a>二、新建日志文件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./minio</span><br><span class=\"line\">touch minio.log</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、下载minio文件\"><a href=\"#三、下载minio文件\" class=\"headerlink\" title=\"三、下载minio文件\"></a>三、下载minio文件</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"comment\">//dl.minio.io/server/minio/release/linux-amd64/minio</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"四、给minio文件赋予777权限，可写可读都执行\"><a href=\"#四、给minio文件赋予777权限，可写可读都执行\" class=\"headerlink\" title=\"四、给minio文件赋予777权限，可写可读都执行\"></a>四、给minio文件赋予777权限，可写可读都执行</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 minio</span><br></pre></td></tr></table></figure>\n<h1 id=\"五、设置环境变量\"><a href=\"#五、设置环境变量\" class=\"headerlink\" title=\"五、设置环境变量\"></a>五、设置环境变量</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在文件末尾添加一下内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">minio环境变量</span></span><br><span class=\"line\">export MINIO_ROOT_USER=myminioadmin</span><br><span class=\"line\">export MINIO_ROOT_PASSWORD=minio-secret-key-change-me</span><br></pre></td></tr></table></figure>\n<h1 id=\"六、生效环境变量\"><a href=\"#六、生效环境变量\" class=\"headerlink\" title=\"六、生效环境变量\"></a>六、生效环境变量</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<h1 id=\"七、编写minio启动Shell脚本\"><a href=\"#七、编写minio启动Shell脚本\" class=\"headerlink\" title=\"七、编写minio启动Shell脚本\"></a>七、编写minio启动Shell脚本</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim startup.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加一下内容</span></span><br><span class=\"line\">nohup /usr/local/minio/minio server  /usr/local/minio/data --console-address &quot;:35555&quot; &gt; /usr/local/minio/minio.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<h1 id=\"八、编写minio停止sh脚本\"><a href=\"#八、编写minio停止sh脚本\" class=\"headerlink\" title=\"八、编写minio停止sh脚本\"></a>八、编写minio停止sh脚本</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim stop.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加以下内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查找 MinIO 进程的 PID</span></span><br><span class=\"line\">minio_pid=$(ps aux | grep &#x27;/usr/local/minio/minio server&#x27; | grep -v &#x27;grep&#x27; | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果找到了 MinIO 进程的 PID，则终止该进程</span></span><br><span class=\"line\">if [ -n &quot;$minio_pid&quot; ]; then</span><br><span class=\"line\">    echo &quot;Stopping MinIO server...&quot;</span><br><span class=\"line\">    kill $minio_pid</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;MinIO server is not running.&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h1 id=\"九、开发端口\"><a href=\"#九、开发端口\" class=\"headerlink\" title=\"九、开发端口\"></a>九、开发端口</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=9000/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=35555/tcp --permanent</span><br><span class=\"line\">firewall-cmd –reload</span><br></pre></td></tr></table></figure>\n<h1 id=\"十、启动或者停止脚本\"><a href=\"#十、启动或者停止脚本\" class=\"headerlink\" title=\"十、启动或者停止脚本\"></a>十、启动或者停止脚本</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动脚本</span></span><br><span class=\"line\">sh startup.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">停止脚本</span></span><br><span class=\"line\">sh stop.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"十一、访问minio-console\"><a href=\"#十一、访问minio-console\" class=\"headerlink\" title=\"十一、访问minio console\"></a>十一、访问minio console</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">控制台：http:<span class=\"comment\">//ip:35555</span></span><br><span class=\"line\">API：http:<span class=\"comment\">//ip:9000</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"十二、注意事项\"><a href=\"#十二、注意事项\" class=\"headerlink\" title=\"十二、注意事项\"></a>十二、注意事项</h1><p>无法访问可查看minio.log文件或者重启服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown -r now</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"clv9oiygu0001f0vdcnpj4n09","category_id":"clv9oiygz0002f0vdap2x55ql","_id":"clv9oiyhc0008f0vd89897c2n"},{"post_id":"clv9oiygh0000f0vdcvv9g7k1","category_id":"clv9oiygz0002f0vdap2x55ql","_id":"clv9oiyhe000bf0vdbem7cyea"},{"post_id":"clv9oiygh0000f0vdcvv9g7k1","category_id":"clv9oiyha0006f0vdbvo3bw1t","_id":"clv9oiyhf000ef0vd0ki64ur1"},{"post_id":"clv9oiyhl000lf0vd6wwd11w2","category_id":"clv9oiyho000of0vd7pmkdf6q","_id":"clv9oiyhr000uf0vd3pjgak56"},{"post_id":"clv9oiyhj000kf0vd6hnufily","category_id":"clv9oiyhn000mf0vd4l0h2nj0","_id":"clv9oiyhs000wf0vd5i8xbndz"},{"post_id":"clv9oiyhj000kf0vd6hnufily","category_id":"clv9oiyhp000qf0vdcnwk3xsv","_id":"clv9oiyhs000xf0vdde9p1z9o"}],"PostTag":[{"post_id":"clv9oiygh0000f0vdcvv9g7k1","tag_id":"clv9oiyh30003f0vd4xu57vww","_id":"clv9oiyhd000af0vdd1zwevc4"},{"post_id":"clv9oiygh0000f0vdcvv9g7k1","tag_id":"clv9oiyh50005f0vd13473ad8","_id":"clv9oiyhe000cf0vd9f6te75l"},{"post_id":"clv9oiygh0000f0vdcvv9g7k1","tag_id":"clv9oiyhb0007f0vdfanyaft6","_id":"clv9oiyhf000ff0vdg7is2jua"},{"post_id":"clv9oiygu0001f0vdcnpj4n09","tag_id":"clv9oiyhc0009f0vdajsce6pd","_id":"clv9oiyhg000hf0vd2vw46p2s"},{"post_id":"clv9oiygu0001f0vdcnpj4n09","tag_id":"clv9oiyhe000df0vdap7s4aa3","_id":"clv9oiyhg000if0vd1jpn5uvo"},{"post_id":"clv9oiygu0001f0vdcnpj4n09","tag_id":"clv9oiyhf000gf0vdffkq2wrr","_id":"clv9oiyhg000jf0vd3feq04ro"},{"post_id":"clv9oiyhj000kf0vd6hnufily","tag_id":"clv9oiyhn000nf0vdfly32pms","_id":"clv9oiyhr000sf0vdd73v4ioi"},{"post_id":"clv9oiyhj000kf0vd6hnufily","tag_id":"clv9oiyhp000pf0vd5fraedo5","_id":"clv9oiyhr000tf0vd7sw1g5x6"},{"post_id":"clv9oiyhl000lf0vd6wwd11w2","tag_id":"clv9oiyhc0009f0vdajsce6pd","_id":"clv9oiyhs000yf0vdclws9si5"},{"post_id":"clv9oiyhl000lf0vd6wwd11w2","tag_id":"clv9oiyhq000rf0vd5477e31l","_id":"clv9oiyhs000zf0vdayi80ceg"},{"post_id":"clv9oiyhl000lf0vd6wwd11w2","tag_id":"clv9oiyhr000vf0vd21kw08ni","_id":"clv9oiyhs0010f0vd2se535zi"}],"Tag":[{"name":"Java8","_id":"clv9oiyh30003f0vd4xu57vww"},{"name":"JDK8","_id":"clv9oiyh50005f0vd13473ad8"},{"name":"新特性","_id":"clv9oiyhb0007f0vdfanyaft6"},{"name":"Java","_id":"clv9oiyhc0009f0vdajsce6pd"},{"name":"并发","_id":"clv9oiyhe000df0vdap7s4aa3"},{"name":"CompletableFuture","_id":"clv9oiyhf000gf0vdffkq2wrr"},{"name":"设计模式","_id":"clv9oiyhn000nf0vdfly32pms"},{"name":"设计思想","_id":"clv9oiyhp000pf0vd5fraedo5"},{"name":"对象储存","_id":"clv9oiyhq000rf0vd5477e31l"},{"name":"Minio","_id":"clv9oiyhr000vf0vd21kw08ni"}]}}